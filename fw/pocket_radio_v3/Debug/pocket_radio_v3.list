
pocket_radio_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e70  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c0  08003f28  08003f28  00004f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040e8  080040e8  00006060  2**0
                  CONTENTS
  4 .ARM          00000000  080040e8  080040e8  00006060  2**0
                  CONTENTS
  5 .preinit_array 00000000  080040e8  080040e8  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040e8  080040e8  000050e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080040ec  080040ec  000050ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080040f0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000254  20000060  08004150  00006060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002b4  08004150  000062b4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cc49  00000000  00000000  00006088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d6a  00000000  00000000  00012cd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa0  00000000  00000000  00014a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000084e  00000000  00000000  000154e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015079  00000000  00000000  00015d2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ea5d  00000000  00000000  0002ada7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000829d1  00000000  00000000  00039804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bc1d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a54  00000000  00000000  000bc218  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000bec6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000060 	.word	0x20000060
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08003f10 	.word	0x08003f10

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000064 	.word	0x20000064
 80000fc:	08003f10 	.word	0x08003f10

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_shi>:
 8000110:	b403      	push	{r0, r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0040      	lsls	r0, r0, #1
 8000118:	0049      	lsls	r1, r1, #1
 800011a:	5e09      	ldrsh	r1, [r1, r0]
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	448e      	add	lr, r1
 8000120:	bc03      	pop	{r0, r1}
 8000122:	4770      	bx	lr

08000124 <__udivsi3>:
 8000124:	2200      	movs	r2, #0
 8000126:	0843      	lsrs	r3, r0, #1
 8000128:	428b      	cmp	r3, r1
 800012a:	d374      	bcc.n	8000216 <__udivsi3+0xf2>
 800012c:	0903      	lsrs	r3, r0, #4
 800012e:	428b      	cmp	r3, r1
 8000130:	d35f      	bcc.n	80001f2 <__udivsi3+0xce>
 8000132:	0a03      	lsrs	r3, r0, #8
 8000134:	428b      	cmp	r3, r1
 8000136:	d344      	bcc.n	80001c2 <__udivsi3+0x9e>
 8000138:	0b03      	lsrs	r3, r0, #12
 800013a:	428b      	cmp	r3, r1
 800013c:	d328      	bcc.n	8000190 <__udivsi3+0x6c>
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d30d      	bcc.n	8000160 <__udivsi3+0x3c>
 8000144:	22ff      	movs	r2, #255	@ 0xff
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	ba12      	rev	r2, r2
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d302      	bcc.n	8000156 <__udivsi3+0x32>
 8000150:	1212      	asrs	r2, r2, #8
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	d065      	beq.n	8000222 <__udivsi3+0xfe>
 8000156:	0b03      	lsrs	r3, r0, #12
 8000158:	428b      	cmp	r3, r1
 800015a:	d319      	bcc.n	8000190 <__udivsi3+0x6c>
 800015c:	e000      	b.n	8000160 <__udivsi3+0x3c>
 800015e:	0a09      	lsrs	r1, r1, #8
 8000160:	0bc3      	lsrs	r3, r0, #15
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x46>
 8000166:	03cb      	lsls	r3, r1, #15
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b83      	lsrs	r3, r0, #14
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x52>
 8000172:	038b      	lsls	r3, r1, #14
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b43      	lsrs	r3, r0, #13
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x5e>
 800017e:	034b      	lsls	r3, r1, #13
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b03      	lsrs	r3, r0, #12
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x6a>
 800018a:	030b      	lsls	r3, r1, #12
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0ac3      	lsrs	r3, r0, #11
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x76>
 8000196:	02cb      	lsls	r3, r1, #11
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a83      	lsrs	r3, r0, #10
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x82>
 80001a2:	028b      	lsls	r3, r1, #10
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a43      	lsrs	r3, r0, #9
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x8e>
 80001ae:	024b      	lsls	r3, r1, #9
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a03      	lsrs	r3, r0, #8
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x9a>
 80001ba:	020b      	lsls	r3, r1, #8
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	d2cd      	bcs.n	800015e <__udivsi3+0x3a>
 80001c2:	09c3      	lsrs	r3, r0, #7
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xa8>
 80001c8:	01cb      	lsls	r3, r1, #7
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0983      	lsrs	r3, r0, #6
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xb4>
 80001d4:	018b      	lsls	r3, r1, #6
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0943      	lsrs	r3, r0, #5
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xc0>
 80001e0:	014b      	lsls	r3, r1, #5
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0903      	lsrs	r3, r0, #4
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xcc>
 80001ec:	010b      	lsls	r3, r1, #4
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	08c3      	lsrs	r3, r0, #3
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xd8>
 80001f8:	00cb      	lsls	r3, r1, #3
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0883      	lsrs	r3, r0, #2
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xe4>
 8000204:	008b      	lsls	r3, r1, #2
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0843      	lsrs	r3, r0, #1
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xf0>
 8000210:	004b      	lsls	r3, r1, #1
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	1a41      	subs	r1, r0, r1
 8000218:	d200      	bcs.n	800021c <__udivsi3+0xf8>
 800021a:	4601      	mov	r1, r0
 800021c:	4152      	adcs	r2, r2
 800021e:	4610      	mov	r0, r2
 8000220:	4770      	bx	lr
 8000222:	e7ff      	b.n	8000224 <__udivsi3+0x100>
 8000224:	b501      	push	{r0, lr}
 8000226:	2000      	movs	r0, #0
 8000228:	f000 f806 	bl	8000238 <__aeabi_idiv0>
 800022c:	bd02      	pop	{r1, pc}
 800022e:	46c0      	nop			@ (mov r8, r8)

08000230 <__aeabi_uidivmod>:
 8000230:	2900      	cmp	r1, #0
 8000232:	d0f7      	beq.n	8000224 <__udivsi3+0x100>
 8000234:	e776      	b.n	8000124 <__udivsi3>
 8000236:	4770      	bx	lr

08000238 <__aeabi_idiv0>:
 8000238:	4770      	bx	lr
 800023a:	46c0      	nop			@ (mov r8, r8)

0800023c <HAL_GPIO_EXTI_Falling_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b082      	sub	sp, #8
 8000240:	af00      	add	r7, sp, #0
 8000242:	0002      	movs	r2, r0
 8000244:	1dbb      	adds	r3, r7, #6
 8000246:	801a      	strh	r2, [r3, #0]
	if (GPIO_Pin == CHAN_M_Pin)
 8000248:	1dbb      	adds	r3, r7, #6
 800024a:	881b      	ldrh	r3, [r3, #0]
 800024c:	2b02      	cmp	r3, #2
 800024e:	d103      	bne.n	8000258 <HAL_GPIO_EXTI_Falling_Callback+0x1c>
	{
		Seek_Start(0);   // Seek down
 8000250:	2000      	movs	r0, #0
 8000252:	f000 fbaf 	bl	80009b4 <Seek_Start>
			volume = 60;
		}
		// RX_VOLUME 0x4000 allowed 0-63, set to volume
		Set_Property(0x4000, volume);
	}
}
 8000256:	e040      	b.n	80002da <HAL_GPIO_EXTI_Falling_Callback+0x9e>
	else if (GPIO_Pin == CHAN_P_Pin)
 8000258:	1dbb      	adds	r3, r7, #6
 800025a:	881b      	ldrh	r3, [r3, #0]
 800025c:	2b04      	cmp	r3, #4
 800025e:	d103      	bne.n	8000268 <HAL_GPIO_EXTI_Falling_Callback+0x2c>
		Seek_Start(1);   // Seek up
 8000260:	2001      	movs	r0, #1
 8000262:	f000 fba7 	bl	80009b4 <Seek_Start>
}
 8000266:	e038      	b.n	80002da <HAL_GPIO_EXTI_Falling_Callback+0x9e>
	else if (GPIO_Pin == VOL_M_Pin)
 8000268:	1dbb      	adds	r3, r7, #6
 800026a:	881b      	ldrh	r3, [r3, #0]
 800026c:	2b08      	cmp	r3, #8
 800026e:	d118      	bne.n	80002a2 <HAL_GPIO_EXTI_Falling_Callback+0x66>
		volume -= 5;
 8000270:	4b1c      	ldr	r3, [pc, #112]	@ (80002e4 <HAL_GPIO_EXTI_Falling_Callback+0xa8>)
 8000272:	881b      	ldrh	r3, [r3, #0]
 8000274:	b29b      	uxth	r3, r3
 8000276:	3b05      	subs	r3, #5
 8000278:	b29a      	uxth	r2, r3
 800027a:	4b1a      	ldr	r3, [pc, #104]	@ (80002e4 <HAL_GPIO_EXTI_Falling_Callback+0xa8>)
 800027c:	801a      	strh	r2, [r3, #0]
		if (volume < 5)
 800027e:	4b19      	ldr	r3, [pc, #100]	@ (80002e4 <HAL_GPIO_EXTI_Falling_Callback+0xa8>)
 8000280:	881b      	ldrh	r3, [r3, #0]
 8000282:	b29b      	uxth	r3, r3
 8000284:	2b04      	cmp	r3, #4
 8000286:	d802      	bhi.n	800028e <HAL_GPIO_EXTI_Falling_Callback+0x52>
			volume = 5;
 8000288:	4b16      	ldr	r3, [pc, #88]	@ (80002e4 <HAL_GPIO_EXTI_Falling_Callback+0xa8>)
 800028a:	2205      	movs	r2, #5
 800028c:	801a      	strh	r2, [r3, #0]
	    Set_Property(0x4000, volume);
 800028e:	4b15      	ldr	r3, [pc, #84]	@ (80002e4 <HAL_GPIO_EXTI_Falling_Callback+0xa8>)
 8000290:	881b      	ldrh	r3, [r3, #0]
 8000292:	b29a      	uxth	r2, r3
 8000294:	2380      	movs	r3, #128	@ 0x80
 8000296:	01db      	lsls	r3, r3, #7
 8000298:	0011      	movs	r1, r2
 800029a:	0018      	movs	r0, r3
 800029c:	f000 faa8 	bl	80007f0 <Set_Property>
}
 80002a0:	e01b      	b.n	80002da <HAL_GPIO_EXTI_Falling_Callback+0x9e>
	else if (GPIO_Pin == VOL_P_Pin)
 80002a2:	1dbb      	adds	r3, r7, #6
 80002a4:	881b      	ldrh	r3, [r3, #0]
 80002a6:	2b01      	cmp	r3, #1
 80002a8:	d117      	bne.n	80002da <HAL_GPIO_EXTI_Falling_Callback+0x9e>
		volume += 5;
 80002aa:	4b0e      	ldr	r3, [pc, #56]	@ (80002e4 <HAL_GPIO_EXTI_Falling_Callback+0xa8>)
 80002ac:	881b      	ldrh	r3, [r3, #0]
 80002ae:	b29b      	uxth	r3, r3
 80002b0:	3305      	adds	r3, #5
 80002b2:	b29a      	uxth	r2, r3
 80002b4:	4b0b      	ldr	r3, [pc, #44]	@ (80002e4 <HAL_GPIO_EXTI_Falling_Callback+0xa8>)
 80002b6:	801a      	strh	r2, [r3, #0]
		if (volume > 60)
 80002b8:	4b0a      	ldr	r3, [pc, #40]	@ (80002e4 <HAL_GPIO_EXTI_Falling_Callback+0xa8>)
 80002ba:	881b      	ldrh	r3, [r3, #0]
 80002bc:	b29b      	uxth	r3, r3
 80002be:	2b3c      	cmp	r3, #60	@ 0x3c
 80002c0:	d902      	bls.n	80002c8 <HAL_GPIO_EXTI_Falling_Callback+0x8c>
			volume = 60;
 80002c2:	4b08      	ldr	r3, [pc, #32]	@ (80002e4 <HAL_GPIO_EXTI_Falling_Callback+0xa8>)
 80002c4:	223c      	movs	r2, #60	@ 0x3c
 80002c6:	801a      	strh	r2, [r3, #0]
		Set_Property(0x4000, volume);
 80002c8:	4b06      	ldr	r3, [pc, #24]	@ (80002e4 <HAL_GPIO_EXTI_Falling_Callback+0xa8>)
 80002ca:	881b      	ldrh	r3, [r3, #0]
 80002cc:	b29a      	uxth	r2, r3
 80002ce:	2380      	movs	r3, #128	@ 0x80
 80002d0:	01db      	lsls	r3, r3, #7
 80002d2:	0011      	movs	r1, r2
 80002d4:	0018      	movs	r0, r3
 80002d6:	f000 fa8b 	bl	80007f0 <Set_Property>
}
 80002da:	46c0      	nop			@ (mov r8, r8)
 80002dc:	46bd      	mov	sp, r7
 80002de:	b002      	add	sp, #8
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	46c0      	nop			@ (mov r8, r8)
 80002e4:	20000000 	.word	0x20000000

080002e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b090      	sub	sp, #64	@ 0x40
 80002ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002ee:	f000 fd2b 	bl	8000d48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002f2:	f000 f84b 	bl	800038c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002f6:	f000 f911 	bl	800051c <MX_GPIO_Init>
  MX_I2C1_Init();
 80002fa:	f000 f89b 	bl	8000434 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80002fe:	f000 f8d9 	bl	80004b4 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOB, IND_Pin, GPIO_PIN_SET);
 8000302:	2380      	movs	r3, #128	@ 0x80
 8000304:	021b      	lsls	r3, r3, #8
 8000306:	481c      	ldr	r0, [pc, #112]	@ (8000378 <main+0x90>)
 8000308:	2201      	movs	r2, #1
 800030a:	0019      	movs	r1, r3
 800030c:	f001 f808 	bl	8001320 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8000310:	23fa      	movs	r3, #250	@ 0xfa
 8000312:	009b      	lsls	r3, r3, #2
 8000314:	0018      	movs	r0, r3
 8000316:	f000 fd9d 	bl	8000e54 <HAL_Delay>

	  char msg[64];
	  sprintf(msg, "I'M ALIVEEEE\r\n");
 800031a:	4a18      	ldr	r2, [pc, #96]	@ (800037c <main+0x94>)
 800031c:	003b      	movs	r3, r7
 800031e:	0011      	movs	r1, r2
 8000320:	0018      	movs	r0, r3
 8000322:	f003 f957 	bl	80035d4 <siprintf>
	  Print_UART(msg);
 8000326:	003b      	movs	r3, r7
 8000328:	0018      	movs	r0, r3
 800032a:	f000 f98f 	bl	800064c <Print_UART>

	  Power_Up();
 800032e:	f000 f9a3 	bl	8000678 <Power_Up>
	  Get_Rev();
 8000332:	f000 f9bf 	bl	80006b4 <Get_Rev>

	  // Set GPOs low to avoid oscillation and excessivie current consumption
	  GPIO_Ctl();
 8000336:	f000 fb69 	bl	8000a0c <GPIO_Ctl>
	  GPIO_Set();
 800033a:	f000 fb81 	bl	8000a40 <GPIO_Set>

	  // RX_VOLUME 0x4000 allowed 0-63, set to 30 (0x001E)
	  Set_Property(0x4000, 0x001E);
 800033e:	2380      	movs	r3, #128	@ 0x80
 8000340:	01db      	lsls	r3, r3, #7
 8000342:	211e      	movs	r1, #30
 8000344:	0018      	movs	r0, r3
 8000346:	f000 fa53 	bl	80007f0 <Set_Property>
	  HAL_Delay(100);
 800034a:	2064      	movs	r0, #100	@ 0x64
 800034c:	f000 fd82 	bl	8000e54 <HAL_Delay>

	  // FM_ANTENNA_INPUT 0x1107 0x0001 (LPI antenna input)
	  Set_Property(0x1107, 0x0001);
 8000350:	4b0b      	ldr	r3, [pc, #44]	@ (8000380 <main+0x98>)
 8000352:	2101      	movs	r1, #1
 8000354:	0018      	movs	r0, r3
 8000356:	f000 fa4b 	bl	80007f0 <Set_Property>
	  HAL_Delay(100);
 800035a:	2064      	movs	r0, #100	@ 0x64
 800035c:	f000 fd7a 	bl	8000e54 <HAL_Delay>

	  Tune_Freq(10350);
 8000360:	4b08      	ldr	r3, [pc, #32]	@ (8000384 <main+0x9c>)
 8000362:	0018      	movs	r0, r3
 8000364:	f000 fa7c 	bl	8000860 <Tune_Freq>
	  Tune_Status();
 8000368:	f000 fab0 	bl	80008cc <Tune_Status>

	  while (1)
	  {
		  HAL_Delay(10000);
 800036c:	4b06      	ldr	r3, [pc, #24]	@ (8000388 <main+0xa0>)
 800036e:	0018      	movs	r0, r3
 8000370:	f000 fd70 	bl	8000e54 <HAL_Delay>
 8000374:	e7fa      	b.n	800036c <main+0x84>
 8000376:	46c0      	nop			@ (mov r8, r8)
 8000378:	50000400 	.word	0x50000400
 800037c:	08003f28 	.word	0x08003f28
 8000380:	00001107 	.word	0x00001107
 8000384:	0000286e 	.word	0x0000286e
 8000388:	00002710 	.word	0x00002710

0800038c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800038c:	b590      	push	{r4, r7, lr}
 800038e:	b093      	sub	sp, #76	@ 0x4c
 8000390:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000392:	2414      	movs	r4, #20
 8000394:	193b      	adds	r3, r7, r4
 8000396:	0018      	movs	r0, r3
 8000398:	2334      	movs	r3, #52	@ 0x34
 800039a:	001a      	movs	r2, r3
 800039c:	2100      	movs	r1, #0
 800039e:	f003 f939 	bl	8003614 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003a2:	1d3b      	adds	r3, r7, #4
 80003a4:	0018      	movs	r0, r3
 80003a6:	2310      	movs	r3, #16
 80003a8:	001a      	movs	r2, r3
 80003aa:	2100      	movs	r1, #0
 80003ac:	f003 f932 	bl	8003614 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80003b0:	2380      	movs	r3, #128	@ 0x80
 80003b2:	009b      	lsls	r3, r3, #2
 80003b4:	0018      	movs	r0, r3
 80003b6:	f001 fe49 	bl	800204c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003ba:	193b      	adds	r3, r7, r4
 80003bc:	2201      	movs	r2, #1
 80003be:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003c0:	193b      	adds	r3, r7, r4
 80003c2:	2280      	movs	r2, #128	@ 0x80
 80003c4:	0252      	lsls	r2, r2, #9
 80003c6:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003c8:	0021      	movs	r1, r4
 80003ca:	187b      	adds	r3, r7, r1
 80003cc:	2202      	movs	r2, #2
 80003ce:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003d0:	187b      	adds	r3, r7, r1
 80003d2:	2203      	movs	r2, #3
 80003d4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80003d6:	187b      	adds	r3, r7, r1
 80003d8:	2200      	movs	r2, #0
 80003da:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 12;
 80003dc:	187b      	adds	r3, r7, r1
 80003de:	220c      	movs	r2, #12
 80003e0:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80003e2:	187b      	adds	r3, r7, r1
 80003e4:	2280      	movs	r2, #128	@ 0x80
 80003e6:	0292      	lsls	r2, r2, #10
 80003e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80003ea:	187b      	adds	r3, r7, r1
 80003ec:	2280      	movs	r2, #128	@ 0x80
 80003ee:	0592      	lsls	r2, r2, #22
 80003f0:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003f2:	187b      	adds	r3, r7, r1
 80003f4:	0018      	movs	r0, r3
 80003f6:	f001 fe75 	bl	80020e4 <HAL_RCC_OscConfig>
 80003fa:	1e03      	subs	r3, r0, #0
 80003fc:	d001      	beq.n	8000402 <SystemClock_Config+0x76>
  {
    Error_Handler();
 80003fe:	f000 fb37 	bl	8000a70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000402:	1d3b      	adds	r3, r7, #4
 8000404:	2207      	movs	r2, #7
 8000406:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000408:	1d3b      	adds	r3, r7, #4
 800040a:	2202      	movs	r2, #2
 800040c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800040e:	1d3b      	adds	r3, r7, #4
 8000410:	2200      	movs	r2, #0
 8000412:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000414:	1d3b      	adds	r3, r7, #4
 8000416:	2200      	movs	r2, #0
 8000418:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800041a:	1d3b      	adds	r3, r7, #4
 800041c:	2101      	movs	r1, #1
 800041e:	0018      	movs	r0, r3
 8000420:	f002 f970 	bl	8002704 <HAL_RCC_ClockConfig>
 8000424:	1e03      	subs	r3, r0, #0
 8000426:	d001      	beq.n	800042c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000428:	f000 fb22 	bl	8000a70 <Error_Handler>
  }
}
 800042c:	46c0      	nop			@ (mov r8, r8)
 800042e:	46bd      	mov	sp, r7
 8000430:	b013      	add	sp, #76	@ 0x4c
 8000432:	bd90      	pop	{r4, r7, pc}

08000434 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000438:	4b1b      	ldr	r3, [pc, #108]	@ (80004a8 <MX_I2C1_Init+0x74>)
 800043a:	4a1c      	ldr	r2, [pc, #112]	@ (80004ac <MX_I2C1_Init+0x78>)
 800043c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10805D88;
 800043e:	4b1a      	ldr	r3, [pc, #104]	@ (80004a8 <MX_I2C1_Init+0x74>)
 8000440:	4a1b      	ldr	r2, [pc, #108]	@ (80004b0 <MX_I2C1_Init+0x7c>)
 8000442:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000444:	4b18      	ldr	r3, [pc, #96]	@ (80004a8 <MX_I2C1_Init+0x74>)
 8000446:	2200      	movs	r2, #0
 8000448:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800044a:	4b17      	ldr	r3, [pc, #92]	@ (80004a8 <MX_I2C1_Init+0x74>)
 800044c:	2201      	movs	r2, #1
 800044e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000450:	4b15      	ldr	r3, [pc, #84]	@ (80004a8 <MX_I2C1_Init+0x74>)
 8000452:	2200      	movs	r2, #0
 8000454:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000456:	4b14      	ldr	r3, [pc, #80]	@ (80004a8 <MX_I2C1_Init+0x74>)
 8000458:	2200      	movs	r2, #0
 800045a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800045c:	4b12      	ldr	r3, [pc, #72]	@ (80004a8 <MX_I2C1_Init+0x74>)
 800045e:	2200      	movs	r2, #0
 8000460:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000462:	4b11      	ldr	r3, [pc, #68]	@ (80004a8 <MX_I2C1_Init+0x74>)
 8000464:	2200      	movs	r2, #0
 8000466:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000468:	4b0f      	ldr	r3, [pc, #60]	@ (80004a8 <MX_I2C1_Init+0x74>)
 800046a:	2200      	movs	r2, #0
 800046c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800046e:	4b0e      	ldr	r3, [pc, #56]	@ (80004a8 <MX_I2C1_Init+0x74>)
 8000470:	0018      	movs	r0, r3
 8000472:	f000 ffa7 	bl	80013c4 <HAL_I2C_Init>
 8000476:	1e03      	subs	r3, r0, #0
 8000478:	d001      	beq.n	800047e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800047a:	f000 faf9 	bl	8000a70 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800047e:	4b0a      	ldr	r3, [pc, #40]	@ (80004a8 <MX_I2C1_Init+0x74>)
 8000480:	2100      	movs	r1, #0
 8000482:	0018      	movs	r0, r3
 8000484:	f001 fd4a 	bl	8001f1c <HAL_I2CEx_ConfigAnalogFilter>
 8000488:	1e03      	subs	r3, r0, #0
 800048a:	d001      	beq.n	8000490 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800048c:	f000 faf0 	bl	8000a70 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000490:	4b05      	ldr	r3, [pc, #20]	@ (80004a8 <MX_I2C1_Init+0x74>)
 8000492:	2100      	movs	r1, #0
 8000494:	0018      	movs	r0, r3
 8000496:	f001 fd8d 	bl	8001fb4 <HAL_I2CEx_ConfigDigitalFilter>
 800049a:	1e03      	subs	r3, r0, #0
 800049c:	d001      	beq.n	80004a2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800049e:	f000 fae7 	bl	8000a70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80004a2:	46c0      	nop			@ (mov r8, r8)
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	2000007c 	.word	0x2000007c
 80004ac:	40005400 	.word	0x40005400
 80004b0:	10805d88 	.word	0x10805d88

080004b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004b8:	4b16      	ldr	r3, [pc, #88]	@ (8000514 <MX_USART2_UART_Init+0x60>)
 80004ba:	4a17      	ldr	r2, [pc, #92]	@ (8000518 <MX_USART2_UART_Init+0x64>)
 80004bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80004be:	4b15      	ldr	r3, [pc, #84]	@ (8000514 <MX_USART2_UART_Init+0x60>)
 80004c0:	22e1      	movs	r2, #225	@ 0xe1
 80004c2:	0252      	lsls	r2, r2, #9
 80004c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004c6:	4b13      	ldr	r3, [pc, #76]	@ (8000514 <MX_USART2_UART_Init+0x60>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004cc:	4b11      	ldr	r3, [pc, #68]	@ (8000514 <MX_USART2_UART_Init+0x60>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004d2:	4b10      	ldr	r3, [pc, #64]	@ (8000514 <MX_USART2_UART_Init+0x60>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004d8:	4b0e      	ldr	r3, [pc, #56]	@ (8000514 <MX_USART2_UART_Init+0x60>)
 80004da:	220c      	movs	r2, #12
 80004dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004de:	4b0d      	ldr	r3, [pc, #52]	@ (8000514 <MX_USART2_UART_Init+0x60>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004e4:	4b0b      	ldr	r3, [pc, #44]	@ (8000514 <MX_USART2_UART_Init+0x60>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004ea:	4b0a      	ldr	r3, [pc, #40]	@ (8000514 <MX_USART2_UART_Init+0x60>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80004f0:	4b08      	ldr	r3, [pc, #32]	@ (8000514 <MX_USART2_UART_Init+0x60>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004f6:	4b07      	ldr	r3, [pc, #28]	@ (8000514 <MX_USART2_UART_Init+0x60>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004fc:	4b05      	ldr	r3, [pc, #20]	@ (8000514 <MX_USART2_UART_Init+0x60>)
 80004fe:	0018      	movs	r0, r3
 8000500:	f002 fbd0 	bl	8002ca4 <HAL_UART_Init>
 8000504:	1e03      	subs	r3, r0, #0
 8000506:	d001      	beq.n	800050c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000508:	f000 fab2 	bl	8000a70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800050c:	46c0      	nop			@ (mov r8, r8)
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	46c0      	nop			@ (mov r8, r8)
 8000514:	200000d0 	.word	0x200000d0
 8000518:	40004400 	.word	0x40004400

0800051c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800051c:	b590      	push	{r4, r7, lr}
 800051e:	b089      	sub	sp, #36	@ 0x24
 8000520:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000522:	240c      	movs	r4, #12
 8000524:	193b      	adds	r3, r7, r4
 8000526:	0018      	movs	r0, r3
 8000528:	2314      	movs	r3, #20
 800052a:	001a      	movs	r2, r3
 800052c:	2100      	movs	r1, #0
 800052e:	f003 f871 	bl	8003614 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000532:	4b43      	ldr	r3, [pc, #268]	@ (8000640 <MX_GPIO_Init+0x124>)
 8000534:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000536:	4b42      	ldr	r3, [pc, #264]	@ (8000640 <MX_GPIO_Init+0x124>)
 8000538:	2120      	movs	r1, #32
 800053a:	430a      	orrs	r2, r1
 800053c:	635a      	str	r2, [r3, #52]	@ 0x34
 800053e:	4b40      	ldr	r3, [pc, #256]	@ (8000640 <MX_GPIO_Init+0x124>)
 8000540:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000542:	2220      	movs	r2, #32
 8000544:	4013      	ands	r3, r2
 8000546:	60bb      	str	r3, [r7, #8]
 8000548:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800054a:	4b3d      	ldr	r3, [pc, #244]	@ (8000640 <MX_GPIO_Init+0x124>)
 800054c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800054e:	4b3c      	ldr	r3, [pc, #240]	@ (8000640 <MX_GPIO_Init+0x124>)
 8000550:	2101      	movs	r1, #1
 8000552:	430a      	orrs	r2, r1
 8000554:	635a      	str	r2, [r3, #52]	@ 0x34
 8000556:	4b3a      	ldr	r3, [pc, #232]	@ (8000640 <MX_GPIO_Init+0x124>)
 8000558:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800055a:	2201      	movs	r2, #1
 800055c:	4013      	ands	r3, r2
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000562:	4b37      	ldr	r3, [pc, #220]	@ (8000640 <MX_GPIO_Init+0x124>)
 8000564:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000566:	4b36      	ldr	r3, [pc, #216]	@ (8000640 <MX_GPIO_Init+0x124>)
 8000568:	2102      	movs	r1, #2
 800056a:	430a      	orrs	r2, r1
 800056c:	635a      	str	r2, [r3, #52]	@ 0x34
 800056e:	4b34      	ldr	r3, [pc, #208]	@ (8000640 <MX_GPIO_Init+0x124>)
 8000570:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000572:	2202      	movs	r2, #2
 8000574:	4013      	ands	r3, r2
 8000576:	603b      	str	r3, [r7, #0]
 8000578:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIG1_Pin|DIG2_Pin|DIG4_Pin|DIG8_Pin
 800057a:	4932      	ldr	r1, [pc, #200]	@ (8000644 <MX_GPIO_Init+0x128>)
 800057c:	4b32      	ldr	r3, [pc, #200]	@ (8000648 <MX_GPIO_Init+0x12c>)
 800057e:	2200      	movs	r2, #0
 8000580:	0018      	movs	r0, r3
 8000582:	f000 fecd 	bl	8001320 <HAL_GPIO_WritePin>
                          |IND_Pin|ADDR_SEL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : VOL_P_Pin CHAN_M_Pin CHAN_P_Pin VOL_M_Pin */
  GPIO_InitStruct.Pin = VOL_P_Pin|CHAN_M_Pin|CHAN_P_Pin|VOL_M_Pin;
 8000586:	193b      	adds	r3, r7, r4
 8000588:	220f      	movs	r2, #15
 800058a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800058c:	193b      	adds	r3, r7, r4
 800058e:	2284      	movs	r2, #132	@ 0x84
 8000590:	0392      	lsls	r2, r2, #14
 8000592:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000594:	193b      	adds	r3, r7, r4
 8000596:	2201      	movs	r2, #1
 8000598:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800059a:	193b      	adds	r3, r7, r4
 800059c:	4a2a      	ldr	r2, [pc, #168]	@ (8000648 <MX_GPIO_Init+0x12c>)
 800059e:	0019      	movs	r1, r3
 80005a0:	0010      	movs	r0, r2
 80005a2:	f000 fd59 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIG1_Pin DIG2_Pin DIG4_Pin DIG8_Pin
                           IND_Pin */
  GPIO_InitStruct.Pin = DIG1_Pin|DIG2_Pin|DIG4_Pin|DIG8_Pin
 80005a6:	0021      	movs	r1, r4
 80005a8:	193b      	adds	r3, r7, r4
 80005aa:	22f8      	movs	r2, #248	@ 0xf8
 80005ac:	0212      	lsls	r2, r2, #8
 80005ae:	601a      	str	r2, [r3, #0]
                          |IND_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b0:	000c      	movs	r4, r1
 80005b2:	193b      	adds	r3, r7, r4
 80005b4:	2201      	movs	r2, #1
 80005b6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b8:	193b      	adds	r3, r7, r4
 80005ba:	2200      	movs	r2, #0
 80005bc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005be:	193b      	adds	r3, r7, r4
 80005c0:	2200      	movs	r2, #0
 80005c2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005c4:	193b      	adds	r3, r7, r4
 80005c6:	4a20      	ldr	r2, [pc, #128]	@ (8000648 <MX_GPIO_Init+0x12c>)
 80005c8:	0019      	movs	r1, r3
 80005ca:	0010      	movs	r0, r2
 80005cc:	f000 fd44 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADDR_SEL_Pin */
  GPIO_InitStruct.Pin = ADDR_SEL_Pin;
 80005d0:	193b      	adds	r3, r7, r4
 80005d2:	2220      	movs	r2, #32
 80005d4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d6:	193b      	adds	r3, r7, r4
 80005d8:	2201      	movs	r2, #1
 80005da:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005dc:	193b      	adds	r3, r7, r4
 80005de:	2202      	movs	r2, #2
 80005e0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e2:	193b      	adds	r3, r7, r4
 80005e4:	2200      	movs	r2, #0
 80005e6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(ADDR_SEL_GPIO_Port, &GPIO_InitStruct);
 80005e8:	193b      	adds	r3, r7, r4
 80005ea:	4a17      	ldr	r2, [pc, #92]	@ (8000648 <MX_GPIO_Init+0x12c>)
 80005ec:	0019      	movs	r1, r3
 80005ee:	0010      	movs	r0, r2
 80005f0:	f000 fd32 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPO1_Pin GPO2_Pin */
  GPIO_InitStruct.Pin = GPO1_Pin|GPO2_Pin;
 80005f4:	0021      	movs	r1, r4
 80005f6:	187b      	adds	r3, r7, r1
 80005f8:	22c0      	movs	r2, #192	@ 0xc0
 80005fa:	0092      	lsls	r2, r2, #2
 80005fc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005fe:	187b      	adds	r3, r7, r1
 8000600:	2200      	movs	r2, #0
 8000602:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000604:	187b      	adds	r3, r7, r1
 8000606:	2200      	movs	r2, #0
 8000608:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800060a:	187b      	adds	r3, r7, r1
 800060c:	4a0e      	ldr	r2, [pc, #56]	@ (8000648 <MX_GPIO_Init+0x12c>)
 800060e:	0019      	movs	r1, r3
 8000610:	0010      	movs	r0, r2
 8000612:	f000 fd21 	bl	8001058 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000616:	2200      	movs	r2, #0
 8000618:	2100      	movs	r1, #0
 800061a:	2005      	movs	r0, #5
 800061c:	f000 fcea 	bl	8000ff4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000620:	2005      	movs	r0, #5
 8000622:	f000 fcfc 	bl	800101e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8000626:	2200      	movs	r2, #0
 8000628:	2100      	movs	r1, #0
 800062a:	2006      	movs	r0, #6
 800062c:	f000 fce2 	bl	8000ff4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8000630:	2006      	movs	r0, #6
 8000632:	f000 fcf4 	bl	800101e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000636:	46c0      	nop			@ (mov r8, r8)
 8000638:	46bd      	mov	sp, r7
 800063a:	b009      	add	sp, #36	@ 0x24
 800063c:	bd90      	pop	{r4, r7, pc}
 800063e:	46c0      	nop			@ (mov r8, r8)
 8000640:	40021000 	.word	0x40021000
 8000644:	0000f820 	.word	0x0000f820
 8000648:	50000400 	.word	0x50000400

0800064c <Print_UART>:

/* USER CODE BEGIN 4 */
void Print_UART(char *str)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	0018      	movs	r0, r3
 8000658:	f7ff fd52 	bl	8000100 <strlen>
 800065c:	0003      	movs	r3, r0
 800065e:	b29a      	uxth	r2, r3
 8000660:	2301      	movs	r3, #1
 8000662:	425b      	negs	r3, r3
 8000664:	6879      	ldr	r1, [r7, #4]
 8000666:	4803      	ldr	r0, [pc, #12]	@ (8000674 <Print_UART+0x28>)
 8000668:	f002 fb72 	bl	8002d50 <HAL_UART_Transmit>
}
 800066c:	46c0      	nop			@ (mov r8, r8)
 800066e:	46bd      	mov	sp, r7
 8000670:	b002      	add	sp, #8
 8000672:	bd80      	pop	{r7, pc}
 8000674:	200000d0 	.word	0x200000d0

08000678 <Power_Up>:
* 	XOSCEN 1 (use crystal oscillator)
* 	FUNC 0 (FM receive)
* ARG2 0x05 (00000101 analog audio output)
*/
void Power_Up(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af02      	add	r7, sp, #8
  uint8_t cmd[3] = {0x01, 0x10, 0x05};  // CMD, ARG1, ARG2
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	4a0a      	ldr	r2, [pc, #40]	@ (80006ac <Power_Up+0x34>)
 8000682:	8811      	ldrh	r1, [r2, #0]
 8000684:	8019      	strh	r1, [r3, #0]
 8000686:	7892      	ldrb	r2, [r2, #2]
 8000688:	709a      	strb	r2, [r3, #2]
  HAL_I2C_Master_Transmit(&hi2c1, ADDR, cmd, sizeof(cmd), HAL_MAX_DELAY);
 800068a:	1d3a      	adds	r2, r7, #4
 800068c:	4808      	ldr	r0, [pc, #32]	@ (80006b0 <Power_Up+0x38>)
 800068e:	2301      	movs	r3, #1
 8000690:	425b      	negs	r3, r3
 8000692:	9300      	str	r3, [sp, #0]
 8000694:	2303      	movs	r3, #3
 8000696:	2122      	movs	r1, #34	@ 0x22
 8000698:	f000 ff3a 	bl	8001510 <HAL_I2C_Master_Transmit>
  HAL_Delay(100);  // wait for CTS to go high hopefully
 800069c:	2064      	movs	r0, #100	@ 0x64
 800069e:	f000 fbd9 	bl	8000e54 <HAL_Delay>
}
 80006a2:	46c0      	nop			@ (mov r8, r8)
 80006a4:	46bd      	mov	sp, r7
 80006a6:	b002      	add	sp, #8
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	46c0      	nop			@ (mov r8, r8)
 80006ac:	08003f38 	.word	0x08003f38
 80006b0:	2000007c 	.word	0x2000007c

080006b4 <Get_Rev>:
/*
* CMD 0x10 (GET_REV)
* Response: STATUS + 15 bytes
*/
void Get_Rev(void)
{
 80006b4:	b5b0      	push	{r4, r5, r7, lr}
 80006b6:	b098      	sub	sp, #96	@ 0x60
 80006b8:	af02      	add	r7, sp, #8
  uint8_t cmd = 0x10;
 80006ba:	2553      	movs	r5, #83	@ 0x53
 80006bc:	197b      	adds	r3, r7, r5
 80006be:	2210      	movs	r2, #16
 80006c0:	701a      	strb	r2, [r3, #0]
  uint8_t resp[16] = {0};
 80006c2:	2440      	movs	r4, #64	@ 0x40
 80006c4:	193b      	adds	r3, r7, r4
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
 80006ca:	3304      	adds	r3, #4
 80006cc:	220c      	movs	r2, #12
 80006ce:	2100      	movs	r1, #0
 80006d0:	0018      	movs	r0, r3
 80006d2:	f002 ff9f 	bl	8003614 <memset>

  HAL_I2C_Master_Transmit(&hi2c1, ADDR, &cmd, 1, HAL_MAX_DELAY);
 80006d6:	197a      	adds	r2, r7, r5
 80006d8:	483c      	ldr	r0, [pc, #240]	@ (80007cc <Get_Rev+0x118>)
 80006da:	2301      	movs	r3, #1
 80006dc:	425b      	negs	r3, r3
 80006de:	9300      	str	r3, [sp, #0]
 80006e0:	2301      	movs	r3, #1
 80006e2:	2122      	movs	r1, #34	@ 0x22
 80006e4:	f000 ff14 	bl	8001510 <HAL_I2C_Master_Transmit>

  HAL_Delay(100); // Hopefully CTS set by now
 80006e8:	2064      	movs	r0, #100	@ 0x64
 80006ea:	f000 fbb3 	bl	8000e54 <HAL_Delay>

  HAL_I2C_Master_Receive(&hi2c1, ADDR, resp, 16, HAL_MAX_DELAY);
 80006ee:	193a      	adds	r2, r7, r4
 80006f0:	4836      	ldr	r0, [pc, #216]	@ (80007cc <Get_Rev+0x118>)
 80006f2:	2301      	movs	r3, #1
 80006f4:	425b      	negs	r3, r3
 80006f6:	9300      	str	r3, [sp, #0]
 80006f8:	2310      	movs	r3, #16
 80006fa:	2122      	movs	r1, #34	@ 0x22
 80006fc:	f001 f832 	bl	8001764 <HAL_I2C_Master_Receive>

  char msg[64];
  sprintf(msg, "STATUS: 0x%02X\r\n", resp[0]);
 8000700:	193b      	adds	r3, r7, r4
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	001a      	movs	r2, r3
 8000706:	4932      	ldr	r1, [pc, #200]	@ (80007d0 <Get_Rev+0x11c>)
 8000708:	003b      	movs	r3, r7
 800070a:	0018      	movs	r0, r3
 800070c:	f002 ff62 	bl	80035d4 <siprintf>
  Print_UART(msg);
 8000710:	003b      	movs	r3, r7
 8000712:	0018      	movs	r0, r3
 8000714:	f7ff ff9a 	bl	800064c <Print_UART>
  sprintf(msg, "Part Number: %d\r\n", resp[1]);
 8000718:	193b      	adds	r3, r7, r4
 800071a:	785b      	ldrb	r3, [r3, #1]
 800071c:	001a      	movs	r2, r3
 800071e:	492d      	ldr	r1, [pc, #180]	@ (80007d4 <Get_Rev+0x120>)
 8000720:	003b      	movs	r3, r7
 8000722:	0018      	movs	r0, r3
 8000724:	f002 ff56 	bl	80035d4 <siprintf>
  Print_UART(msg);
 8000728:	003b      	movs	r3, r7
 800072a:	0018      	movs	r0, r3
 800072c:	f7ff ff8e 	bl	800064c <Print_UART>
  sprintf(msg, "FW Major: %d\r\n", resp[2]);
 8000730:	193b      	adds	r3, r7, r4
 8000732:	789b      	ldrb	r3, [r3, #2]
 8000734:	001a      	movs	r2, r3
 8000736:	4928      	ldr	r1, [pc, #160]	@ (80007d8 <Get_Rev+0x124>)
 8000738:	003b      	movs	r3, r7
 800073a:	0018      	movs	r0, r3
 800073c:	f002 ff4a 	bl	80035d4 <siprintf>
  Print_UART(msg);
 8000740:	003b      	movs	r3, r7
 8000742:	0018      	movs	r0, r3
 8000744:	f7ff ff82 	bl	800064c <Print_UART>
  sprintf(msg, "FW Minor: %d\r\n", resp[3]);
 8000748:	193b      	adds	r3, r7, r4
 800074a:	78db      	ldrb	r3, [r3, #3]
 800074c:	001a      	movs	r2, r3
 800074e:	4923      	ldr	r1, [pc, #140]	@ (80007dc <Get_Rev+0x128>)
 8000750:	003b      	movs	r3, r7
 8000752:	0018      	movs	r0, r3
 8000754:	f002 ff3e 	bl	80035d4 <siprintf>
  int patchID = (resp[4] << 8) | resp[5];
 8000758:	193b      	adds	r3, r7, r4
 800075a:	791b      	ldrb	r3, [r3, #4]
 800075c:	021b      	lsls	r3, r3, #8
 800075e:	193a      	adds	r2, r7, r4
 8000760:	7952      	ldrb	r2, [r2, #5]
 8000762:	4313      	orrs	r3, r2
 8000764:	657b      	str	r3, [r7, #84]	@ 0x54
  sprintf(msg, "Patch ID: %d\r\n", patchID);
 8000766:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000768:	491d      	ldr	r1, [pc, #116]	@ (80007e0 <Get_Rev+0x12c>)
 800076a:	003b      	movs	r3, r7
 800076c:	0018      	movs	r0, r3
 800076e:	f002 ff31 	bl	80035d4 <siprintf>
  Print_UART(msg);
 8000772:	003b      	movs	r3, r7
 8000774:	0018      	movs	r0, r3
 8000776:	f7ff ff69 	bl	800064c <Print_UART>
  sprintf(msg, "Comp Major: %d\r\n", resp[6]);
 800077a:	193b      	adds	r3, r7, r4
 800077c:	799b      	ldrb	r3, [r3, #6]
 800077e:	001a      	movs	r2, r3
 8000780:	4918      	ldr	r1, [pc, #96]	@ (80007e4 <Get_Rev+0x130>)
 8000782:	003b      	movs	r3, r7
 8000784:	0018      	movs	r0, r3
 8000786:	f002 ff25 	bl	80035d4 <siprintf>
  Print_UART(msg);
 800078a:	003b      	movs	r3, r7
 800078c:	0018      	movs	r0, r3
 800078e:	f7ff ff5d 	bl	800064c <Print_UART>
  sprintf(msg, "Comp Minor: %d\r\n", resp[7]);
 8000792:	193b      	adds	r3, r7, r4
 8000794:	79db      	ldrb	r3, [r3, #7]
 8000796:	001a      	movs	r2, r3
 8000798:	4913      	ldr	r1, [pc, #76]	@ (80007e8 <Get_Rev+0x134>)
 800079a:	003b      	movs	r3, r7
 800079c:	0018      	movs	r0, r3
 800079e:	f002 ff19 	bl	80035d4 <siprintf>
  Print_UART(msg);
 80007a2:	003b      	movs	r3, r7
 80007a4:	0018      	movs	r0, r3
 80007a6:	f7ff ff51 	bl	800064c <Print_UART>
  sprintf(msg, "Chip Rev: %d\r\n", resp[8]);
 80007aa:	193b      	adds	r3, r7, r4
 80007ac:	7a1b      	ldrb	r3, [r3, #8]
 80007ae:	001a      	movs	r2, r3
 80007b0:	490e      	ldr	r1, [pc, #56]	@ (80007ec <Get_Rev+0x138>)
 80007b2:	003b      	movs	r3, r7
 80007b4:	0018      	movs	r0, r3
 80007b6:	f002 ff0d 	bl	80035d4 <siprintf>
  Print_UART(msg);
 80007ba:	003b      	movs	r3, r7
 80007bc:	0018      	movs	r0, r3
 80007be:	f7ff ff45 	bl	800064c <Print_UART>
}
 80007c2:	46c0      	nop			@ (mov r8, r8)
 80007c4:	46bd      	mov	sp, r7
 80007c6:	b016      	add	sp, #88	@ 0x58
 80007c8:	bdb0      	pop	{r4, r5, r7, pc}
 80007ca:	46c0      	nop			@ (mov r8, r8)
 80007cc:	2000007c 	.word	0x2000007c
 80007d0:	08003f3c 	.word	0x08003f3c
 80007d4:	08003f50 	.word	0x08003f50
 80007d8:	08003f64 	.word	0x08003f64
 80007dc:	08003f74 	.word	0x08003f74
 80007e0:	08003f84 	.word	0x08003f84
 80007e4:	08003f94 	.word	0x08003f94
 80007e8:	08003fa8 	.word	0x08003fa8
 80007ec:	08003fbc 	.word	0x08003fbc

080007f0 <Set_Property>:
* Properties:
* 	FM_ANTENNA_INPUT 0x1107 0x0001 (LPI antenna input)
* 	RX_VOLUME 0x4000 0-63 (dec)
*/
void Set_Property(uint16_t property, uint16_t value)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b086      	sub	sp, #24
 80007f4:	af02      	add	r7, sp, #8
 80007f6:	0002      	movs	r2, r0
 80007f8:	1dbb      	adds	r3, r7, #6
 80007fa:	801a      	strh	r2, [r3, #0]
 80007fc:	1d3b      	adds	r3, r7, #4
 80007fe:	1c0a      	adds	r2, r1, #0
 8000800:	801a      	strh	r2, [r3, #0]
  uint8_t cmd[6] = {0x12, 0x00, (property >> 8) & 0xFF, property & 0xFF, (value >> 8) & 0xFF, value & 0xFF};
 8000802:	2108      	movs	r1, #8
 8000804:	187b      	adds	r3, r7, r1
 8000806:	2212      	movs	r2, #18
 8000808:	701a      	strb	r2, [r3, #0]
 800080a:	187b      	adds	r3, r7, r1
 800080c:	2200      	movs	r2, #0
 800080e:	705a      	strb	r2, [r3, #1]
 8000810:	1dbb      	adds	r3, r7, #6
 8000812:	881b      	ldrh	r3, [r3, #0]
 8000814:	0a1b      	lsrs	r3, r3, #8
 8000816:	b29b      	uxth	r3, r3
 8000818:	b2da      	uxtb	r2, r3
 800081a:	187b      	adds	r3, r7, r1
 800081c:	709a      	strb	r2, [r3, #2]
 800081e:	1dbb      	adds	r3, r7, #6
 8000820:	881b      	ldrh	r3, [r3, #0]
 8000822:	b2da      	uxtb	r2, r3
 8000824:	187b      	adds	r3, r7, r1
 8000826:	70da      	strb	r2, [r3, #3]
 8000828:	1d3b      	adds	r3, r7, #4
 800082a:	881b      	ldrh	r3, [r3, #0]
 800082c:	0a1b      	lsrs	r3, r3, #8
 800082e:	b29b      	uxth	r3, r3
 8000830:	b2da      	uxtb	r2, r3
 8000832:	187b      	adds	r3, r7, r1
 8000834:	711a      	strb	r2, [r3, #4]
 8000836:	1d3b      	adds	r3, r7, #4
 8000838:	881b      	ldrh	r3, [r3, #0]
 800083a:	b2da      	uxtb	r2, r3
 800083c:	187b      	adds	r3, r7, r1
 800083e:	715a      	strb	r2, [r3, #5]
  HAL_I2C_Master_Transmit(&hi2c1, ADDR, cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000840:	187a      	adds	r2, r7, r1
 8000842:	4806      	ldr	r0, [pc, #24]	@ (800085c <Set_Property+0x6c>)
 8000844:	2301      	movs	r3, #1
 8000846:	425b      	negs	r3, r3
 8000848:	9300      	str	r3, [sp, #0]
 800084a:	2306      	movs	r3, #6
 800084c:	2122      	movs	r1, #34	@ 0x22
 800084e:	f000 fe5f 	bl	8001510 <HAL_I2C_Master_Transmit>
//  HAL_Delay(100);
}
 8000852:	46c0      	nop			@ (mov r8, r8)
 8000854:	46bd      	mov	sp, r7
 8000856:	b004      	add	sp, #16
 8000858:	bd80      	pop	{r7, pc}
 800085a:	46c0      	nop			@ (mov r8, r8)
 800085c:	2000007c 	.word	0x2000007c

08000860 <Tune_Freq>:
* ARG4 0x00 (set antenna tuning cap automatically)
*
* @param channel in 10kHz units from 64-108MHz
*/
void Tune_Freq(uint16_t channel)
{
 8000860:	b590      	push	{r4, r7, lr}
 8000862:	b087      	sub	sp, #28
 8000864:	af02      	add	r7, sp, #8
 8000866:	0002      	movs	r2, r0
 8000868:	1dbb      	adds	r3, r7, #6
 800086a:	801a      	strh	r2, [r3, #0]
  uint8_t FREQ_H = (channel >> 8) & 0xFF;
 800086c:	1dbb      	adds	r3, r7, #6
 800086e:	881b      	ldrh	r3, [r3, #0]
 8000870:	0a1b      	lsrs	r3, r3, #8
 8000872:	b29a      	uxth	r2, r3
 8000874:	200f      	movs	r0, #15
 8000876:	183b      	adds	r3, r7, r0
 8000878:	701a      	strb	r2, [r3, #0]
  uint8_t FREQ_L = channel & 0xFF;
 800087a:	240e      	movs	r4, #14
 800087c:	193b      	adds	r3, r7, r4
 800087e:	1dba      	adds	r2, r7, #6
 8000880:	8812      	ldrh	r2, [r2, #0]
 8000882:	701a      	strb	r2, [r3, #0]
  uint8_t cmd[5] = {0x20, 0x00, FREQ_H, FREQ_L, 0x00};
 8000884:	2108      	movs	r1, #8
 8000886:	187b      	adds	r3, r7, r1
 8000888:	2220      	movs	r2, #32
 800088a:	701a      	strb	r2, [r3, #0]
 800088c:	187b      	adds	r3, r7, r1
 800088e:	2200      	movs	r2, #0
 8000890:	705a      	strb	r2, [r3, #1]
 8000892:	187b      	adds	r3, r7, r1
 8000894:	183a      	adds	r2, r7, r0
 8000896:	7812      	ldrb	r2, [r2, #0]
 8000898:	709a      	strb	r2, [r3, #2]
 800089a:	187b      	adds	r3, r7, r1
 800089c:	193a      	adds	r2, r7, r4
 800089e:	7812      	ldrb	r2, [r2, #0]
 80008a0:	70da      	strb	r2, [r3, #3]
 80008a2:	187b      	adds	r3, r7, r1
 80008a4:	2200      	movs	r2, #0
 80008a6:	711a      	strb	r2, [r3, #4]
  HAL_I2C_Master_Transmit(&hi2c1, ADDR, cmd, sizeof(cmd), HAL_MAX_DELAY);
 80008a8:	187a      	adds	r2, r7, r1
 80008aa:	4807      	ldr	r0, [pc, #28]	@ (80008c8 <Tune_Freq+0x68>)
 80008ac:	2301      	movs	r3, #1
 80008ae:	425b      	negs	r3, r3
 80008b0:	9300      	str	r3, [sp, #0]
 80008b2:	2305      	movs	r3, #5
 80008b4:	2122      	movs	r1, #34	@ 0x22
 80008b6:	f000 fe2b 	bl	8001510 <HAL_I2C_Master_Transmit>
  HAL_Delay(100);
 80008ba:	2064      	movs	r0, #100	@ 0x64
 80008bc:	f000 faca 	bl	8000e54 <HAL_Delay>
}
 80008c0:	46c0      	nop			@ (mov r8, r8)
 80008c2:	46bd      	mov	sp, r7
 80008c4:	b005      	add	sp, #20
 80008c6:	bd90      	pop	{r4, r7, pc}
 80008c8:	2000007c 	.word	0x2000007c

080008cc <Tune_Status>:
* ARG1 0x00
* 	CANCEL 0 (don't cancel seek) (bit 1)
* 	INTACK 0 (don't clear seek/tune interrupt status indicator) (bit 0)
*/
void Tune_Status(void)
{
 80008cc:	b590      	push	{r4, r7, lr}
 80008ce:	b097      	sub	sp, #92	@ 0x5c
 80008d0:	af02      	add	r7, sp, #8
  uint8_t cmd[2] = {0x22, 0x00};
 80008d2:	2148      	movs	r1, #72	@ 0x48
 80008d4:	187b      	adds	r3, r7, r1
 80008d6:	2222      	movs	r2, #34	@ 0x22
 80008d8:	801a      	strh	r2, [r3, #0]
  HAL_I2C_Master_Transmit(&hi2c1, ADDR, cmd, sizeof(cmd), HAL_MAX_DELAY);
 80008da:	187a      	adds	r2, r7, r1
 80008dc:	482f      	ldr	r0, [pc, #188]	@ (800099c <Tune_Status+0xd0>)
 80008de:	2301      	movs	r3, #1
 80008e0:	425b      	negs	r3, r3
 80008e2:	9300      	str	r3, [sp, #0]
 80008e4:	2302      	movs	r3, #2
 80008e6:	2122      	movs	r1, #34	@ 0x22
 80008e8:	f000 fe12 	bl	8001510 <HAL_I2C_Master_Transmit>
  HAL_Delay(100);
 80008ec:	2064      	movs	r0, #100	@ 0x64
 80008ee:	f000 fab1 	bl	8000e54 <HAL_Delay>

  uint8_t resp[8] = {0};
 80008f2:	2440      	movs	r4, #64	@ 0x40
 80008f4:	193b      	adds	r3, r7, r4
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	2200      	movs	r2, #0
 80008fc:	605a      	str	r2, [r3, #4]
  HAL_I2C_Master_Receive(&hi2c1, ADDR, resp, 8, HAL_MAX_DELAY);
 80008fe:	193a      	adds	r2, r7, r4
 8000900:	4826      	ldr	r0, [pc, #152]	@ (800099c <Tune_Status+0xd0>)
 8000902:	2301      	movs	r3, #1
 8000904:	425b      	negs	r3, r3
 8000906:	9300      	str	r3, [sp, #0]
 8000908:	2308      	movs	r3, #8
 800090a:	2122      	movs	r1, #34	@ 0x22
 800090c:	f000 ff2a 	bl	8001764 <HAL_I2C_Master_Receive>

  char msg[64];
  sprintf(msg, "RESP1: 0x%02X\r\n", resp[1]);
 8000910:	193b      	adds	r3, r7, r4
 8000912:	785b      	ldrb	r3, [r3, #1]
 8000914:	001a      	movs	r2, r3
 8000916:	4922      	ldr	r1, [pc, #136]	@ (80009a0 <Tune_Status+0xd4>)
 8000918:	003b      	movs	r3, r7
 800091a:	0018      	movs	r0, r3
 800091c:	f002 fe5a 	bl	80035d4 <siprintf>
  Print_UART(msg);
 8000920:	003b      	movs	r3, r7
 8000922:	0018      	movs	r0, r3
 8000924:	f7ff fe92 	bl	800064c <Print_UART>
  int freq = (resp[2] << 8) | resp[3];
 8000928:	193b      	adds	r3, r7, r4
 800092a:	789b      	ldrb	r3, [r3, #2]
 800092c:	021b      	lsls	r3, r3, #8
 800092e:	193a      	adds	r2, r7, r4
 8000930:	78d2      	ldrb	r2, [r2, #3]
 8000932:	4313      	orrs	r3, r2
 8000934:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sprintf(msg, "Read frequency: %d\r\n", freq);
 8000936:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000938:	491a      	ldr	r1, [pc, #104]	@ (80009a4 <Tune_Status+0xd8>)
 800093a:	003b      	movs	r3, r7
 800093c:	0018      	movs	r0, r3
 800093e:	f002 fe49 	bl	80035d4 <siprintf>
  Print_UART(msg);
 8000942:	003b      	movs	r3, r7
 8000944:	0018      	movs	r0, r3
 8000946:	f7ff fe81 	bl	800064c <Print_UART>
  sprintf(msg, "RSSI: %d\r\n", resp[4]);
 800094a:	193b      	adds	r3, r7, r4
 800094c:	791b      	ldrb	r3, [r3, #4]
 800094e:	001a      	movs	r2, r3
 8000950:	4915      	ldr	r1, [pc, #84]	@ (80009a8 <Tune_Status+0xdc>)
 8000952:	003b      	movs	r3, r7
 8000954:	0018      	movs	r0, r3
 8000956:	f002 fe3d 	bl	80035d4 <siprintf>
  Print_UART(msg);
 800095a:	003b      	movs	r3, r7
 800095c:	0018      	movs	r0, r3
 800095e:	f7ff fe75 	bl	800064c <Print_UART>
  sprintf(msg, "SNR: %d\r\n", resp[5]);
 8000962:	193b      	adds	r3, r7, r4
 8000964:	795b      	ldrb	r3, [r3, #5]
 8000966:	001a      	movs	r2, r3
 8000968:	4910      	ldr	r1, [pc, #64]	@ (80009ac <Tune_Status+0xe0>)
 800096a:	003b      	movs	r3, r7
 800096c:	0018      	movs	r0, r3
 800096e:	f002 fe31 	bl	80035d4 <siprintf>
  Print_UART(msg);
 8000972:	003b      	movs	r3, r7
 8000974:	0018      	movs	r0, r3
 8000976:	f7ff fe69 	bl	800064c <Print_UART>
  sprintf(msg, "READANTCAP: %d\r\n", resp[7]);
 800097a:	193b      	adds	r3, r7, r4
 800097c:	79db      	ldrb	r3, [r3, #7]
 800097e:	001a      	movs	r2, r3
 8000980:	490b      	ldr	r1, [pc, #44]	@ (80009b0 <Tune_Status+0xe4>)
 8000982:	003b      	movs	r3, r7
 8000984:	0018      	movs	r0, r3
 8000986:	f002 fe25 	bl	80035d4 <siprintf>
  Print_UART(msg);
 800098a:	003b      	movs	r3, r7
 800098c:	0018      	movs	r0, r3
 800098e:	f7ff fe5d 	bl	800064c <Print_UART>
}
 8000992:	46c0      	nop			@ (mov r8, r8)
 8000994:	46bd      	mov	sp, r7
 8000996:	b015      	add	sp, #84	@ 0x54
 8000998:	bd90      	pop	{r4, r7, pc}
 800099a:	46c0      	nop			@ (mov r8, r8)
 800099c:	2000007c 	.word	0x2000007c
 80009a0:	08003fcc 	.word	0x08003fcc
 80009a4:	08003fdc 	.word	0x08003fdc
 80009a8:	08003ff4 	.word	0x08003ff4
 80009ac:	08004000 	.word	0x08004000
 80009b0:	0800400c 	.word	0x0800400c

080009b4 <Seek_Start>:
 *	 WRAP 1 (bit 2)
 *
 * @param up: 1 to seek up, 0 to seek down
 */
void Seek_Start(uint8_t up)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b086      	sub	sp, #24
 80009b8:	af02      	add	r7, sp, #8
 80009ba:	0002      	movs	r2, r0
 80009bc:	1dfb      	adds	r3, r7, #7
 80009be:	701a      	strb	r2, [r3, #0]
    uint8_t arg1 = 0x04;
 80009c0:	210f      	movs	r1, #15
 80009c2:	187b      	adds	r3, r7, r1
 80009c4:	2204      	movs	r2, #4
 80009c6:	701a      	strb	r2, [r3, #0]
    if (up) {
 80009c8:	1dfb      	adds	r3, r7, #7
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d005      	beq.n	80009dc <Seek_Start+0x28>
        arg1 |= 0x08;
 80009d0:	187b      	adds	r3, r7, r1
 80009d2:	187a      	adds	r2, r7, r1
 80009d4:	7812      	ldrb	r2, [r2, #0]
 80009d6:	2108      	movs	r1, #8
 80009d8:	430a      	orrs	r2, r1
 80009da:	701a      	strb	r2, [r3, #0]
    }

	uint8_t cmd[2] = {0x21, arg1};
 80009dc:	210c      	movs	r1, #12
 80009de:	187b      	adds	r3, r7, r1
 80009e0:	2221      	movs	r2, #33	@ 0x21
 80009e2:	701a      	strb	r2, [r3, #0]
 80009e4:	187b      	adds	r3, r7, r1
 80009e6:	220f      	movs	r2, #15
 80009e8:	18ba      	adds	r2, r7, r2
 80009ea:	7812      	ldrb	r2, [r2, #0]
 80009ec:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, ADDR, cmd, sizeof(cmd), HAL_MAX_DELAY);
 80009ee:	187a      	adds	r2, r7, r1
 80009f0:	4805      	ldr	r0, [pc, #20]	@ (8000a08 <Seek_Start+0x54>)
 80009f2:	2301      	movs	r3, #1
 80009f4:	425b      	negs	r3, r3
 80009f6:	9300      	str	r3, [sp, #0]
 80009f8:	2302      	movs	r3, #2
 80009fa:	2122      	movs	r1, #34	@ 0x22
 80009fc:	f000 fd88 	bl	8001510 <HAL_I2C_Master_Transmit>

//	char msg[64];
//	sprintf(msg, "Seeking...\r\n");
//	Print_UART(msg);
}
 8000a00:	46c0      	nop			@ (mov r8, r8)
 8000a02:	46bd      	mov	sp, r7
 8000a04:	b004      	add	sp, #16
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	2000007c 	.word	0x2000007c

08000a0c <GPIO_Ctl>:
 *
 * Note: GPO3 is overridden by DCLK.
 * The other two should be drive low to avoid oscillation.
 */
void GPIO_Ctl(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af02      	add	r7, sp, #8
	uint8_t cmd[2] = {0x80, 0x06};
 8000a12:	1d3b      	adds	r3, r7, #4
 8000a14:	22d0      	movs	r2, #208	@ 0xd0
 8000a16:	00d2      	lsls	r2, r2, #3
 8000a18:	801a      	strh	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, ADDR, cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000a1a:	1d3a      	adds	r2, r7, #4
 8000a1c:	4807      	ldr	r0, [pc, #28]	@ (8000a3c <GPIO_Ctl+0x30>)
 8000a1e:	2301      	movs	r3, #1
 8000a20:	425b      	negs	r3, r3
 8000a22:	9300      	str	r3, [sp, #0]
 8000a24:	2302      	movs	r3, #2
 8000a26:	2122      	movs	r1, #34	@ 0x22
 8000a28:	f000 fd72 	bl	8001510 <HAL_I2C_Master_Transmit>
	HAL_Delay(100);
 8000a2c:	2064      	movs	r0, #100	@ 0x64
 8000a2e:	f000 fa11 	bl	8000e54 <HAL_Delay>
}
 8000a32:	46c0      	nop			@ (mov r8, r8)
 8000a34:	46bd      	mov	sp, r7
 8000a36:	b002      	add	sp, #8
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	46c0      	nop			@ (mov r8, r8)
 8000a3c:	2000007c 	.word	0x2000007c

08000a40 <GPIO_Set>:
 *   GPO3LEVEL 0
 *   GPO2LEVEL 0
 *   GPO1LEVEL 0
 */
void GPIO_Set(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af02      	add	r7, sp, #8
	uint8_t cmd[2] = {0x81, 0x00};
 8000a46:	1d3b      	adds	r3, r7, #4
 8000a48:	2281      	movs	r2, #129	@ 0x81
 8000a4a:	801a      	strh	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, ADDR, cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000a4c:	1d3a      	adds	r2, r7, #4
 8000a4e:	4807      	ldr	r0, [pc, #28]	@ (8000a6c <GPIO_Set+0x2c>)
 8000a50:	2301      	movs	r3, #1
 8000a52:	425b      	negs	r3, r3
 8000a54:	9300      	str	r3, [sp, #0]
 8000a56:	2302      	movs	r3, #2
 8000a58:	2122      	movs	r1, #34	@ 0x22
 8000a5a:	f000 fd59 	bl	8001510 <HAL_I2C_Master_Transmit>
	HAL_Delay(100);
 8000a5e:	2064      	movs	r0, #100	@ 0x64
 8000a60:	f000 f9f8 	bl	8000e54 <HAL_Delay>
}
 8000a64:	46c0      	nop			@ (mov r8, r8)
 8000a66:	46bd      	mov	sp, r7
 8000a68:	b002      	add	sp, #8
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	2000007c 	.word	0x2000007c

08000a70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a74:	b672      	cpsid	i
}
 8000a76:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a78:	46c0      	nop			@ (mov r8, r8)
 8000a7a:	e7fd      	b.n	8000a78 <Error_Handler+0x8>

08000a7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a82:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac0 <HAL_MspInit+0x44>)
 8000a84:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a86:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac0 <HAL_MspInit+0x44>)
 8000a88:	2101      	movs	r1, #1
 8000a8a:	430a      	orrs	r2, r1
 8000a8c:	641a      	str	r2, [r3, #64]	@ 0x40
 8000a8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac0 <HAL_MspInit+0x44>)
 8000a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a92:	2201      	movs	r2, #1
 8000a94:	4013      	ands	r3, r2
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a9a:	4b09      	ldr	r3, [pc, #36]	@ (8000ac0 <HAL_MspInit+0x44>)
 8000a9c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a9e:	4b08      	ldr	r3, [pc, #32]	@ (8000ac0 <HAL_MspInit+0x44>)
 8000aa0:	2180      	movs	r1, #128	@ 0x80
 8000aa2:	0549      	lsls	r1, r1, #21
 8000aa4:	430a      	orrs	r2, r1
 8000aa6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000aa8:	4b05      	ldr	r3, [pc, #20]	@ (8000ac0 <HAL_MspInit+0x44>)
 8000aaa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000aac:	2380      	movs	r3, #128	@ 0x80
 8000aae:	055b      	lsls	r3, r3, #21
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	603b      	str	r3, [r7, #0]
 8000ab4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ab6:	46c0      	nop			@ (mov r8, r8)
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	b002      	add	sp, #8
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	46c0      	nop			@ (mov r8, r8)
 8000ac0:	40021000 	.word	0x40021000

08000ac4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ac4:	b590      	push	{r4, r7, lr}
 8000ac6:	b091      	sub	sp, #68	@ 0x44
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000acc:	232c      	movs	r3, #44	@ 0x2c
 8000ace:	18fb      	adds	r3, r7, r3
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	2314      	movs	r3, #20
 8000ad4:	001a      	movs	r2, r3
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	f002 fd9c 	bl	8003614 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000adc:	2414      	movs	r4, #20
 8000ade:	193b      	adds	r3, r7, r4
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	2318      	movs	r3, #24
 8000ae4:	001a      	movs	r2, r3
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	f002 fd94 	bl	8003614 <memset>
  if(hi2c->Instance==I2C1)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a22      	ldr	r2, [pc, #136]	@ (8000b7c <HAL_I2C_MspInit+0xb8>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d13d      	bne.n	8000b72 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000af6:	193b      	adds	r3, r7, r4
 8000af8:	2220      	movs	r2, #32
 8000afa:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000afc:	193b      	adds	r3, r7, r4
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b02:	193b      	adds	r3, r7, r4
 8000b04:	0018      	movs	r0, r3
 8000b06:	f001 ffa7 	bl	8002a58 <HAL_RCCEx_PeriphCLKConfig>
 8000b0a:	1e03      	subs	r3, r0, #0
 8000b0c:	d001      	beq.n	8000b12 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000b0e:	f7ff ffaf 	bl	8000a70 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b12:	4b1b      	ldr	r3, [pc, #108]	@ (8000b80 <HAL_I2C_MspInit+0xbc>)
 8000b14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b16:	4b1a      	ldr	r3, [pc, #104]	@ (8000b80 <HAL_I2C_MspInit+0xbc>)
 8000b18:	2102      	movs	r1, #2
 8000b1a:	430a      	orrs	r2, r1
 8000b1c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b1e:	4b18      	ldr	r3, [pc, #96]	@ (8000b80 <HAL_I2C_MspInit+0xbc>)
 8000b20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b22:	2202      	movs	r2, #2
 8000b24:	4013      	ands	r3, r2
 8000b26:	613b      	str	r3, [r7, #16]
 8000b28:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b2a:	212c      	movs	r1, #44	@ 0x2c
 8000b2c:	187b      	adds	r3, r7, r1
 8000b2e:	22c0      	movs	r2, #192	@ 0xc0
 8000b30:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b32:	187b      	adds	r3, r7, r1
 8000b34:	2212      	movs	r2, #18
 8000b36:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	187b      	adds	r3, r7, r1
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3e:	187b      	adds	r3, r7, r1
 8000b40:	2200      	movs	r2, #0
 8000b42:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000b44:	187b      	adds	r3, r7, r1
 8000b46:	2206      	movs	r2, #6
 8000b48:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b4a:	187b      	adds	r3, r7, r1
 8000b4c:	4a0d      	ldr	r2, [pc, #52]	@ (8000b84 <HAL_I2C_MspInit+0xc0>)
 8000b4e:	0019      	movs	r1, r3
 8000b50:	0010      	movs	r0, r2
 8000b52:	f000 fa81 	bl	8001058 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b56:	4b0a      	ldr	r3, [pc, #40]	@ (8000b80 <HAL_I2C_MspInit+0xbc>)
 8000b58:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000b5a:	4b09      	ldr	r3, [pc, #36]	@ (8000b80 <HAL_I2C_MspInit+0xbc>)
 8000b5c:	2180      	movs	r1, #128	@ 0x80
 8000b5e:	0389      	lsls	r1, r1, #14
 8000b60:	430a      	orrs	r2, r1
 8000b62:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000b64:	4b06      	ldr	r3, [pc, #24]	@ (8000b80 <HAL_I2C_MspInit+0xbc>)
 8000b66:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000b68:	2380      	movs	r3, #128	@ 0x80
 8000b6a:	039b      	lsls	r3, r3, #14
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	60fb      	str	r3, [r7, #12]
 8000b70:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000b72:	46c0      	nop			@ (mov r8, r8)
 8000b74:	46bd      	mov	sp, r7
 8000b76:	b011      	add	sp, #68	@ 0x44
 8000b78:	bd90      	pop	{r4, r7, pc}
 8000b7a:	46c0      	nop			@ (mov r8, r8)
 8000b7c:	40005400 	.word	0x40005400
 8000b80:	40021000 	.word	0x40021000
 8000b84:	50000400 	.word	0x50000400

08000b88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b88:	b590      	push	{r4, r7, lr}
 8000b8a:	b08b      	sub	sp, #44	@ 0x2c
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b90:	2414      	movs	r4, #20
 8000b92:	193b      	adds	r3, r7, r4
 8000b94:	0018      	movs	r0, r3
 8000b96:	2314      	movs	r3, #20
 8000b98:	001a      	movs	r2, r3
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	f002 fd3a 	bl	8003614 <memset>
  if(huart->Instance==USART2)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a1b      	ldr	r2, [pc, #108]	@ (8000c14 <HAL_UART_MspInit+0x8c>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d130      	bne.n	8000c0c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000baa:	4b1b      	ldr	r3, [pc, #108]	@ (8000c18 <HAL_UART_MspInit+0x90>)
 8000bac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000bae:	4b1a      	ldr	r3, [pc, #104]	@ (8000c18 <HAL_UART_MspInit+0x90>)
 8000bb0:	2180      	movs	r1, #128	@ 0x80
 8000bb2:	0289      	lsls	r1, r1, #10
 8000bb4:	430a      	orrs	r2, r1
 8000bb6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000bb8:	4b17      	ldr	r3, [pc, #92]	@ (8000c18 <HAL_UART_MspInit+0x90>)
 8000bba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000bbc:	2380      	movs	r3, #128	@ 0x80
 8000bbe:	029b      	lsls	r3, r3, #10
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	613b      	str	r3, [r7, #16]
 8000bc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc6:	4b14      	ldr	r3, [pc, #80]	@ (8000c18 <HAL_UART_MspInit+0x90>)
 8000bc8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000bca:	4b13      	ldr	r3, [pc, #76]	@ (8000c18 <HAL_UART_MspInit+0x90>)
 8000bcc:	2101      	movs	r1, #1
 8000bce:	430a      	orrs	r2, r1
 8000bd0:	635a      	str	r2, [r3, #52]	@ 0x34
 8000bd2:	4b11      	ldr	r3, [pc, #68]	@ (8000c18 <HAL_UART_MspInit+0x90>)
 8000bd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	4013      	ands	r3, r2
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> USART2_CTS
    PA1     ------> USART2_RTS
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000bde:	0021      	movs	r1, r4
 8000be0:	187b      	adds	r3, r7, r1
 8000be2:	220f      	movs	r2, #15
 8000be4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be6:	187b      	adds	r3, r7, r1
 8000be8:	2202      	movs	r2, #2
 8000bea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	187b      	adds	r3, r7, r1
 8000bee:	2200      	movs	r2, #0
 8000bf0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf2:	187b      	adds	r3, r7, r1
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000bf8:	187b      	adds	r3, r7, r1
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfe:	187a      	adds	r2, r7, r1
 8000c00:	23a0      	movs	r3, #160	@ 0xa0
 8000c02:	05db      	lsls	r3, r3, #23
 8000c04:	0011      	movs	r1, r2
 8000c06:	0018      	movs	r0, r3
 8000c08:	f000 fa26 	bl	8001058 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000c0c:	46c0      	nop			@ (mov r8, r8)
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	b00b      	add	sp, #44	@ 0x2c
 8000c12:	bd90      	pop	{r4, r7, pc}
 8000c14:	40004400 	.word	0x40004400
 8000c18:	40021000 	.word	0x40021000

08000c1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c20:	46c0      	nop			@ (mov r8, r8)
 8000c22:	e7fd      	b.n	8000c20 <NMI_Handler+0x4>

08000c24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c28:	46c0      	nop			@ (mov r8, r8)
 8000c2a:	e7fd      	b.n	8000c28 <HardFault_Handler+0x4>

08000c2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c30:	46c0      	nop			@ (mov r8, r8)
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c36:	b580      	push	{r7, lr}
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c3a:	46c0      	nop			@ (mov r8, r8)
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c44:	f000 f8ea 	bl	8000e1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c48:	46c0      	nop			@ (mov r8, r8)
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(VOL_P_Pin);
 8000c52:	2001      	movs	r0, #1
 8000c54:	f000 fb82 	bl	800135c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CHAN_M_Pin);
 8000c58:	2002      	movs	r0, #2
 8000c5a:	f000 fb7f 	bl	800135c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000c5e:	46c0      	nop			@ (mov r8, r8)
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CHAN_P_Pin);
 8000c68:	2004      	movs	r0, #4
 8000c6a:	f000 fb77 	bl	800135c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VOL_M_Pin);
 8000c6e:	2008      	movs	r0, #8
 8000c70:	f000 fb74 	bl	800135c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8000c74:	46c0      	nop			@ (mov r8, r8)
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
	...

08000c7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b086      	sub	sp, #24
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c84:	4a14      	ldr	r2, [pc, #80]	@ (8000cd8 <_sbrk+0x5c>)
 8000c86:	4b15      	ldr	r3, [pc, #84]	@ (8000cdc <_sbrk+0x60>)
 8000c88:	1ad3      	subs	r3, r2, r3
 8000c8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c90:	4b13      	ldr	r3, [pc, #76]	@ (8000ce0 <_sbrk+0x64>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d102      	bne.n	8000c9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c98:	4b11      	ldr	r3, [pc, #68]	@ (8000ce0 <_sbrk+0x64>)
 8000c9a:	4a12      	ldr	r2, [pc, #72]	@ (8000ce4 <_sbrk+0x68>)
 8000c9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c9e:	4b10      	ldr	r3, [pc, #64]	@ (8000ce0 <_sbrk+0x64>)
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	18d3      	adds	r3, r2, r3
 8000ca6:	693a      	ldr	r2, [r7, #16]
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	d207      	bcs.n	8000cbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cac:	f002 fcba 	bl	8003624 <__errno>
 8000cb0:	0003      	movs	r3, r0
 8000cb2:	220c      	movs	r2, #12
 8000cb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	425b      	negs	r3, r3
 8000cba:	e009      	b.n	8000cd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cbc:	4b08      	ldr	r3, [pc, #32]	@ (8000ce0 <_sbrk+0x64>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cc2:	4b07      	ldr	r3, [pc, #28]	@ (8000ce0 <_sbrk+0x64>)
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	18d2      	adds	r2, r2, r3
 8000cca:	4b05      	ldr	r3, [pc, #20]	@ (8000ce0 <_sbrk+0x64>)
 8000ccc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000cce:	68fb      	ldr	r3, [r7, #12]
}
 8000cd0:	0018      	movs	r0, r3
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	b006      	add	sp, #24
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	20002000 	.word	0x20002000
 8000cdc:	00000400 	.word	0x00000400
 8000ce0:	20000164 	.word	0x20000164
 8000ce4:	200002b8 	.word	0x200002b8

08000ce8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cec:	46c0      	nop			@ (mov r8, r8)
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
	...

08000cf4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cf4:	480d      	ldr	r0, [pc, #52]	@ (8000d2c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cf6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cf8:	f7ff fff6 	bl	8000ce8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cfc:	480c      	ldr	r0, [pc, #48]	@ (8000d30 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cfe:	490d      	ldr	r1, [pc, #52]	@ (8000d34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d00:	4a0d      	ldr	r2, [pc, #52]	@ (8000d38 <LoopForever+0xe>)
  movs r3, #0
 8000d02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d04:	e002      	b.n	8000d0c <LoopCopyDataInit>

08000d06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d0a:	3304      	adds	r3, #4

08000d0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d10:	d3f9      	bcc.n	8000d06 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d12:	4a0a      	ldr	r2, [pc, #40]	@ (8000d3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d14:	4c0a      	ldr	r4, [pc, #40]	@ (8000d40 <LoopForever+0x16>)
  movs r3, #0
 8000d16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d18:	e001      	b.n	8000d1e <LoopFillZerobss>

08000d1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d1c:	3204      	adds	r2, #4

08000d1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d20:	d3fb      	bcc.n	8000d1a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d22:	f002 fc85 	bl	8003630 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000d26:	f7ff fadf 	bl	80002e8 <main>

08000d2a <LoopForever>:

LoopForever:
  b LoopForever
 8000d2a:	e7fe      	b.n	8000d2a <LoopForever>
  ldr   r0, =_estack
 8000d2c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000d30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d34:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000d38:	080040f0 	.word	0x080040f0
  ldr r2, =_sbss
 8000d3c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000d40:	200002b4 	.word	0x200002b4

08000d44 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d44:	e7fe      	b.n	8000d44 <ADC1_IRQHandler>
	...

08000d48 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d4e:	1dfb      	adds	r3, r7, #7
 8000d50:	2200      	movs	r2, #0
 8000d52:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d54:	4b0b      	ldr	r3, [pc, #44]	@ (8000d84 <HAL_Init+0x3c>)
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	4b0a      	ldr	r3, [pc, #40]	@ (8000d84 <HAL_Init+0x3c>)
 8000d5a:	2180      	movs	r1, #128	@ 0x80
 8000d5c:	0049      	lsls	r1, r1, #1
 8000d5e:	430a      	orrs	r2, r1
 8000d60:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d62:	2003      	movs	r0, #3
 8000d64:	f000 f810 	bl	8000d88 <HAL_InitTick>
 8000d68:	1e03      	subs	r3, r0, #0
 8000d6a:	d003      	beq.n	8000d74 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000d6c:	1dfb      	adds	r3, r7, #7
 8000d6e:	2201      	movs	r2, #1
 8000d70:	701a      	strb	r2, [r3, #0]
 8000d72:	e001      	b.n	8000d78 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000d74:	f7ff fe82 	bl	8000a7c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d78:	1dfb      	adds	r3, r7, #7
 8000d7a:	781b      	ldrb	r3, [r3, #0]
}
 8000d7c:	0018      	movs	r0, r3
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	b002      	add	sp, #8
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	40022000 	.word	0x40022000

08000d88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d88:	b590      	push	{r4, r7, lr}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d90:	230f      	movs	r3, #15
 8000d92:	18fb      	adds	r3, r7, r3
 8000d94:	2200      	movs	r2, #0
 8000d96:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000d98:	4b1d      	ldr	r3, [pc, #116]	@ (8000e10 <HAL_InitTick+0x88>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d02b      	beq.n	8000df8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000da0:	4b1c      	ldr	r3, [pc, #112]	@ (8000e14 <HAL_InitTick+0x8c>)
 8000da2:	681c      	ldr	r4, [r3, #0]
 8000da4:	4b1a      	ldr	r3, [pc, #104]	@ (8000e10 <HAL_InitTick+0x88>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	0019      	movs	r1, r3
 8000daa:	23fa      	movs	r3, #250	@ 0xfa
 8000dac:	0098      	lsls	r0, r3, #2
 8000dae:	f7ff f9b9 	bl	8000124 <__udivsi3>
 8000db2:	0003      	movs	r3, r0
 8000db4:	0019      	movs	r1, r3
 8000db6:	0020      	movs	r0, r4
 8000db8:	f7ff f9b4 	bl	8000124 <__udivsi3>
 8000dbc:	0003      	movs	r3, r0
 8000dbe:	0018      	movs	r0, r3
 8000dc0:	f000 f93d 	bl	800103e <HAL_SYSTICK_Config>
 8000dc4:	1e03      	subs	r3, r0, #0
 8000dc6:	d112      	bne.n	8000dee <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2b03      	cmp	r3, #3
 8000dcc:	d80a      	bhi.n	8000de4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dce:	6879      	ldr	r1, [r7, #4]
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	425b      	negs	r3, r3
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	f000 f90c 	bl	8000ff4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ddc:	4b0e      	ldr	r3, [pc, #56]	@ (8000e18 <HAL_InitTick+0x90>)
 8000dde:	687a      	ldr	r2, [r7, #4]
 8000de0:	601a      	str	r2, [r3, #0]
 8000de2:	e00d      	b.n	8000e00 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000de4:	230f      	movs	r3, #15
 8000de6:	18fb      	adds	r3, r7, r3
 8000de8:	2201      	movs	r2, #1
 8000dea:	701a      	strb	r2, [r3, #0]
 8000dec:	e008      	b.n	8000e00 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000dee:	230f      	movs	r3, #15
 8000df0:	18fb      	adds	r3, r7, r3
 8000df2:	2201      	movs	r2, #1
 8000df4:	701a      	strb	r2, [r3, #0]
 8000df6:	e003      	b.n	8000e00 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000df8:	230f      	movs	r3, #15
 8000dfa:	18fb      	adds	r3, r7, r3
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000e00:	230f      	movs	r3, #15
 8000e02:	18fb      	adds	r3, r7, r3
 8000e04:	781b      	ldrb	r3, [r3, #0]
}
 8000e06:	0018      	movs	r0, r3
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	b005      	add	sp, #20
 8000e0c:	bd90      	pop	{r4, r7, pc}
 8000e0e:	46c0      	nop			@ (mov r8, r8)
 8000e10:	2000000c 	.word	0x2000000c
 8000e14:	20000004 	.word	0x20000004
 8000e18:	20000008 	.word	0x20000008

08000e1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e20:	4b05      	ldr	r3, [pc, #20]	@ (8000e38 <HAL_IncTick+0x1c>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	001a      	movs	r2, r3
 8000e26:	4b05      	ldr	r3, [pc, #20]	@ (8000e3c <HAL_IncTick+0x20>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	18d2      	adds	r2, r2, r3
 8000e2c:	4b03      	ldr	r3, [pc, #12]	@ (8000e3c <HAL_IncTick+0x20>)
 8000e2e:	601a      	str	r2, [r3, #0]
}
 8000e30:	46c0      	nop			@ (mov r8, r8)
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	46c0      	nop			@ (mov r8, r8)
 8000e38:	2000000c 	.word	0x2000000c
 8000e3c:	20000168 	.word	0x20000168

08000e40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  return uwTick;
 8000e44:	4b02      	ldr	r3, [pc, #8]	@ (8000e50 <HAL_GetTick+0x10>)
 8000e46:	681b      	ldr	r3, [r3, #0]
}
 8000e48:	0018      	movs	r0, r3
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	46c0      	nop			@ (mov r8, r8)
 8000e50:	20000168 	.word	0x20000168

08000e54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e5c:	f7ff fff0 	bl	8000e40 <HAL_GetTick>
 8000e60:	0003      	movs	r3, r0
 8000e62:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	d005      	beq.n	8000e7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e98 <HAL_Delay+0x44>)
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	001a      	movs	r2, r3
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	189b      	adds	r3, r3, r2
 8000e78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e7a:	46c0      	nop			@ (mov r8, r8)
 8000e7c:	f7ff ffe0 	bl	8000e40 <HAL_GetTick>
 8000e80:	0002      	movs	r2, r0
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	68fa      	ldr	r2, [r7, #12]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d8f7      	bhi.n	8000e7c <HAL_Delay+0x28>
  {
  }
}
 8000e8c:	46c0      	nop			@ (mov r8, r8)
 8000e8e:	46c0      	nop			@ (mov r8, r8)
 8000e90:	46bd      	mov	sp, r7
 8000e92:	b004      	add	sp, #16
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	46c0      	nop			@ (mov r8, r8)
 8000e98:	2000000c 	.word	0x2000000c

08000e9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	0002      	movs	r2, r0
 8000ea4:	1dfb      	adds	r3, r7, #7
 8000ea6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ea8:	1dfb      	adds	r3, r7, #7
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	2b7f      	cmp	r3, #127	@ 0x7f
 8000eae:	d809      	bhi.n	8000ec4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eb0:	1dfb      	adds	r3, r7, #7
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	001a      	movs	r2, r3
 8000eb6:	231f      	movs	r3, #31
 8000eb8:	401a      	ands	r2, r3
 8000eba:	4b04      	ldr	r3, [pc, #16]	@ (8000ecc <__NVIC_EnableIRQ+0x30>)
 8000ebc:	2101      	movs	r1, #1
 8000ebe:	4091      	lsls	r1, r2
 8000ec0:	000a      	movs	r2, r1
 8000ec2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000ec4:	46c0      	nop			@ (mov r8, r8)
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	b002      	add	sp, #8
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	e000e100 	.word	0xe000e100

08000ed0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ed0:	b590      	push	{r4, r7, lr}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	0002      	movs	r2, r0
 8000ed8:	6039      	str	r1, [r7, #0]
 8000eda:	1dfb      	adds	r3, r7, #7
 8000edc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ede:	1dfb      	adds	r3, r7, #7
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ee4:	d828      	bhi.n	8000f38 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ee6:	4a2f      	ldr	r2, [pc, #188]	@ (8000fa4 <__NVIC_SetPriority+0xd4>)
 8000ee8:	1dfb      	adds	r3, r7, #7
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	b25b      	sxtb	r3, r3
 8000eee:	089b      	lsrs	r3, r3, #2
 8000ef0:	33c0      	adds	r3, #192	@ 0xc0
 8000ef2:	009b      	lsls	r3, r3, #2
 8000ef4:	589b      	ldr	r3, [r3, r2]
 8000ef6:	1dfa      	adds	r2, r7, #7
 8000ef8:	7812      	ldrb	r2, [r2, #0]
 8000efa:	0011      	movs	r1, r2
 8000efc:	2203      	movs	r2, #3
 8000efe:	400a      	ands	r2, r1
 8000f00:	00d2      	lsls	r2, r2, #3
 8000f02:	21ff      	movs	r1, #255	@ 0xff
 8000f04:	4091      	lsls	r1, r2
 8000f06:	000a      	movs	r2, r1
 8000f08:	43d2      	mvns	r2, r2
 8000f0a:	401a      	ands	r2, r3
 8000f0c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	019b      	lsls	r3, r3, #6
 8000f12:	22ff      	movs	r2, #255	@ 0xff
 8000f14:	401a      	ands	r2, r3
 8000f16:	1dfb      	adds	r3, r7, #7
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	0018      	movs	r0, r3
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	4003      	ands	r3, r0
 8000f20:	00db      	lsls	r3, r3, #3
 8000f22:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f24:	481f      	ldr	r0, [pc, #124]	@ (8000fa4 <__NVIC_SetPriority+0xd4>)
 8000f26:	1dfb      	adds	r3, r7, #7
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	b25b      	sxtb	r3, r3
 8000f2c:	089b      	lsrs	r3, r3, #2
 8000f2e:	430a      	orrs	r2, r1
 8000f30:	33c0      	adds	r3, #192	@ 0xc0
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f36:	e031      	b.n	8000f9c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f38:	4a1b      	ldr	r2, [pc, #108]	@ (8000fa8 <__NVIC_SetPriority+0xd8>)
 8000f3a:	1dfb      	adds	r3, r7, #7
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	0019      	movs	r1, r3
 8000f40:	230f      	movs	r3, #15
 8000f42:	400b      	ands	r3, r1
 8000f44:	3b08      	subs	r3, #8
 8000f46:	089b      	lsrs	r3, r3, #2
 8000f48:	3306      	adds	r3, #6
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	18d3      	adds	r3, r2, r3
 8000f4e:	3304      	adds	r3, #4
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	1dfa      	adds	r2, r7, #7
 8000f54:	7812      	ldrb	r2, [r2, #0]
 8000f56:	0011      	movs	r1, r2
 8000f58:	2203      	movs	r2, #3
 8000f5a:	400a      	ands	r2, r1
 8000f5c:	00d2      	lsls	r2, r2, #3
 8000f5e:	21ff      	movs	r1, #255	@ 0xff
 8000f60:	4091      	lsls	r1, r2
 8000f62:	000a      	movs	r2, r1
 8000f64:	43d2      	mvns	r2, r2
 8000f66:	401a      	ands	r2, r3
 8000f68:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	019b      	lsls	r3, r3, #6
 8000f6e:	22ff      	movs	r2, #255	@ 0xff
 8000f70:	401a      	ands	r2, r3
 8000f72:	1dfb      	adds	r3, r7, #7
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	0018      	movs	r0, r3
 8000f78:	2303      	movs	r3, #3
 8000f7a:	4003      	ands	r3, r0
 8000f7c:	00db      	lsls	r3, r3, #3
 8000f7e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f80:	4809      	ldr	r0, [pc, #36]	@ (8000fa8 <__NVIC_SetPriority+0xd8>)
 8000f82:	1dfb      	adds	r3, r7, #7
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	001c      	movs	r4, r3
 8000f88:	230f      	movs	r3, #15
 8000f8a:	4023      	ands	r3, r4
 8000f8c:	3b08      	subs	r3, #8
 8000f8e:	089b      	lsrs	r3, r3, #2
 8000f90:	430a      	orrs	r2, r1
 8000f92:	3306      	adds	r3, #6
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	18c3      	adds	r3, r0, r3
 8000f98:	3304      	adds	r3, #4
 8000f9a:	601a      	str	r2, [r3, #0]
}
 8000f9c:	46c0      	nop			@ (mov r8, r8)
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	b003      	add	sp, #12
 8000fa2:	bd90      	pop	{r4, r7, pc}
 8000fa4:	e000e100 	.word	0xe000e100
 8000fa8:	e000ed00 	.word	0xe000ed00

08000fac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	1e5a      	subs	r2, r3, #1
 8000fb8:	2380      	movs	r3, #128	@ 0x80
 8000fba:	045b      	lsls	r3, r3, #17
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d301      	bcc.n	8000fc4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	e010      	b.n	8000fe6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fc4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ff0 <SysTick_Config+0x44>)
 8000fc6:	687a      	ldr	r2, [r7, #4]
 8000fc8:	3a01      	subs	r2, #1
 8000fca:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fcc:	2301      	movs	r3, #1
 8000fce:	425b      	negs	r3, r3
 8000fd0:	2103      	movs	r1, #3
 8000fd2:	0018      	movs	r0, r3
 8000fd4:	f7ff ff7c 	bl	8000ed0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fd8:	4b05      	ldr	r3, [pc, #20]	@ (8000ff0 <SysTick_Config+0x44>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fde:	4b04      	ldr	r3, [pc, #16]	@ (8000ff0 <SysTick_Config+0x44>)
 8000fe0:	2207      	movs	r2, #7
 8000fe2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fe4:	2300      	movs	r3, #0
}
 8000fe6:	0018      	movs	r0, r3
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	b002      	add	sp, #8
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	46c0      	nop			@ (mov r8, r8)
 8000ff0:	e000e010 	.word	0xe000e010

08000ff4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60b9      	str	r1, [r7, #8]
 8000ffc:	607a      	str	r2, [r7, #4]
 8000ffe:	210f      	movs	r1, #15
 8001000:	187b      	adds	r3, r7, r1
 8001002:	1c02      	adds	r2, r0, #0
 8001004:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001006:	68ba      	ldr	r2, [r7, #8]
 8001008:	187b      	adds	r3, r7, r1
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	b25b      	sxtb	r3, r3
 800100e:	0011      	movs	r1, r2
 8001010:	0018      	movs	r0, r3
 8001012:	f7ff ff5d 	bl	8000ed0 <__NVIC_SetPriority>
}
 8001016:	46c0      	nop			@ (mov r8, r8)
 8001018:	46bd      	mov	sp, r7
 800101a:	b004      	add	sp, #16
 800101c:	bd80      	pop	{r7, pc}

0800101e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b082      	sub	sp, #8
 8001022:	af00      	add	r7, sp, #0
 8001024:	0002      	movs	r2, r0
 8001026:	1dfb      	adds	r3, r7, #7
 8001028:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800102a:	1dfb      	adds	r3, r7, #7
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	b25b      	sxtb	r3, r3
 8001030:	0018      	movs	r0, r3
 8001032:	f7ff ff33 	bl	8000e9c <__NVIC_EnableIRQ>
}
 8001036:	46c0      	nop			@ (mov r8, r8)
 8001038:	46bd      	mov	sp, r7
 800103a:	b002      	add	sp, #8
 800103c:	bd80      	pop	{r7, pc}

0800103e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b082      	sub	sp, #8
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	0018      	movs	r0, r3
 800104a:	f7ff ffaf 	bl	8000fac <SysTick_Config>
 800104e:	0003      	movs	r3, r0
}
 8001050:	0018      	movs	r0, r3
 8001052:	46bd      	mov	sp, r7
 8001054:	b002      	add	sp, #8
 8001056:	bd80      	pop	{r7, pc}

08001058 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001062:	2300      	movs	r3, #0
 8001064:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001066:	e147      	b.n	80012f8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2101      	movs	r1, #1
 800106e:	697a      	ldr	r2, [r7, #20]
 8001070:	4091      	lsls	r1, r2
 8001072:	000a      	movs	r2, r1
 8001074:	4013      	ands	r3, r2
 8001076:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d100      	bne.n	8001080 <HAL_GPIO_Init+0x28>
 800107e:	e138      	b.n	80012f2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	2203      	movs	r2, #3
 8001086:	4013      	ands	r3, r2
 8001088:	2b01      	cmp	r3, #1
 800108a:	d005      	beq.n	8001098 <HAL_GPIO_Init+0x40>
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	2203      	movs	r2, #3
 8001092:	4013      	ands	r3, r2
 8001094:	2b02      	cmp	r3, #2
 8001096:	d130      	bne.n	80010fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	2203      	movs	r2, #3
 80010a4:	409a      	lsls	r2, r3
 80010a6:	0013      	movs	r3, r2
 80010a8:	43da      	mvns	r2, r3
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	4013      	ands	r3, r2
 80010ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	68da      	ldr	r2, [r3, #12]
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	409a      	lsls	r2, r3
 80010ba:	0013      	movs	r3, r2
 80010bc:	693a      	ldr	r2, [r7, #16]
 80010be:	4313      	orrs	r3, r2
 80010c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	693a      	ldr	r2, [r7, #16]
 80010c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010ce:	2201      	movs	r2, #1
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	409a      	lsls	r2, r3
 80010d4:	0013      	movs	r3, r2
 80010d6:	43da      	mvns	r2, r3
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	4013      	ands	r3, r2
 80010dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	091b      	lsrs	r3, r3, #4
 80010e4:	2201      	movs	r2, #1
 80010e6:	401a      	ands	r2, r3
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	409a      	lsls	r2, r3
 80010ec:	0013      	movs	r3, r2
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	2203      	movs	r2, #3
 8001100:	4013      	ands	r3, r2
 8001102:	2b03      	cmp	r3, #3
 8001104:	d017      	beq.n	8001136 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	68db      	ldr	r3, [r3, #12]
 800110a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	2203      	movs	r2, #3
 8001112:	409a      	lsls	r2, r3
 8001114:	0013      	movs	r3, r2
 8001116:	43da      	mvns	r2, r3
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	4013      	ands	r3, r2
 800111c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	689a      	ldr	r2, [r3, #8]
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	409a      	lsls	r2, r3
 8001128:	0013      	movs	r3, r2
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	4313      	orrs	r3, r2
 800112e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	2203      	movs	r2, #3
 800113c:	4013      	ands	r3, r2
 800113e:	2b02      	cmp	r3, #2
 8001140:	d123      	bne.n	800118a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	08da      	lsrs	r2, r3, #3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	3208      	adds	r2, #8
 800114a:	0092      	lsls	r2, r2, #2
 800114c:	58d3      	ldr	r3, [r2, r3]
 800114e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	2207      	movs	r2, #7
 8001154:	4013      	ands	r3, r2
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	220f      	movs	r2, #15
 800115a:	409a      	lsls	r2, r3
 800115c:	0013      	movs	r3, r2
 800115e:	43da      	mvns	r2, r3
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	4013      	ands	r3, r2
 8001164:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	691a      	ldr	r2, [r3, #16]
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	2107      	movs	r1, #7
 800116e:	400b      	ands	r3, r1
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	409a      	lsls	r2, r3
 8001174:	0013      	movs	r3, r2
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	4313      	orrs	r3, r2
 800117a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	08da      	lsrs	r2, r3, #3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	3208      	adds	r2, #8
 8001184:	0092      	lsls	r2, r2, #2
 8001186:	6939      	ldr	r1, [r7, #16]
 8001188:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	2203      	movs	r2, #3
 8001196:	409a      	lsls	r2, r3
 8001198:	0013      	movs	r3, r2
 800119a:	43da      	mvns	r2, r3
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	4013      	ands	r3, r2
 80011a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	2203      	movs	r2, #3
 80011a8:	401a      	ands	r2, r3
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	409a      	lsls	r2, r3
 80011b0:	0013      	movs	r3, r2
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685a      	ldr	r2, [r3, #4]
 80011c2:	23c0      	movs	r3, #192	@ 0xc0
 80011c4:	029b      	lsls	r3, r3, #10
 80011c6:	4013      	ands	r3, r2
 80011c8:	d100      	bne.n	80011cc <HAL_GPIO_Init+0x174>
 80011ca:	e092      	b.n	80012f2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80011cc:	4a50      	ldr	r2, [pc, #320]	@ (8001310 <HAL_GPIO_Init+0x2b8>)
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	089b      	lsrs	r3, r3, #2
 80011d2:	3318      	adds	r3, #24
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	589b      	ldr	r3, [r3, r2]
 80011d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	2203      	movs	r2, #3
 80011de:	4013      	ands	r3, r2
 80011e0:	00db      	lsls	r3, r3, #3
 80011e2:	220f      	movs	r2, #15
 80011e4:	409a      	lsls	r2, r3
 80011e6:	0013      	movs	r3, r2
 80011e8:	43da      	mvns	r2, r3
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	4013      	ands	r3, r2
 80011ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	23a0      	movs	r3, #160	@ 0xa0
 80011f4:	05db      	lsls	r3, r3, #23
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d013      	beq.n	8001222 <HAL_GPIO_Init+0x1ca>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a45      	ldr	r2, [pc, #276]	@ (8001314 <HAL_GPIO_Init+0x2bc>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d00d      	beq.n	800121e <HAL_GPIO_Init+0x1c6>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a44      	ldr	r2, [pc, #272]	@ (8001318 <HAL_GPIO_Init+0x2c0>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d007      	beq.n	800121a <HAL_GPIO_Init+0x1c2>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a43      	ldr	r2, [pc, #268]	@ (800131c <HAL_GPIO_Init+0x2c4>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d101      	bne.n	8001216 <HAL_GPIO_Init+0x1be>
 8001212:	2303      	movs	r3, #3
 8001214:	e006      	b.n	8001224 <HAL_GPIO_Init+0x1cc>
 8001216:	2305      	movs	r3, #5
 8001218:	e004      	b.n	8001224 <HAL_GPIO_Init+0x1cc>
 800121a:	2302      	movs	r3, #2
 800121c:	e002      	b.n	8001224 <HAL_GPIO_Init+0x1cc>
 800121e:	2301      	movs	r3, #1
 8001220:	e000      	b.n	8001224 <HAL_GPIO_Init+0x1cc>
 8001222:	2300      	movs	r3, #0
 8001224:	697a      	ldr	r2, [r7, #20]
 8001226:	2103      	movs	r1, #3
 8001228:	400a      	ands	r2, r1
 800122a:	00d2      	lsls	r2, r2, #3
 800122c:	4093      	lsls	r3, r2
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	4313      	orrs	r3, r2
 8001232:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001234:	4936      	ldr	r1, [pc, #216]	@ (8001310 <HAL_GPIO_Init+0x2b8>)
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	089b      	lsrs	r3, r3, #2
 800123a:	3318      	adds	r3, #24
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001242:	4b33      	ldr	r3, [pc, #204]	@ (8001310 <HAL_GPIO_Init+0x2b8>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	43da      	mvns	r2, r3
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	4013      	ands	r3, r2
 8001250:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685a      	ldr	r2, [r3, #4]
 8001256:	2380      	movs	r3, #128	@ 0x80
 8001258:	035b      	lsls	r3, r3, #13
 800125a:	4013      	ands	r3, r2
 800125c:	d003      	beq.n	8001266 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	4313      	orrs	r3, r2
 8001264:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001266:	4b2a      	ldr	r3, [pc, #168]	@ (8001310 <HAL_GPIO_Init+0x2b8>)
 8001268:	693a      	ldr	r2, [r7, #16]
 800126a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800126c:	4b28      	ldr	r3, [pc, #160]	@ (8001310 <HAL_GPIO_Init+0x2b8>)
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	43da      	mvns	r2, r3
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	4013      	ands	r3, r2
 800127a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685a      	ldr	r2, [r3, #4]
 8001280:	2380      	movs	r3, #128	@ 0x80
 8001282:	039b      	lsls	r3, r3, #14
 8001284:	4013      	ands	r3, r2
 8001286:	d003      	beq.n	8001290 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	4313      	orrs	r3, r2
 800128e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001290:	4b1f      	ldr	r3, [pc, #124]	@ (8001310 <HAL_GPIO_Init+0x2b8>)
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001296:	4a1e      	ldr	r2, [pc, #120]	@ (8001310 <HAL_GPIO_Init+0x2b8>)
 8001298:	2384      	movs	r3, #132	@ 0x84
 800129a:	58d3      	ldr	r3, [r2, r3]
 800129c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	43da      	mvns	r2, r3
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	4013      	ands	r3, r2
 80012a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685a      	ldr	r2, [r3, #4]
 80012ac:	2380      	movs	r3, #128	@ 0x80
 80012ae:	029b      	lsls	r3, r3, #10
 80012b0:	4013      	ands	r3, r2
 80012b2:	d003      	beq.n	80012bc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012bc:	4914      	ldr	r1, [pc, #80]	@ (8001310 <HAL_GPIO_Init+0x2b8>)
 80012be:	2284      	movs	r2, #132	@ 0x84
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80012c4:	4a12      	ldr	r2, [pc, #72]	@ (8001310 <HAL_GPIO_Init+0x2b8>)
 80012c6:	2380      	movs	r3, #128	@ 0x80
 80012c8:	58d3      	ldr	r3, [r2, r3]
 80012ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	43da      	mvns	r2, r3
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	4013      	ands	r3, r2
 80012d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685a      	ldr	r2, [r3, #4]
 80012da:	2380      	movs	r3, #128	@ 0x80
 80012dc:	025b      	lsls	r3, r3, #9
 80012de:	4013      	ands	r3, r2
 80012e0:	d003      	beq.n	80012ea <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012ea:	4909      	ldr	r1, [pc, #36]	@ (8001310 <HAL_GPIO_Init+0x2b8>)
 80012ec:	2280      	movs	r2, #128	@ 0x80
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	3301      	adds	r3, #1
 80012f6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	40da      	lsrs	r2, r3
 8001300:	1e13      	subs	r3, r2, #0
 8001302:	d000      	beq.n	8001306 <HAL_GPIO_Init+0x2ae>
 8001304:	e6b0      	b.n	8001068 <HAL_GPIO_Init+0x10>
  }
}
 8001306:	46c0      	nop			@ (mov r8, r8)
 8001308:	46c0      	nop			@ (mov r8, r8)
 800130a:	46bd      	mov	sp, r7
 800130c:	b006      	add	sp, #24
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40021800 	.word	0x40021800
 8001314:	50000400 	.word	0x50000400
 8001318:	50000800 	.word	0x50000800
 800131c:	50000c00 	.word	0x50000c00

08001320 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	0008      	movs	r0, r1
 800132a:	0011      	movs	r1, r2
 800132c:	1cbb      	adds	r3, r7, #2
 800132e:	1c02      	adds	r2, r0, #0
 8001330:	801a      	strh	r2, [r3, #0]
 8001332:	1c7b      	adds	r3, r7, #1
 8001334:	1c0a      	adds	r2, r1, #0
 8001336:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001338:	1c7b      	adds	r3, r7, #1
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d004      	beq.n	800134a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001340:	1cbb      	adds	r3, r7, #2
 8001342:	881a      	ldrh	r2, [r3, #0]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001348:	e003      	b.n	8001352 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800134a:	1cbb      	adds	r3, r7, #2
 800134c:	881a      	ldrh	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001352:	46c0      	nop			@ (mov r8, r8)
 8001354:	46bd      	mov	sp, r7
 8001356:	b002      	add	sp, #8
 8001358:	bd80      	pop	{r7, pc}
	...

0800135c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	0002      	movs	r2, r0
 8001364:	1dbb      	adds	r3, r7, #6
 8001366:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8001368:	4b10      	ldr	r3, [pc, #64]	@ (80013ac <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	1dba      	adds	r2, r7, #6
 800136e:	8812      	ldrh	r2, [r2, #0]
 8001370:	4013      	ands	r3, r2
 8001372:	d008      	beq.n	8001386 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8001374:	4b0d      	ldr	r3, [pc, #52]	@ (80013ac <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001376:	1dba      	adds	r2, r7, #6
 8001378:	8812      	ldrh	r2, [r2, #0]
 800137a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800137c:	1dbb      	adds	r3, r7, #6
 800137e:	881b      	ldrh	r3, [r3, #0]
 8001380:	0018      	movs	r0, r3
 8001382:	f000 f815 	bl	80013b0 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8001386:	4b09      	ldr	r3, [pc, #36]	@ (80013ac <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001388:	691b      	ldr	r3, [r3, #16]
 800138a:	1dba      	adds	r2, r7, #6
 800138c:	8812      	ldrh	r2, [r2, #0]
 800138e:	4013      	ands	r3, r2
 8001390:	d008      	beq.n	80013a4 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8001392:	4b06      	ldr	r3, [pc, #24]	@ (80013ac <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001394:	1dba      	adds	r2, r7, #6
 8001396:	8812      	ldrh	r2, [r2, #0]
 8001398:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800139a:	1dbb      	adds	r3, r7, #6
 800139c:	881b      	ldrh	r3, [r3, #0]
 800139e:	0018      	movs	r0, r3
 80013a0:	f7fe ff4c 	bl	800023c <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80013a4:	46c0      	nop			@ (mov r8, r8)
 80013a6:	46bd      	mov	sp, r7
 80013a8:	b002      	add	sp, #8
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40021800 	.word	0x40021800

080013b0 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	0002      	movs	r2, r0
 80013b8:	1dbb      	adds	r3, r7, #6
 80013ba:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80013bc:	46c0      	nop			@ (mov r8, r8)
 80013be:	46bd      	mov	sp, r7
 80013c0:	b002      	add	sp, #8
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d101      	bne.n	80013d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e08f      	b.n	80014f6 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2241      	movs	r2, #65	@ 0x41
 80013da:	5c9b      	ldrb	r3, [r3, r2]
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d107      	bne.n	80013f2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2240      	movs	r2, #64	@ 0x40
 80013e6:	2100      	movs	r1, #0
 80013e8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	0018      	movs	r0, r3
 80013ee:	f7ff fb69 	bl	8000ac4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2241      	movs	r2, #65	@ 0x41
 80013f6:	2124      	movs	r1, #36	@ 0x24
 80013f8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2101      	movs	r1, #1
 8001406:	438a      	bics	r2, r1
 8001408:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	685a      	ldr	r2, [r3, #4]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	493b      	ldr	r1, [pc, #236]	@ (8001500 <HAL_I2C_Init+0x13c>)
 8001414:	400a      	ands	r2, r1
 8001416:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	689a      	ldr	r2, [r3, #8]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4938      	ldr	r1, [pc, #224]	@ (8001504 <HAL_I2C_Init+0x140>)
 8001424:	400a      	ands	r2, r1
 8001426:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	2b01      	cmp	r3, #1
 800142e:	d108      	bne.n	8001442 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	689a      	ldr	r2, [r3, #8]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2180      	movs	r1, #128	@ 0x80
 800143a:	0209      	lsls	r1, r1, #8
 800143c:	430a      	orrs	r2, r1
 800143e:	609a      	str	r2, [r3, #8]
 8001440:	e007      	b.n	8001452 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	689a      	ldr	r2, [r3, #8]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2184      	movs	r1, #132	@ 0x84
 800144c:	0209      	lsls	r1, r1, #8
 800144e:	430a      	orrs	r2, r1
 8001450:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	68db      	ldr	r3, [r3, #12]
 8001456:	2b02      	cmp	r3, #2
 8001458:	d109      	bne.n	800146e <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	685a      	ldr	r2, [r3, #4]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2180      	movs	r1, #128	@ 0x80
 8001466:	0109      	lsls	r1, r1, #4
 8001468:	430a      	orrs	r2, r1
 800146a:	605a      	str	r2, [r3, #4]
 800146c:	e007      	b.n	800147e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	685a      	ldr	r2, [r3, #4]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4923      	ldr	r1, [pc, #140]	@ (8001508 <HAL_I2C_Init+0x144>)
 800147a:	400a      	ands	r2, r1
 800147c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	685a      	ldr	r2, [r3, #4]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4920      	ldr	r1, [pc, #128]	@ (800150c <HAL_I2C_Init+0x148>)
 800148a:	430a      	orrs	r2, r1
 800148c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	68da      	ldr	r2, [r3, #12]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	491a      	ldr	r1, [pc, #104]	@ (8001504 <HAL_I2C_Init+0x140>)
 800149a:	400a      	ands	r2, r1
 800149c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	691a      	ldr	r2, [r3, #16]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	695b      	ldr	r3, [r3, #20]
 80014a6:	431a      	orrs	r2, r3
 80014a8:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	699b      	ldr	r3, [r3, #24]
 80014ae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	430a      	orrs	r2, r1
 80014b6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	69d9      	ldr	r1, [r3, #28]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6a1a      	ldr	r2, [r3, #32]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	430a      	orrs	r2, r1
 80014c6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2101      	movs	r1, #1
 80014d4:	430a      	orrs	r2, r1
 80014d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2200      	movs	r2, #0
 80014dc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2241      	movs	r2, #65	@ 0x41
 80014e2:	2120      	movs	r1, #32
 80014e4:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2200      	movs	r2, #0
 80014ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2242      	movs	r2, #66	@ 0x42
 80014f0:	2100      	movs	r1, #0
 80014f2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80014f4:	2300      	movs	r3, #0
}
 80014f6:	0018      	movs	r0, r3
 80014f8:	46bd      	mov	sp, r7
 80014fa:	b002      	add	sp, #8
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	46c0      	nop			@ (mov r8, r8)
 8001500:	f0ffffff 	.word	0xf0ffffff
 8001504:	ffff7fff 	.word	0xffff7fff
 8001508:	fffff7ff 	.word	0xfffff7ff
 800150c:	02008000 	.word	0x02008000

08001510 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001510:	b590      	push	{r4, r7, lr}
 8001512:	b089      	sub	sp, #36	@ 0x24
 8001514:	af02      	add	r7, sp, #8
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	0008      	movs	r0, r1
 800151a:	607a      	str	r2, [r7, #4]
 800151c:	0019      	movs	r1, r3
 800151e:	230a      	movs	r3, #10
 8001520:	18fb      	adds	r3, r7, r3
 8001522:	1c02      	adds	r2, r0, #0
 8001524:	801a      	strh	r2, [r3, #0]
 8001526:	2308      	movs	r3, #8
 8001528:	18fb      	adds	r3, r7, r3
 800152a:	1c0a      	adds	r2, r1, #0
 800152c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	2241      	movs	r2, #65	@ 0x41
 8001532:	5c9b      	ldrb	r3, [r3, r2]
 8001534:	b2db      	uxtb	r3, r3
 8001536:	2b20      	cmp	r3, #32
 8001538:	d000      	beq.n	800153c <HAL_I2C_Master_Transmit+0x2c>
 800153a:	e10a      	b.n	8001752 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	2240      	movs	r2, #64	@ 0x40
 8001540:	5c9b      	ldrb	r3, [r3, r2]
 8001542:	2b01      	cmp	r3, #1
 8001544:	d101      	bne.n	800154a <HAL_I2C_Master_Transmit+0x3a>
 8001546:	2302      	movs	r3, #2
 8001548:	e104      	b.n	8001754 <HAL_I2C_Master_Transmit+0x244>
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	2240      	movs	r2, #64	@ 0x40
 800154e:	2101      	movs	r1, #1
 8001550:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001552:	f7ff fc75 	bl	8000e40 <HAL_GetTick>
 8001556:	0003      	movs	r3, r0
 8001558:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800155a:	2380      	movs	r3, #128	@ 0x80
 800155c:	0219      	lsls	r1, r3, #8
 800155e:	68f8      	ldr	r0, [r7, #12]
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	9300      	str	r3, [sp, #0]
 8001564:	2319      	movs	r3, #25
 8001566:	2201      	movs	r2, #1
 8001568:	f000 fa26 	bl	80019b8 <I2C_WaitOnFlagUntilTimeout>
 800156c:	1e03      	subs	r3, r0, #0
 800156e:	d001      	beq.n	8001574 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e0ef      	b.n	8001754 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	2241      	movs	r2, #65	@ 0x41
 8001578:	2121      	movs	r1, #33	@ 0x21
 800157a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	2242      	movs	r2, #66	@ 0x42
 8001580:	2110      	movs	r1, #16
 8001582:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2200      	movs	r2, #0
 8001588:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	2208      	movs	r2, #8
 8001594:	18ba      	adds	r2, r7, r2
 8001596:	8812      	ldrh	r2, [r2, #0]
 8001598:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	2200      	movs	r2, #0
 800159e:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	2bff      	cmp	r3, #255	@ 0xff
 80015a8:	d906      	bls.n	80015b8 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	22ff      	movs	r2, #255	@ 0xff
 80015ae:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80015b0:	2380      	movs	r3, #128	@ 0x80
 80015b2:	045b      	lsls	r3, r3, #17
 80015b4:	617b      	str	r3, [r7, #20]
 80015b6:	e007      	b.n	80015c8 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015bc:	b29a      	uxth	r2, r3
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80015c2:	2380      	movs	r3, #128	@ 0x80
 80015c4:	049b      	lsls	r3, r3, #18
 80015c6:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d027      	beq.n	8001620 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015d4:	781a      	ldrb	r2, [r3, #0]
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015e0:	1c5a      	adds	r2, r3, #1
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	3b01      	subs	r3, #1
 80015ee:	b29a      	uxth	r2, r3
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015f8:	3b01      	subs	r3, #1
 80015fa:	b29a      	uxth	r2, r3
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001604:	b2db      	uxtb	r3, r3
 8001606:	3301      	adds	r3, #1
 8001608:	b2da      	uxtb	r2, r3
 800160a:	697c      	ldr	r4, [r7, #20]
 800160c:	230a      	movs	r3, #10
 800160e:	18fb      	adds	r3, r7, r3
 8001610:	8819      	ldrh	r1, [r3, #0]
 8001612:	68f8      	ldr	r0, [r7, #12]
 8001614:	4b51      	ldr	r3, [pc, #324]	@ (800175c <HAL_I2C_Master_Transmit+0x24c>)
 8001616:	9300      	str	r3, [sp, #0]
 8001618:	0023      	movs	r3, r4
 800161a:	f000 fc45 	bl	8001ea8 <I2C_TransferConfig>
 800161e:	e06f      	b.n	8001700 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001624:	b2da      	uxtb	r2, r3
 8001626:	697c      	ldr	r4, [r7, #20]
 8001628:	230a      	movs	r3, #10
 800162a:	18fb      	adds	r3, r7, r3
 800162c:	8819      	ldrh	r1, [r3, #0]
 800162e:	68f8      	ldr	r0, [r7, #12]
 8001630:	4b4a      	ldr	r3, [pc, #296]	@ (800175c <HAL_I2C_Master_Transmit+0x24c>)
 8001632:	9300      	str	r3, [sp, #0]
 8001634:	0023      	movs	r3, r4
 8001636:	f000 fc37 	bl	8001ea8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800163a:	e061      	b.n	8001700 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800163c:	693a      	ldr	r2, [r7, #16]
 800163e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	0018      	movs	r0, r3
 8001644:	f000 fa10 	bl	8001a68 <I2C_WaitOnTXISFlagUntilTimeout>
 8001648:	1e03      	subs	r3, r0, #0
 800164a:	d001      	beq.n	8001650 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e081      	b.n	8001754 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001654:	781a      	ldrb	r2, [r3, #0]
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001660:	1c5a      	adds	r2, r3, #1
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800166a:	b29b      	uxth	r3, r3
 800166c:	3b01      	subs	r3, #1
 800166e:	b29a      	uxth	r2, r3
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001678:	3b01      	subs	r3, #1
 800167a:	b29a      	uxth	r2, r3
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001684:	b29b      	uxth	r3, r3
 8001686:	2b00      	cmp	r3, #0
 8001688:	d03a      	beq.n	8001700 <HAL_I2C_Master_Transmit+0x1f0>
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800168e:	2b00      	cmp	r3, #0
 8001690:	d136      	bne.n	8001700 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001692:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001694:	68f8      	ldr	r0, [r7, #12]
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	9300      	str	r3, [sp, #0]
 800169a:	0013      	movs	r3, r2
 800169c:	2200      	movs	r2, #0
 800169e:	2180      	movs	r1, #128	@ 0x80
 80016a0:	f000 f98a 	bl	80019b8 <I2C_WaitOnFlagUntilTimeout>
 80016a4:	1e03      	subs	r3, r0, #0
 80016a6:	d001      	beq.n	80016ac <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e053      	b.n	8001754 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	2bff      	cmp	r3, #255	@ 0xff
 80016b4:	d911      	bls.n	80016da <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	22ff      	movs	r2, #255	@ 0xff
 80016ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016c0:	b2da      	uxtb	r2, r3
 80016c2:	2380      	movs	r3, #128	@ 0x80
 80016c4:	045c      	lsls	r4, r3, #17
 80016c6:	230a      	movs	r3, #10
 80016c8:	18fb      	adds	r3, r7, r3
 80016ca:	8819      	ldrh	r1, [r3, #0]
 80016cc:	68f8      	ldr	r0, [r7, #12]
 80016ce:	2300      	movs	r3, #0
 80016d0:	9300      	str	r3, [sp, #0]
 80016d2:	0023      	movs	r3, r4
 80016d4:	f000 fbe8 	bl	8001ea8 <I2C_TransferConfig>
 80016d8:	e012      	b.n	8001700 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016de:	b29a      	uxth	r2, r3
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016e8:	b2da      	uxtb	r2, r3
 80016ea:	2380      	movs	r3, #128	@ 0x80
 80016ec:	049c      	lsls	r4, r3, #18
 80016ee:	230a      	movs	r3, #10
 80016f0:	18fb      	adds	r3, r7, r3
 80016f2:	8819      	ldrh	r1, [r3, #0]
 80016f4:	68f8      	ldr	r0, [r7, #12]
 80016f6:	2300      	movs	r3, #0
 80016f8:	9300      	str	r3, [sp, #0]
 80016fa:	0023      	movs	r3, r4
 80016fc:	f000 fbd4 	bl	8001ea8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001704:	b29b      	uxth	r3, r3
 8001706:	2b00      	cmp	r3, #0
 8001708:	d198      	bne.n	800163c <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	0018      	movs	r0, r3
 8001712:	f000 f9ef 	bl	8001af4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001716:	1e03      	subs	r3, r0, #0
 8001718:	d001      	beq.n	800171e <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e01a      	b.n	8001754 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2220      	movs	r2, #32
 8001724:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	685a      	ldr	r2, [r3, #4]
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	490b      	ldr	r1, [pc, #44]	@ (8001760 <HAL_I2C_Master_Transmit+0x250>)
 8001732:	400a      	ands	r2, r1
 8001734:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	2241      	movs	r2, #65	@ 0x41
 800173a:	2120      	movs	r1, #32
 800173c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	2242      	movs	r2, #66	@ 0x42
 8001742:	2100      	movs	r1, #0
 8001744:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	2240      	movs	r2, #64	@ 0x40
 800174a:	2100      	movs	r1, #0
 800174c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800174e:	2300      	movs	r3, #0
 8001750:	e000      	b.n	8001754 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8001752:	2302      	movs	r3, #2
  }
}
 8001754:	0018      	movs	r0, r3
 8001756:	46bd      	mov	sp, r7
 8001758:	b007      	add	sp, #28
 800175a:	bd90      	pop	{r4, r7, pc}
 800175c:	80002000 	.word	0x80002000
 8001760:	fe00e800 	.word	0xfe00e800

08001764 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001764:	b590      	push	{r4, r7, lr}
 8001766:	b089      	sub	sp, #36	@ 0x24
 8001768:	af02      	add	r7, sp, #8
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	0008      	movs	r0, r1
 800176e:	607a      	str	r2, [r7, #4]
 8001770:	0019      	movs	r1, r3
 8001772:	230a      	movs	r3, #10
 8001774:	18fb      	adds	r3, r7, r3
 8001776:	1c02      	adds	r2, r0, #0
 8001778:	801a      	strh	r2, [r3, #0]
 800177a:	2308      	movs	r3, #8
 800177c:	18fb      	adds	r3, r7, r3
 800177e:	1c0a      	adds	r2, r1, #0
 8001780:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	2241      	movs	r2, #65	@ 0x41
 8001786:	5c9b      	ldrb	r3, [r3, r2]
 8001788:	b2db      	uxtb	r3, r3
 800178a:	2b20      	cmp	r3, #32
 800178c:	d000      	beq.n	8001790 <HAL_I2C_Master_Receive+0x2c>
 800178e:	e0e8      	b.n	8001962 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	2240      	movs	r2, #64	@ 0x40
 8001794:	5c9b      	ldrb	r3, [r3, r2]
 8001796:	2b01      	cmp	r3, #1
 8001798:	d101      	bne.n	800179e <HAL_I2C_Master_Receive+0x3a>
 800179a:	2302      	movs	r3, #2
 800179c:	e0e2      	b.n	8001964 <HAL_I2C_Master_Receive+0x200>
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	2240      	movs	r2, #64	@ 0x40
 80017a2:	2101      	movs	r1, #1
 80017a4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80017a6:	f7ff fb4b 	bl	8000e40 <HAL_GetTick>
 80017aa:	0003      	movs	r3, r0
 80017ac:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80017ae:	2380      	movs	r3, #128	@ 0x80
 80017b0:	0219      	lsls	r1, r3, #8
 80017b2:	68f8      	ldr	r0, [r7, #12]
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	9300      	str	r3, [sp, #0]
 80017b8:	2319      	movs	r3, #25
 80017ba:	2201      	movs	r2, #1
 80017bc:	f000 f8fc 	bl	80019b8 <I2C_WaitOnFlagUntilTimeout>
 80017c0:	1e03      	subs	r3, r0, #0
 80017c2:	d001      	beq.n	80017c8 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e0cd      	b.n	8001964 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	2241      	movs	r2, #65	@ 0x41
 80017cc:	2122      	movs	r1, #34	@ 0x22
 80017ce:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	2242      	movs	r2, #66	@ 0x42
 80017d4:	2110      	movs	r1, #16
 80017d6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	2200      	movs	r2, #0
 80017dc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2208      	movs	r2, #8
 80017e8:	18ba      	adds	r2, r7, r2
 80017ea:	8812      	ldrh	r2, [r2, #0]
 80017ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	2200      	movs	r2, #0
 80017f2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	2bff      	cmp	r3, #255	@ 0xff
 80017fc:	d911      	bls.n	8001822 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	22ff      	movs	r2, #255	@ 0xff
 8001802:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001808:	b2da      	uxtb	r2, r3
 800180a:	2380      	movs	r3, #128	@ 0x80
 800180c:	045c      	lsls	r4, r3, #17
 800180e:	230a      	movs	r3, #10
 8001810:	18fb      	adds	r3, r7, r3
 8001812:	8819      	ldrh	r1, [r3, #0]
 8001814:	68f8      	ldr	r0, [r7, #12]
 8001816:	4b55      	ldr	r3, [pc, #340]	@ (800196c <HAL_I2C_Master_Receive+0x208>)
 8001818:	9300      	str	r3, [sp, #0]
 800181a:	0023      	movs	r3, r4
 800181c:	f000 fb44 	bl	8001ea8 <I2C_TransferConfig>
 8001820:	e076      	b.n	8001910 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001826:	b29a      	uxth	r2, r3
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001830:	b2da      	uxtb	r2, r3
 8001832:	2380      	movs	r3, #128	@ 0x80
 8001834:	049c      	lsls	r4, r3, #18
 8001836:	230a      	movs	r3, #10
 8001838:	18fb      	adds	r3, r7, r3
 800183a:	8819      	ldrh	r1, [r3, #0]
 800183c:	68f8      	ldr	r0, [r7, #12]
 800183e:	4b4b      	ldr	r3, [pc, #300]	@ (800196c <HAL_I2C_Master_Receive+0x208>)
 8001840:	9300      	str	r3, [sp, #0]
 8001842:	0023      	movs	r3, r4
 8001844:	f000 fb30 	bl	8001ea8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001848:	e062      	b.n	8001910 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800184a:	697a      	ldr	r2, [r7, #20]
 800184c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	0018      	movs	r0, r3
 8001852:	f000 f993 	bl	8001b7c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001856:	1e03      	subs	r3, r0, #0
 8001858:	d001      	beq.n	800185e <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e082      	b.n	8001964 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001868:	b2d2      	uxtb	r2, r2
 800186a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001870:	1c5a      	adds	r2, r3, #1
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800187a:	3b01      	subs	r3, #1
 800187c:	b29a      	uxth	r2, r3
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001886:	b29b      	uxth	r3, r3
 8001888:	3b01      	subs	r3, #1
 800188a:	b29a      	uxth	r2, r3
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001894:	b29b      	uxth	r3, r3
 8001896:	2b00      	cmp	r3, #0
 8001898:	d03a      	beq.n	8001910 <HAL_I2C_Master_Receive+0x1ac>
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d136      	bne.n	8001910 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80018a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80018a4:	68f8      	ldr	r0, [r7, #12]
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	9300      	str	r3, [sp, #0]
 80018aa:	0013      	movs	r3, r2
 80018ac:	2200      	movs	r2, #0
 80018ae:	2180      	movs	r1, #128	@ 0x80
 80018b0:	f000 f882 	bl	80019b8 <I2C_WaitOnFlagUntilTimeout>
 80018b4:	1e03      	subs	r3, r0, #0
 80018b6:	d001      	beq.n	80018bc <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e053      	b.n	8001964 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	2bff      	cmp	r3, #255	@ 0xff
 80018c4:	d911      	bls.n	80018ea <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	22ff      	movs	r2, #255	@ 0xff
 80018ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018d0:	b2da      	uxtb	r2, r3
 80018d2:	2380      	movs	r3, #128	@ 0x80
 80018d4:	045c      	lsls	r4, r3, #17
 80018d6:	230a      	movs	r3, #10
 80018d8:	18fb      	adds	r3, r7, r3
 80018da:	8819      	ldrh	r1, [r3, #0]
 80018dc:	68f8      	ldr	r0, [r7, #12]
 80018de:	2300      	movs	r3, #0
 80018e0:	9300      	str	r3, [sp, #0]
 80018e2:	0023      	movs	r3, r4
 80018e4:	f000 fae0 	bl	8001ea8 <I2C_TransferConfig>
 80018e8:	e012      	b.n	8001910 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018ee:	b29a      	uxth	r2, r3
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018f8:	b2da      	uxtb	r2, r3
 80018fa:	2380      	movs	r3, #128	@ 0x80
 80018fc:	049c      	lsls	r4, r3, #18
 80018fe:	230a      	movs	r3, #10
 8001900:	18fb      	adds	r3, r7, r3
 8001902:	8819      	ldrh	r1, [r3, #0]
 8001904:	68f8      	ldr	r0, [r7, #12]
 8001906:	2300      	movs	r3, #0
 8001908:	9300      	str	r3, [sp, #0]
 800190a:	0023      	movs	r3, r4
 800190c:	f000 facc 	bl	8001ea8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001914:	b29b      	uxth	r3, r3
 8001916:	2b00      	cmp	r3, #0
 8001918:	d197      	bne.n	800184a <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800191a:	697a      	ldr	r2, [r7, #20]
 800191c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	0018      	movs	r0, r3
 8001922:	f000 f8e7 	bl	8001af4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001926:	1e03      	subs	r3, r0, #0
 8001928:	d001      	beq.n	800192e <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e01a      	b.n	8001964 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2220      	movs	r2, #32
 8001934:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	685a      	ldr	r2, [r3, #4]
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	490b      	ldr	r1, [pc, #44]	@ (8001970 <HAL_I2C_Master_Receive+0x20c>)
 8001942:	400a      	ands	r2, r1
 8001944:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2241      	movs	r2, #65	@ 0x41
 800194a:	2120      	movs	r1, #32
 800194c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	2242      	movs	r2, #66	@ 0x42
 8001952:	2100      	movs	r1, #0
 8001954:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	2240      	movs	r2, #64	@ 0x40
 800195a:	2100      	movs	r1, #0
 800195c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800195e:	2300      	movs	r3, #0
 8001960:	e000      	b.n	8001964 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8001962:	2302      	movs	r3, #2
  }
}
 8001964:	0018      	movs	r0, r3
 8001966:	46bd      	mov	sp, r7
 8001968:	b007      	add	sp, #28
 800196a:	bd90      	pop	{r4, r7, pc}
 800196c:	80002400 	.word	0x80002400
 8001970:	fe00e800 	.word	0xfe00e800

08001974 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	699b      	ldr	r3, [r3, #24]
 8001982:	2202      	movs	r2, #2
 8001984:	4013      	ands	r3, r2
 8001986:	2b02      	cmp	r3, #2
 8001988:	d103      	bne.n	8001992 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2200      	movs	r2, #0
 8001990:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	699b      	ldr	r3, [r3, #24]
 8001998:	2201      	movs	r2, #1
 800199a:	4013      	ands	r3, r2
 800199c:	2b01      	cmp	r3, #1
 800199e:	d007      	beq.n	80019b0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	699a      	ldr	r2, [r3, #24]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2101      	movs	r1, #1
 80019ac:	430a      	orrs	r2, r1
 80019ae:	619a      	str	r2, [r3, #24]
  }
}
 80019b0:	46c0      	nop			@ (mov r8, r8)
 80019b2:	46bd      	mov	sp, r7
 80019b4:	b002      	add	sp, #8
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	603b      	str	r3, [r7, #0]
 80019c4:	1dfb      	adds	r3, r7, #7
 80019c6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019c8:	e03a      	b.n	8001a40 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	6839      	ldr	r1, [r7, #0]
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	0018      	movs	r0, r3
 80019d2:	f000 f971 	bl	8001cb8 <I2C_IsErrorOccurred>
 80019d6:	1e03      	subs	r3, r0, #0
 80019d8:	d001      	beq.n	80019de <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e040      	b.n	8001a60 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	3301      	adds	r3, #1
 80019e2:	d02d      	beq.n	8001a40 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019e4:	f7ff fa2c 	bl	8000e40 <HAL_GetTick>
 80019e8:	0002      	movs	r2, r0
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	683a      	ldr	r2, [r7, #0]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d302      	bcc.n	80019fa <I2C_WaitOnFlagUntilTimeout+0x42>
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d122      	bne.n	8001a40 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	68ba      	ldr	r2, [r7, #8]
 8001a02:	4013      	ands	r3, r2
 8001a04:	68ba      	ldr	r2, [r7, #8]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	425a      	negs	r2, r3
 8001a0a:	4153      	adcs	r3, r2
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	001a      	movs	r2, r3
 8001a10:	1dfb      	adds	r3, r7, #7
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d113      	bne.n	8001a40 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a1c:	2220      	movs	r2, #32
 8001a1e:	431a      	orrs	r2, r3
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2241      	movs	r2, #65	@ 0x41
 8001a28:	2120      	movs	r1, #32
 8001a2a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2242      	movs	r2, #66	@ 0x42
 8001a30:	2100      	movs	r1, #0
 8001a32:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	2240      	movs	r2, #64	@ 0x40
 8001a38:	2100      	movs	r1, #0
 8001a3a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e00f      	b.n	8001a60 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	699b      	ldr	r3, [r3, #24]
 8001a46:	68ba      	ldr	r2, [r7, #8]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	68ba      	ldr	r2, [r7, #8]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	425a      	negs	r2, r3
 8001a50:	4153      	adcs	r3, r2
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	001a      	movs	r2, r3
 8001a56:	1dfb      	adds	r3, r7, #7
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d0b5      	beq.n	80019ca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001a5e:	2300      	movs	r3, #0
}
 8001a60:	0018      	movs	r0, r3
 8001a62:	46bd      	mov	sp, r7
 8001a64:	b004      	add	sp, #16
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	60b9      	str	r1, [r7, #8]
 8001a72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001a74:	e032      	b.n	8001adc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	68b9      	ldr	r1, [r7, #8]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	0018      	movs	r0, r3
 8001a7e:	f000 f91b 	bl	8001cb8 <I2C_IsErrorOccurred>
 8001a82:	1e03      	subs	r3, r0, #0
 8001a84:	d001      	beq.n	8001a8a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e030      	b.n	8001aec <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	d025      	beq.n	8001adc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a90:	f7ff f9d6 	bl	8000e40 <HAL_GetTick>
 8001a94:	0002      	movs	r2, r0
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	68ba      	ldr	r2, [r7, #8]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d302      	bcc.n	8001aa6 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d11a      	bne.n	8001adc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	699b      	ldr	r3, [r3, #24]
 8001aac:	2202      	movs	r2, #2
 8001aae:	4013      	ands	r3, r2
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d013      	beq.n	8001adc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ab8:	2220      	movs	r2, #32
 8001aba:	431a      	orrs	r2, r3
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2241      	movs	r2, #65	@ 0x41
 8001ac4:	2120      	movs	r1, #32
 8001ac6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2242      	movs	r2, #66	@ 0x42
 8001acc:	2100      	movs	r1, #0
 8001ace:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2240      	movs	r2, #64	@ 0x40
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e007      	b.n	8001aec <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	699b      	ldr	r3, [r3, #24]
 8001ae2:	2202      	movs	r2, #2
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d1c5      	bne.n	8001a76 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001aea:	2300      	movs	r3, #0
}
 8001aec:	0018      	movs	r0, r3
 8001aee:	46bd      	mov	sp, r7
 8001af0:	b004      	add	sp, #16
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	60f8      	str	r0, [r7, #12]
 8001afc:	60b9      	str	r1, [r7, #8]
 8001afe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b00:	e02f      	b.n	8001b62 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	68b9      	ldr	r1, [r7, #8]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	0018      	movs	r0, r3
 8001b0a:	f000 f8d5 	bl	8001cb8 <I2C_IsErrorOccurred>
 8001b0e:	1e03      	subs	r3, r0, #0
 8001b10:	d001      	beq.n	8001b16 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e02d      	b.n	8001b72 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b16:	f7ff f993 	bl	8000e40 <HAL_GetTick>
 8001b1a:	0002      	movs	r2, r0
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	68ba      	ldr	r2, [r7, #8]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d302      	bcc.n	8001b2c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d11a      	bne.n	8001b62 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	699b      	ldr	r3, [r3, #24]
 8001b32:	2220      	movs	r2, #32
 8001b34:	4013      	ands	r3, r2
 8001b36:	2b20      	cmp	r3, #32
 8001b38:	d013      	beq.n	8001b62 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b3e:	2220      	movs	r2, #32
 8001b40:	431a      	orrs	r2, r3
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2241      	movs	r2, #65	@ 0x41
 8001b4a:	2120      	movs	r1, #32
 8001b4c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2242      	movs	r2, #66	@ 0x42
 8001b52:	2100      	movs	r1, #0
 8001b54:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2240      	movs	r2, #64	@ 0x40
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e007      	b.n	8001b72 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	699b      	ldr	r3, [r3, #24]
 8001b68:	2220      	movs	r2, #32
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	2b20      	cmp	r3, #32
 8001b6e:	d1c8      	bne.n	8001b02 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	0018      	movs	r0, r3
 8001b74:	46bd      	mov	sp, r7
 8001b76:	b004      	add	sp, #16
 8001b78:	bd80      	pop	{r7, pc}
	...

08001b7c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b086      	sub	sp, #24
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	60b9      	str	r1, [r7, #8]
 8001b86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b88:	2317      	movs	r3, #23
 8001b8a:	18fb      	adds	r3, r7, r3
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8001b90:	e07b      	b.n	8001c8a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	68b9      	ldr	r1, [r7, #8]
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	0018      	movs	r0, r3
 8001b9a:	f000 f88d 	bl	8001cb8 <I2C_IsErrorOccurred>
 8001b9e:	1e03      	subs	r3, r0, #0
 8001ba0:	d003      	beq.n	8001baa <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 8001ba2:	2317      	movs	r3, #23
 8001ba4:	18fb      	adds	r3, r7, r3
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	2220      	movs	r2, #32
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	2b20      	cmp	r3, #32
 8001bb6:	d140      	bne.n	8001c3a <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8001bb8:	2117      	movs	r1, #23
 8001bba:	187b      	adds	r3, r7, r1
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d13b      	bne.n	8001c3a <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	2204      	movs	r2, #4
 8001bca:	4013      	ands	r3, r2
 8001bcc:	2b04      	cmp	r3, #4
 8001bce:	d106      	bne.n	8001bde <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d002      	beq.n	8001bde <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8001bd8:	187b      	adds	r3, r7, r1
 8001bda:	2200      	movs	r2, #0
 8001bdc:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	699b      	ldr	r3, [r3, #24]
 8001be4:	2210      	movs	r2, #16
 8001be6:	4013      	ands	r3, r2
 8001be8:	2b10      	cmp	r3, #16
 8001bea:	d123      	bne.n	8001c34 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2210      	movs	r2, #16
 8001bf2:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2204      	movs	r2, #4
 8001bf8:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2220      	movs	r2, #32
 8001c00:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	685a      	ldr	r2, [r3, #4]
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4929      	ldr	r1, [pc, #164]	@ (8001cb4 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 8001c0e:	400a      	ands	r2, r1
 8001c10:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2241      	movs	r2, #65	@ 0x41
 8001c16:	2120      	movs	r1, #32
 8001c18:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2242      	movs	r2, #66	@ 0x42
 8001c1e:	2100      	movs	r1, #0
 8001c20:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2240      	movs	r2, #64	@ 0x40
 8001c26:	2100      	movs	r1, #0
 8001c28:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8001c2a:	2317      	movs	r3, #23
 8001c2c:	18fb      	adds	r3, r7, r3
 8001c2e:	2201      	movs	r2, #1
 8001c30:	701a      	strb	r2, [r3, #0]
 8001c32:	e002      	b.n	8001c3a <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2200      	movs	r2, #0
 8001c38:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8001c3a:	f7ff f901 	bl	8000e40 <HAL_GetTick>
 8001c3e:	0002      	movs	r2, r0
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	68ba      	ldr	r2, [r7, #8]
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d302      	bcc.n	8001c50 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d11c      	bne.n	8001c8a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 8001c50:	2017      	movs	r0, #23
 8001c52:	183b      	adds	r3, r7, r0
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d117      	bne.n	8001c8a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	699b      	ldr	r3, [r3, #24]
 8001c60:	2204      	movs	r2, #4
 8001c62:	4013      	ands	r3, r2
 8001c64:	2b04      	cmp	r3, #4
 8001c66:	d010      	beq.n	8001c8a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c6c:	2220      	movs	r2, #32
 8001c6e:	431a      	orrs	r2, r3
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2241      	movs	r2, #65	@ 0x41
 8001c78:	2120      	movs	r1, #32
 8001c7a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2240      	movs	r2, #64	@ 0x40
 8001c80:	2100      	movs	r1, #0
 8001c82:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8001c84:	183b      	adds	r3, r7, r0
 8001c86:	2201      	movs	r2, #1
 8001c88:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	2204      	movs	r2, #4
 8001c92:	4013      	ands	r3, r2
 8001c94:	2b04      	cmp	r3, #4
 8001c96:	d005      	beq.n	8001ca4 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8001c98:	2317      	movs	r3, #23
 8001c9a:	18fb      	adds	r3, r7, r3
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d100      	bne.n	8001ca4 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8001ca2:	e776      	b.n	8001b92 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8001ca4:	2317      	movs	r3, #23
 8001ca6:	18fb      	adds	r3, r7, r3
 8001ca8:	781b      	ldrb	r3, [r3, #0]
}
 8001caa:	0018      	movs	r0, r3
 8001cac:	46bd      	mov	sp, r7
 8001cae:	b006      	add	sp, #24
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	46c0      	nop			@ (mov r8, r8)
 8001cb4:	fe00e800 	.word	0xfe00e800

08001cb8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b08a      	sub	sp, #40	@ 0x28
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	60b9      	str	r1, [r7, #8]
 8001cc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cc4:	2327      	movs	r3, #39	@ 0x27
 8001cc6:	18fb      	adds	r3, r7, r3
 8001cc8:	2200      	movs	r2, #0
 8001cca:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	699b      	ldr	r3, [r3, #24]
 8001cd2:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	2210      	movs	r2, #16
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	d100      	bne.n	8001ce6 <I2C_IsErrorOccurred+0x2e>
 8001ce4:	e079      	b.n	8001dda <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2210      	movs	r2, #16
 8001cec:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001cee:	e057      	b.n	8001da0 <I2C_IsErrorOccurred+0xe8>
 8001cf0:	2227      	movs	r2, #39	@ 0x27
 8001cf2:	18bb      	adds	r3, r7, r2
 8001cf4:	18ba      	adds	r2, r7, r2
 8001cf6:	7812      	ldrb	r2, [r2, #0]
 8001cf8:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	d04f      	beq.n	8001da0 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001d00:	f7ff f89e 	bl	8000e40 <HAL_GetTick>
 8001d04:	0002      	movs	r2, r0
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	68ba      	ldr	r2, [r7, #8]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d302      	bcc.n	8001d16 <I2C_IsErrorOccurred+0x5e>
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d144      	bne.n	8001da0 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	685a      	ldr	r2, [r3, #4]
 8001d1c:	2380      	movs	r3, #128	@ 0x80
 8001d1e:	01db      	lsls	r3, r3, #7
 8001d20:	4013      	ands	r3, r2
 8001d22:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001d24:	2013      	movs	r0, #19
 8001d26:	183b      	adds	r3, r7, r0
 8001d28:	68fa      	ldr	r2, [r7, #12]
 8001d2a:	2142      	movs	r1, #66	@ 0x42
 8001d2c:	5c52      	ldrb	r2, [r2, r1]
 8001d2e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	699a      	ldr	r2, [r3, #24]
 8001d36:	2380      	movs	r3, #128	@ 0x80
 8001d38:	021b      	lsls	r3, r3, #8
 8001d3a:	401a      	ands	r2, r3
 8001d3c:	2380      	movs	r3, #128	@ 0x80
 8001d3e:	021b      	lsls	r3, r3, #8
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d126      	bne.n	8001d92 <I2C_IsErrorOccurred+0xda>
 8001d44:	697a      	ldr	r2, [r7, #20]
 8001d46:	2380      	movs	r3, #128	@ 0x80
 8001d48:	01db      	lsls	r3, r3, #7
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d021      	beq.n	8001d92 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8001d4e:	183b      	adds	r3, r7, r0
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	2b20      	cmp	r3, #32
 8001d54:	d01d      	beq.n	8001d92 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	685a      	ldr	r2, [r3, #4]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2180      	movs	r1, #128	@ 0x80
 8001d62:	01c9      	lsls	r1, r1, #7
 8001d64:	430a      	orrs	r2, r1
 8001d66:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001d68:	f7ff f86a 	bl	8000e40 <HAL_GetTick>
 8001d6c:	0003      	movs	r3, r0
 8001d6e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d70:	e00f      	b.n	8001d92 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001d72:	f7ff f865 	bl	8000e40 <HAL_GetTick>
 8001d76:	0002      	movs	r2, r0
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	2b19      	cmp	r3, #25
 8001d7e:	d908      	bls.n	8001d92 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001d80:	6a3b      	ldr	r3, [r7, #32]
 8001d82:	2220      	movs	r2, #32
 8001d84:	4313      	orrs	r3, r2
 8001d86:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001d88:	2327      	movs	r3, #39	@ 0x27
 8001d8a:	18fb      	adds	r3, r7, r3
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	701a      	strb	r2, [r3, #0]

              break;
 8001d90:	e006      	b.n	8001da0 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	2220      	movs	r2, #32
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	2b20      	cmp	r3, #32
 8001d9e:	d1e8      	bne.n	8001d72 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	699b      	ldr	r3, [r3, #24]
 8001da6:	2220      	movs	r2, #32
 8001da8:	4013      	ands	r3, r2
 8001daa:	2b20      	cmp	r3, #32
 8001dac:	d004      	beq.n	8001db8 <I2C_IsErrorOccurred+0x100>
 8001dae:	2327      	movs	r3, #39	@ 0x27
 8001db0:	18fb      	adds	r3, r7, r3
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d09b      	beq.n	8001cf0 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001db8:	2327      	movs	r3, #39	@ 0x27
 8001dba:	18fb      	adds	r3, r7, r3
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d103      	bne.n	8001dca <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	2220      	movs	r2, #32
 8001dc8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001dca:	6a3b      	ldr	r3, [r7, #32]
 8001dcc:	2204      	movs	r2, #4
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001dd2:	2327      	movs	r3, #39	@ 0x27
 8001dd4:	18fb      	adds	r3, r7, r3
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	699b      	ldr	r3, [r3, #24]
 8001de0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	2380      	movs	r3, #128	@ 0x80
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	4013      	ands	r3, r2
 8001dea:	d00c      	beq.n	8001e06 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001dec:	6a3b      	ldr	r3, [r7, #32]
 8001dee:	2201      	movs	r2, #1
 8001df0:	4313      	orrs	r3, r2
 8001df2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2280      	movs	r2, #128	@ 0x80
 8001dfa:	0052      	lsls	r2, r2, #1
 8001dfc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001dfe:	2327      	movs	r3, #39	@ 0x27
 8001e00:	18fb      	adds	r3, r7, r3
 8001e02:	2201      	movs	r2, #1
 8001e04:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001e06:	69ba      	ldr	r2, [r7, #24]
 8001e08:	2380      	movs	r3, #128	@ 0x80
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	d00c      	beq.n	8001e2a <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001e10:	6a3b      	ldr	r3, [r7, #32]
 8001e12:	2208      	movs	r2, #8
 8001e14:	4313      	orrs	r3, r2
 8001e16:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2280      	movs	r2, #128	@ 0x80
 8001e1e:	00d2      	lsls	r2, r2, #3
 8001e20:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e22:	2327      	movs	r3, #39	@ 0x27
 8001e24:	18fb      	adds	r3, r7, r3
 8001e26:	2201      	movs	r2, #1
 8001e28:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	2380      	movs	r3, #128	@ 0x80
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	4013      	ands	r3, r2
 8001e32:	d00c      	beq.n	8001e4e <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001e34:	6a3b      	ldr	r3, [r7, #32]
 8001e36:	2202      	movs	r2, #2
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2280      	movs	r2, #128	@ 0x80
 8001e42:	0092      	lsls	r2, r2, #2
 8001e44:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e46:	2327      	movs	r3, #39	@ 0x27
 8001e48:	18fb      	adds	r3, r7, r3
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8001e4e:	2327      	movs	r3, #39	@ 0x27
 8001e50:	18fb      	adds	r3, r7, r3
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d01d      	beq.n	8001e94 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	0018      	movs	r0, r3
 8001e5c:	f7ff fd8a 	bl	8001974 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	685a      	ldr	r2, [r3, #4]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	490e      	ldr	r1, [pc, #56]	@ (8001ea4 <I2C_IsErrorOccurred+0x1ec>)
 8001e6c:	400a      	ands	r2, r1
 8001e6e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001e74:	6a3b      	ldr	r3, [r7, #32]
 8001e76:	431a      	orrs	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2241      	movs	r2, #65	@ 0x41
 8001e80:	2120      	movs	r1, #32
 8001e82:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2242      	movs	r2, #66	@ 0x42
 8001e88:	2100      	movs	r1, #0
 8001e8a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2240      	movs	r2, #64	@ 0x40
 8001e90:	2100      	movs	r1, #0
 8001e92:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8001e94:	2327      	movs	r3, #39	@ 0x27
 8001e96:	18fb      	adds	r3, r7, r3
 8001e98:	781b      	ldrb	r3, [r3, #0]
}
 8001e9a:	0018      	movs	r0, r3
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	b00a      	add	sp, #40	@ 0x28
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	46c0      	nop			@ (mov r8, r8)
 8001ea4:	fe00e800 	.word	0xfe00e800

08001ea8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001ea8:	b590      	push	{r4, r7, lr}
 8001eaa:	b087      	sub	sp, #28
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	0008      	movs	r0, r1
 8001eb2:	0011      	movs	r1, r2
 8001eb4:	607b      	str	r3, [r7, #4]
 8001eb6:	240a      	movs	r4, #10
 8001eb8:	193b      	adds	r3, r7, r4
 8001eba:	1c02      	adds	r2, r0, #0
 8001ebc:	801a      	strh	r2, [r3, #0]
 8001ebe:	2009      	movs	r0, #9
 8001ec0:	183b      	adds	r3, r7, r0
 8001ec2:	1c0a      	adds	r2, r1, #0
 8001ec4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001ec6:	193b      	adds	r3, r7, r4
 8001ec8:	881b      	ldrh	r3, [r3, #0]
 8001eca:	059b      	lsls	r3, r3, #22
 8001ecc:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001ece:	183b      	adds	r3, r7, r0
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	0419      	lsls	r1, r3, #16
 8001ed4:	23ff      	movs	r3, #255	@ 0xff
 8001ed6:	041b      	lsls	r3, r3, #16
 8001ed8:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001eda:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001ee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	085b      	lsrs	r3, r3, #1
 8001ee8:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001ef2:	0d51      	lsrs	r1, r2, #21
 8001ef4:	2280      	movs	r2, #128	@ 0x80
 8001ef6:	00d2      	lsls	r2, r2, #3
 8001ef8:	400a      	ands	r2, r1
 8001efa:	4907      	ldr	r1, [pc, #28]	@ (8001f18 <I2C_TransferConfig+0x70>)
 8001efc:	430a      	orrs	r2, r1
 8001efe:	43d2      	mvns	r2, r2
 8001f00:	401a      	ands	r2, r3
 8001f02:	0011      	movs	r1, r2
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	697a      	ldr	r2, [r7, #20]
 8001f0a:	430a      	orrs	r2, r1
 8001f0c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001f0e:	46c0      	nop			@ (mov r8, r8)
 8001f10:	46bd      	mov	sp, r7
 8001f12:	b007      	add	sp, #28
 8001f14:	bd90      	pop	{r4, r7, pc}
 8001f16:	46c0      	nop			@ (mov r8, r8)
 8001f18:	03ff63ff 	.word	0x03ff63ff

08001f1c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2241      	movs	r2, #65	@ 0x41
 8001f2a:	5c9b      	ldrb	r3, [r3, r2]
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	2b20      	cmp	r3, #32
 8001f30:	d138      	bne.n	8001fa4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2240      	movs	r2, #64	@ 0x40
 8001f36:	5c9b      	ldrb	r3, [r3, r2]
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d101      	bne.n	8001f40 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	e032      	b.n	8001fa6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2240      	movs	r2, #64	@ 0x40
 8001f44:	2101      	movs	r1, #1
 8001f46:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2241      	movs	r2, #65	@ 0x41
 8001f4c:	2124      	movs	r1, #36	@ 0x24
 8001f4e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2101      	movs	r1, #1
 8001f5c:	438a      	bics	r2, r1
 8001f5e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4911      	ldr	r1, [pc, #68]	@ (8001fb0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001f6c:	400a      	ands	r2, r1
 8001f6e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	6819      	ldr	r1, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	683a      	ldr	r2, [r7, #0]
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2101      	movs	r1, #1
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2241      	movs	r2, #65	@ 0x41
 8001f94:	2120      	movs	r1, #32
 8001f96:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2240      	movs	r2, #64	@ 0x40
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	e000      	b.n	8001fa6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001fa4:	2302      	movs	r3, #2
  }
}
 8001fa6:	0018      	movs	r0, r3
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	b002      	add	sp, #8
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	46c0      	nop			@ (mov r8, r8)
 8001fb0:	ffffefff 	.word	0xffffefff

08001fb4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2241      	movs	r2, #65	@ 0x41
 8001fc2:	5c9b      	ldrb	r3, [r3, r2]
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b20      	cmp	r3, #32
 8001fc8:	d139      	bne.n	800203e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2240      	movs	r2, #64	@ 0x40
 8001fce:	5c9b      	ldrb	r3, [r3, r2]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d101      	bne.n	8001fd8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	e033      	b.n	8002040 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2240      	movs	r2, #64	@ 0x40
 8001fdc:	2101      	movs	r1, #1
 8001fde:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2241      	movs	r2, #65	@ 0x41
 8001fe4:	2124      	movs	r1, #36	@ 0x24
 8001fe6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2101      	movs	r1, #1
 8001ff4:	438a      	bics	r2, r1
 8001ff6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	4a11      	ldr	r2, [pc, #68]	@ (8002048 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002004:	4013      	ands	r3, r2
 8002006:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	021b      	lsls	r3, r3, #8
 800200c:	68fa      	ldr	r2, [r7, #12]
 800200e:	4313      	orrs	r3, r2
 8002010:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	68fa      	ldr	r2, [r7, #12]
 8002018:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2101      	movs	r1, #1
 8002026:	430a      	orrs	r2, r1
 8002028:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2241      	movs	r2, #65	@ 0x41
 800202e:	2120      	movs	r1, #32
 8002030:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2240      	movs	r2, #64	@ 0x40
 8002036:	2100      	movs	r1, #0
 8002038:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800203a:	2300      	movs	r3, #0
 800203c:	e000      	b.n	8002040 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800203e:	2302      	movs	r3, #2
  }
}
 8002040:	0018      	movs	r0, r3
 8002042:	46bd      	mov	sp, r7
 8002044:	b004      	add	sp, #16
 8002046:	bd80      	pop	{r7, pc}
 8002048:	fffff0ff 	.word	0xfffff0ff

0800204c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002054:	4b19      	ldr	r3, [pc, #100]	@ (80020bc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a19      	ldr	r2, [pc, #100]	@ (80020c0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800205a:	4013      	ands	r3, r2
 800205c:	0019      	movs	r1, r3
 800205e:	4b17      	ldr	r3, [pc, #92]	@ (80020bc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	430a      	orrs	r2, r1
 8002064:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	2380      	movs	r3, #128	@ 0x80
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	429a      	cmp	r2, r3
 800206e:	d11f      	bne.n	80020b0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002070:	4b14      	ldr	r3, [pc, #80]	@ (80020c4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	0013      	movs	r3, r2
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	189b      	adds	r3, r3, r2
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	4912      	ldr	r1, [pc, #72]	@ (80020c8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800207e:	0018      	movs	r0, r3
 8002080:	f7fe f850 	bl	8000124 <__udivsi3>
 8002084:	0003      	movs	r3, r0
 8002086:	3301      	adds	r3, #1
 8002088:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800208a:	e008      	b.n	800209e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d003      	beq.n	800209a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	3b01      	subs	r3, #1
 8002096:	60fb      	str	r3, [r7, #12]
 8002098:	e001      	b.n	800209e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e009      	b.n	80020b2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800209e:	4b07      	ldr	r3, [pc, #28]	@ (80020bc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80020a0:	695a      	ldr	r2, [r3, #20]
 80020a2:	2380      	movs	r3, #128	@ 0x80
 80020a4:	00db      	lsls	r3, r3, #3
 80020a6:	401a      	ands	r2, r3
 80020a8:	2380      	movs	r3, #128	@ 0x80
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d0ed      	beq.n	800208c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	0018      	movs	r0, r3
 80020b4:	46bd      	mov	sp, r7
 80020b6:	b004      	add	sp, #16
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	46c0      	nop			@ (mov r8, r8)
 80020bc:	40007000 	.word	0x40007000
 80020c0:	fffff9ff 	.word	0xfffff9ff
 80020c4:	20000004 	.word	0x20000004
 80020c8:	000f4240 	.word	0x000f4240

080020cc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80020d0:	4b03      	ldr	r3, [pc, #12]	@ (80020e0 <LL_RCC_GetAPB1Prescaler+0x14>)
 80020d2:	689a      	ldr	r2, [r3, #8]
 80020d4:	23e0      	movs	r3, #224	@ 0xe0
 80020d6:	01db      	lsls	r3, r3, #7
 80020d8:	4013      	ands	r3, r2
}
 80020da:	0018      	movs	r0, r3
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40021000 	.word	0x40021000

080020e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b088      	sub	sp, #32
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d101      	bne.n	80020f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e2f3      	b.n	80026de <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2201      	movs	r2, #1
 80020fc:	4013      	ands	r3, r2
 80020fe:	d100      	bne.n	8002102 <HAL_RCC_OscConfig+0x1e>
 8002100:	e07c      	b.n	80021fc <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002102:	4bc3      	ldr	r3, [pc, #780]	@ (8002410 <HAL_RCC_OscConfig+0x32c>)
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	2238      	movs	r2, #56	@ 0x38
 8002108:	4013      	ands	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800210c:	4bc0      	ldr	r3, [pc, #768]	@ (8002410 <HAL_RCC_OscConfig+0x32c>)
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	2203      	movs	r2, #3
 8002112:	4013      	ands	r3, r2
 8002114:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	2b10      	cmp	r3, #16
 800211a:	d102      	bne.n	8002122 <HAL_RCC_OscConfig+0x3e>
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	2b03      	cmp	r3, #3
 8002120:	d002      	beq.n	8002128 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	2b08      	cmp	r3, #8
 8002126:	d10b      	bne.n	8002140 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002128:	4bb9      	ldr	r3, [pc, #740]	@ (8002410 <HAL_RCC_OscConfig+0x32c>)
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	2380      	movs	r3, #128	@ 0x80
 800212e:	029b      	lsls	r3, r3, #10
 8002130:	4013      	ands	r3, r2
 8002132:	d062      	beq.n	80021fa <HAL_RCC_OscConfig+0x116>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d15e      	bne.n	80021fa <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e2ce      	b.n	80026de <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685a      	ldr	r2, [r3, #4]
 8002144:	2380      	movs	r3, #128	@ 0x80
 8002146:	025b      	lsls	r3, r3, #9
 8002148:	429a      	cmp	r2, r3
 800214a:	d107      	bne.n	800215c <HAL_RCC_OscConfig+0x78>
 800214c:	4bb0      	ldr	r3, [pc, #704]	@ (8002410 <HAL_RCC_OscConfig+0x32c>)
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	4baf      	ldr	r3, [pc, #700]	@ (8002410 <HAL_RCC_OscConfig+0x32c>)
 8002152:	2180      	movs	r1, #128	@ 0x80
 8002154:	0249      	lsls	r1, r1, #9
 8002156:	430a      	orrs	r2, r1
 8002158:	601a      	str	r2, [r3, #0]
 800215a:	e020      	b.n	800219e <HAL_RCC_OscConfig+0xba>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685a      	ldr	r2, [r3, #4]
 8002160:	23a0      	movs	r3, #160	@ 0xa0
 8002162:	02db      	lsls	r3, r3, #11
 8002164:	429a      	cmp	r2, r3
 8002166:	d10e      	bne.n	8002186 <HAL_RCC_OscConfig+0xa2>
 8002168:	4ba9      	ldr	r3, [pc, #676]	@ (8002410 <HAL_RCC_OscConfig+0x32c>)
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	4ba8      	ldr	r3, [pc, #672]	@ (8002410 <HAL_RCC_OscConfig+0x32c>)
 800216e:	2180      	movs	r1, #128	@ 0x80
 8002170:	02c9      	lsls	r1, r1, #11
 8002172:	430a      	orrs	r2, r1
 8002174:	601a      	str	r2, [r3, #0]
 8002176:	4ba6      	ldr	r3, [pc, #664]	@ (8002410 <HAL_RCC_OscConfig+0x32c>)
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	4ba5      	ldr	r3, [pc, #660]	@ (8002410 <HAL_RCC_OscConfig+0x32c>)
 800217c:	2180      	movs	r1, #128	@ 0x80
 800217e:	0249      	lsls	r1, r1, #9
 8002180:	430a      	orrs	r2, r1
 8002182:	601a      	str	r2, [r3, #0]
 8002184:	e00b      	b.n	800219e <HAL_RCC_OscConfig+0xba>
 8002186:	4ba2      	ldr	r3, [pc, #648]	@ (8002410 <HAL_RCC_OscConfig+0x32c>)
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	4ba1      	ldr	r3, [pc, #644]	@ (8002410 <HAL_RCC_OscConfig+0x32c>)
 800218c:	49a1      	ldr	r1, [pc, #644]	@ (8002414 <HAL_RCC_OscConfig+0x330>)
 800218e:	400a      	ands	r2, r1
 8002190:	601a      	str	r2, [r3, #0]
 8002192:	4b9f      	ldr	r3, [pc, #636]	@ (8002410 <HAL_RCC_OscConfig+0x32c>)
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	4b9e      	ldr	r3, [pc, #632]	@ (8002410 <HAL_RCC_OscConfig+0x32c>)
 8002198:	499f      	ldr	r1, [pc, #636]	@ (8002418 <HAL_RCC_OscConfig+0x334>)
 800219a:	400a      	ands	r2, r1
 800219c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d014      	beq.n	80021d0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a6:	f7fe fe4b 	bl	8000e40 <HAL_GetTick>
 80021aa:	0003      	movs	r3, r0
 80021ac:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021b0:	f7fe fe46 	bl	8000e40 <HAL_GetTick>
 80021b4:	0002      	movs	r2, r0
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b64      	cmp	r3, #100	@ 0x64
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e28d      	b.n	80026de <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021c2:	4b93      	ldr	r3, [pc, #588]	@ (8002410 <HAL_RCC_OscConfig+0x32c>)
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	2380      	movs	r3, #128	@ 0x80
 80021c8:	029b      	lsls	r3, r3, #10
 80021ca:	4013      	ands	r3, r2
 80021cc:	d0f0      	beq.n	80021b0 <HAL_RCC_OscConfig+0xcc>
 80021ce:	e015      	b.n	80021fc <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d0:	f7fe fe36 	bl	8000e40 <HAL_GetTick>
 80021d4:	0003      	movs	r3, r0
 80021d6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021d8:	e008      	b.n	80021ec <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021da:	f7fe fe31 	bl	8000e40 <HAL_GetTick>
 80021de:	0002      	movs	r2, r0
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	2b64      	cmp	r3, #100	@ 0x64
 80021e6:	d901      	bls.n	80021ec <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e278      	b.n	80026de <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021ec:	4b88      	ldr	r3, [pc, #544]	@ (8002410 <HAL_RCC_OscConfig+0x32c>)
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	2380      	movs	r3, #128	@ 0x80
 80021f2:	029b      	lsls	r3, r3, #10
 80021f4:	4013      	ands	r3, r2
 80021f6:	d1f0      	bne.n	80021da <HAL_RCC_OscConfig+0xf6>
 80021f8:	e000      	b.n	80021fc <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021fa:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2202      	movs	r2, #2
 8002202:	4013      	ands	r3, r2
 8002204:	d100      	bne.n	8002208 <HAL_RCC_OscConfig+0x124>
 8002206:	e099      	b.n	800233c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002208:	4b81      	ldr	r3, [pc, #516]	@ (8002410 <HAL_RCC_OscConfig+0x32c>)
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	2238      	movs	r2, #56	@ 0x38
 800220e:	4013      	ands	r3, r2
 8002210:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002212:	4b7f      	ldr	r3, [pc, #508]	@ (8002410 <HAL_RCC_OscConfig+0x32c>)
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	2203      	movs	r2, #3
 8002218:	4013      	ands	r3, r2
 800221a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	2b10      	cmp	r3, #16
 8002220:	d102      	bne.n	8002228 <HAL_RCC_OscConfig+0x144>
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	2b02      	cmp	r3, #2
 8002226:	d002      	beq.n	800222e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d135      	bne.n	800229a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800222e:	4b78      	ldr	r3, [pc, #480]	@ (8002410 <HAL_RCC_OscConfig+0x32c>)
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	2380      	movs	r3, #128	@ 0x80
 8002234:	00db      	lsls	r3, r3, #3
 8002236:	4013      	ands	r3, r2
 8002238:	d005      	beq.n	8002246 <HAL_RCC_OscConfig+0x162>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d101      	bne.n	8002246 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e24b      	b.n	80026de <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002246:	4b72      	ldr	r3, [pc, #456]	@ (8002410 <HAL_RCC_OscConfig+0x32c>)
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	4a74      	ldr	r2, [pc, #464]	@ (800241c <HAL_RCC_OscConfig+0x338>)
 800224c:	4013      	ands	r3, r2
 800224e:	0019      	movs	r1, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	695b      	ldr	r3, [r3, #20]
 8002254:	021a      	lsls	r2, r3, #8
 8002256:	4b6e      	ldr	r3, [pc, #440]	@ (8002410 <HAL_RCC_OscConfig+0x32c>)
 8002258:	430a      	orrs	r2, r1
 800225a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d112      	bne.n	8002288 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002262:	4b6b      	ldr	r3, [pc, #428]	@ (8002410 <HAL_RCC_OscConfig+0x32c>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a6e      	ldr	r2, [pc, #440]	@ (8002420 <HAL_RCC_OscConfig+0x33c>)
 8002268:	4013      	ands	r3, r2
 800226a:	0019      	movs	r1, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	691a      	ldr	r2, [r3, #16]
 8002270:	4b67      	ldr	r3, [pc, #412]	@ (8002410 <HAL_RCC_OscConfig+0x32c>)
 8002272:	430a      	orrs	r2, r1
 8002274:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002276:	4b66      	ldr	r3, [pc, #408]	@ (8002410 <HAL_RCC_OscConfig+0x32c>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	0adb      	lsrs	r3, r3, #11
 800227c:	2207      	movs	r2, #7
 800227e:	4013      	ands	r3, r2
 8002280:	4a68      	ldr	r2, [pc, #416]	@ (8002424 <HAL_RCC_OscConfig+0x340>)
 8002282:	40da      	lsrs	r2, r3
 8002284:	4b68      	ldr	r3, [pc, #416]	@ (8002428 <HAL_RCC_OscConfig+0x344>)
 8002286:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002288:	4b68      	ldr	r3, [pc, #416]	@ (800242c <HAL_RCC_OscConfig+0x348>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	0018      	movs	r0, r3
 800228e:	f7fe fd7b 	bl	8000d88 <HAL_InitTick>
 8002292:	1e03      	subs	r3, r0, #0
 8002294:	d051      	beq.n	800233a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e221      	b.n	80026de <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d030      	beq.n	8002304 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80022a2:	4b5b      	ldr	r3, [pc, #364]	@ (8002410 <HAL_RCC_OscConfig+0x32c>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a5e      	ldr	r2, [pc, #376]	@ (8002420 <HAL_RCC_OscConfig+0x33c>)
 80022a8:	4013      	ands	r3, r2
 80022aa:	0019      	movs	r1, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	691a      	ldr	r2, [r3, #16]
 80022b0:	4b57      	ldr	r3, [pc, #348]	@ (8002410 <HAL_RCC_OscConfig+0x32c>)
 80022b2:	430a      	orrs	r2, r1
 80022b4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80022b6:	4b56      	ldr	r3, [pc, #344]	@ (8002410 <HAL_RCC_OscConfig+0x32c>)
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	4b55      	ldr	r3, [pc, #340]	@ (8002410 <HAL_RCC_OscConfig+0x32c>)
 80022bc:	2180      	movs	r1, #128	@ 0x80
 80022be:	0049      	lsls	r1, r1, #1
 80022c0:	430a      	orrs	r2, r1
 80022c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c4:	f7fe fdbc 	bl	8000e40 <HAL_GetTick>
 80022c8:	0003      	movs	r3, r0
 80022ca:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022cc:	e008      	b.n	80022e0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022ce:	f7fe fdb7 	bl	8000e40 <HAL_GetTick>
 80022d2:	0002      	movs	r2, r0
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d901      	bls.n	80022e0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e1fe      	b.n	80026de <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022e0:	4b4b      	ldr	r3, [pc, #300]	@ (8002410 <HAL_RCC_OscConfig+0x32c>)
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	2380      	movs	r3, #128	@ 0x80
 80022e6:	00db      	lsls	r3, r3, #3
 80022e8:	4013      	ands	r3, r2
 80022ea:	d0f0      	beq.n	80022ce <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ec:	4b48      	ldr	r3, [pc, #288]	@ (8002410 <HAL_RCC_OscConfig+0x32c>)
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	4a4a      	ldr	r2, [pc, #296]	@ (800241c <HAL_RCC_OscConfig+0x338>)
 80022f2:	4013      	ands	r3, r2
 80022f4:	0019      	movs	r1, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	021a      	lsls	r2, r3, #8
 80022fc:	4b44      	ldr	r3, [pc, #272]	@ (8002410 <HAL_RCC_OscConfig+0x32c>)
 80022fe:	430a      	orrs	r2, r1
 8002300:	605a      	str	r2, [r3, #4]
 8002302:	e01b      	b.n	800233c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002304:	4b42      	ldr	r3, [pc, #264]	@ (8002410 <HAL_RCC_OscConfig+0x32c>)
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	4b41      	ldr	r3, [pc, #260]	@ (8002410 <HAL_RCC_OscConfig+0x32c>)
 800230a:	4949      	ldr	r1, [pc, #292]	@ (8002430 <HAL_RCC_OscConfig+0x34c>)
 800230c:	400a      	ands	r2, r1
 800230e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002310:	f7fe fd96 	bl	8000e40 <HAL_GetTick>
 8002314:	0003      	movs	r3, r0
 8002316:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002318:	e008      	b.n	800232c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800231a:	f7fe fd91 	bl	8000e40 <HAL_GetTick>
 800231e:	0002      	movs	r2, r0
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	2b02      	cmp	r3, #2
 8002326:	d901      	bls.n	800232c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e1d8      	b.n	80026de <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800232c:	4b38      	ldr	r3, [pc, #224]	@ (8002410 <HAL_RCC_OscConfig+0x32c>)
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	2380      	movs	r3, #128	@ 0x80
 8002332:	00db      	lsls	r3, r3, #3
 8002334:	4013      	ands	r3, r2
 8002336:	d1f0      	bne.n	800231a <HAL_RCC_OscConfig+0x236>
 8002338:	e000      	b.n	800233c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800233a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2208      	movs	r2, #8
 8002342:	4013      	ands	r3, r2
 8002344:	d047      	beq.n	80023d6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002346:	4b32      	ldr	r3, [pc, #200]	@ (8002410 <HAL_RCC_OscConfig+0x32c>)
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	2238      	movs	r2, #56	@ 0x38
 800234c:	4013      	ands	r3, r2
 800234e:	2b18      	cmp	r3, #24
 8002350:	d10a      	bne.n	8002368 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002352:	4b2f      	ldr	r3, [pc, #188]	@ (8002410 <HAL_RCC_OscConfig+0x32c>)
 8002354:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002356:	2202      	movs	r2, #2
 8002358:	4013      	ands	r3, r2
 800235a:	d03c      	beq.n	80023d6 <HAL_RCC_OscConfig+0x2f2>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d138      	bne.n	80023d6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e1ba      	b.n	80026de <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	699b      	ldr	r3, [r3, #24]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d019      	beq.n	80023a4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002370:	4b27      	ldr	r3, [pc, #156]	@ (8002410 <HAL_RCC_OscConfig+0x32c>)
 8002372:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002374:	4b26      	ldr	r3, [pc, #152]	@ (8002410 <HAL_RCC_OscConfig+0x32c>)
 8002376:	2101      	movs	r1, #1
 8002378:	430a      	orrs	r2, r1
 800237a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800237c:	f7fe fd60 	bl	8000e40 <HAL_GetTick>
 8002380:	0003      	movs	r3, r0
 8002382:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002384:	e008      	b.n	8002398 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002386:	f7fe fd5b 	bl	8000e40 <HAL_GetTick>
 800238a:	0002      	movs	r2, r0
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	2b02      	cmp	r3, #2
 8002392:	d901      	bls.n	8002398 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e1a2      	b.n	80026de <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002398:	4b1d      	ldr	r3, [pc, #116]	@ (8002410 <HAL_RCC_OscConfig+0x32c>)
 800239a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800239c:	2202      	movs	r2, #2
 800239e:	4013      	ands	r3, r2
 80023a0:	d0f1      	beq.n	8002386 <HAL_RCC_OscConfig+0x2a2>
 80023a2:	e018      	b.n	80023d6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80023a4:	4b1a      	ldr	r3, [pc, #104]	@ (8002410 <HAL_RCC_OscConfig+0x32c>)
 80023a6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80023a8:	4b19      	ldr	r3, [pc, #100]	@ (8002410 <HAL_RCC_OscConfig+0x32c>)
 80023aa:	2101      	movs	r1, #1
 80023ac:	438a      	bics	r2, r1
 80023ae:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b0:	f7fe fd46 	bl	8000e40 <HAL_GetTick>
 80023b4:	0003      	movs	r3, r0
 80023b6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023b8:	e008      	b.n	80023cc <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023ba:	f7fe fd41 	bl	8000e40 <HAL_GetTick>
 80023be:	0002      	movs	r2, r0
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d901      	bls.n	80023cc <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e188      	b.n	80026de <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023cc:	4b10      	ldr	r3, [pc, #64]	@ (8002410 <HAL_RCC_OscConfig+0x32c>)
 80023ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023d0:	2202      	movs	r2, #2
 80023d2:	4013      	ands	r3, r2
 80023d4:	d1f1      	bne.n	80023ba <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2204      	movs	r2, #4
 80023dc:	4013      	ands	r3, r2
 80023de:	d100      	bne.n	80023e2 <HAL_RCC_OscConfig+0x2fe>
 80023e0:	e0c6      	b.n	8002570 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023e2:	231f      	movs	r3, #31
 80023e4:	18fb      	adds	r3, r7, r3
 80023e6:	2200      	movs	r2, #0
 80023e8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80023ea:	4b09      	ldr	r3, [pc, #36]	@ (8002410 <HAL_RCC_OscConfig+0x32c>)
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	2238      	movs	r2, #56	@ 0x38
 80023f0:	4013      	ands	r3, r2
 80023f2:	2b20      	cmp	r3, #32
 80023f4:	d11e      	bne.n	8002434 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80023f6:	4b06      	ldr	r3, [pc, #24]	@ (8002410 <HAL_RCC_OscConfig+0x32c>)
 80023f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023fa:	2202      	movs	r2, #2
 80023fc:	4013      	ands	r3, r2
 80023fe:	d100      	bne.n	8002402 <HAL_RCC_OscConfig+0x31e>
 8002400:	e0b6      	b.n	8002570 <HAL_RCC_OscConfig+0x48c>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d000      	beq.n	800240c <HAL_RCC_OscConfig+0x328>
 800240a:	e0b1      	b.n	8002570 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e166      	b.n	80026de <HAL_RCC_OscConfig+0x5fa>
 8002410:	40021000 	.word	0x40021000
 8002414:	fffeffff 	.word	0xfffeffff
 8002418:	fffbffff 	.word	0xfffbffff
 800241c:	ffff80ff 	.word	0xffff80ff
 8002420:	ffffc7ff 	.word	0xffffc7ff
 8002424:	00f42400 	.word	0x00f42400
 8002428:	20000004 	.word	0x20000004
 800242c:	20000008 	.word	0x20000008
 8002430:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002434:	4bac      	ldr	r3, [pc, #688]	@ (80026e8 <HAL_RCC_OscConfig+0x604>)
 8002436:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002438:	2380      	movs	r3, #128	@ 0x80
 800243a:	055b      	lsls	r3, r3, #21
 800243c:	4013      	ands	r3, r2
 800243e:	d101      	bne.n	8002444 <HAL_RCC_OscConfig+0x360>
 8002440:	2301      	movs	r3, #1
 8002442:	e000      	b.n	8002446 <HAL_RCC_OscConfig+0x362>
 8002444:	2300      	movs	r3, #0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d011      	beq.n	800246e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800244a:	4ba7      	ldr	r3, [pc, #668]	@ (80026e8 <HAL_RCC_OscConfig+0x604>)
 800244c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800244e:	4ba6      	ldr	r3, [pc, #664]	@ (80026e8 <HAL_RCC_OscConfig+0x604>)
 8002450:	2180      	movs	r1, #128	@ 0x80
 8002452:	0549      	lsls	r1, r1, #21
 8002454:	430a      	orrs	r2, r1
 8002456:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002458:	4ba3      	ldr	r3, [pc, #652]	@ (80026e8 <HAL_RCC_OscConfig+0x604>)
 800245a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800245c:	2380      	movs	r3, #128	@ 0x80
 800245e:	055b      	lsls	r3, r3, #21
 8002460:	4013      	ands	r3, r2
 8002462:	60fb      	str	r3, [r7, #12]
 8002464:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002466:	231f      	movs	r3, #31
 8002468:	18fb      	adds	r3, r7, r3
 800246a:	2201      	movs	r2, #1
 800246c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800246e:	4b9f      	ldr	r3, [pc, #636]	@ (80026ec <HAL_RCC_OscConfig+0x608>)
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	2380      	movs	r3, #128	@ 0x80
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	4013      	ands	r3, r2
 8002478:	d11a      	bne.n	80024b0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800247a:	4b9c      	ldr	r3, [pc, #624]	@ (80026ec <HAL_RCC_OscConfig+0x608>)
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	4b9b      	ldr	r3, [pc, #620]	@ (80026ec <HAL_RCC_OscConfig+0x608>)
 8002480:	2180      	movs	r1, #128	@ 0x80
 8002482:	0049      	lsls	r1, r1, #1
 8002484:	430a      	orrs	r2, r1
 8002486:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002488:	f7fe fcda 	bl	8000e40 <HAL_GetTick>
 800248c:	0003      	movs	r3, r0
 800248e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002490:	e008      	b.n	80024a4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002492:	f7fe fcd5 	bl	8000e40 <HAL_GetTick>
 8002496:	0002      	movs	r2, r0
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	2b02      	cmp	r3, #2
 800249e:	d901      	bls.n	80024a4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e11c      	b.n	80026de <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024a4:	4b91      	ldr	r3, [pc, #580]	@ (80026ec <HAL_RCC_OscConfig+0x608>)
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	2380      	movs	r3, #128	@ 0x80
 80024aa:	005b      	lsls	r3, r3, #1
 80024ac:	4013      	ands	r3, r2
 80024ae:	d0f0      	beq.n	8002492 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d106      	bne.n	80024c6 <HAL_RCC_OscConfig+0x3e2>
 80024b8:	4b8b      	ldr	r3, [pc, #556]	@ (80026e8 <HAL_RCC_OscConfig+0x604>)
 80024ba:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80024bc:	4b8a      	ldr	r3, [pc, #552]	@ (80026e8 <HAL_RCC_OscConfig+0x604>)
 80024be:	2101      	movs	r1, #1
 80024c0:	430a      	orrs	r2, r1
 80024c2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80024c4:	e01c      	b.n	8002500 <HAL_RCC_OscConfig+0x41c>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	2b05      	cmp	r3, #5
 80024cc:	d10c      	bne.n	80024e8 <HAL_RCC_OscConfig+0x404>
 80024ce:	4b86      	ldr	r3, [pc, #536]	@ (80026e8 <HAL_RCC_OscConfig+0x604>)
 80024d0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80024d2:	4b85      	ldr	r3, [pc, #532]	@ (80026e8 <HAL_RCC_OscConfig+0x604>)
 80024d4:	2104      	movs	r1, #4
 80024d6:	430a      	orrs	r2, r1
 80024d8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80024da:	4b83      	ldr	r3, [pc, #524]	@ (80026e8 <HAL_RCC_OscConfig+0x604>)
 80024dc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80024de:	4b82      	ldr	r3, [pc, #520]	@ (80026e8 <HAL_RCC_OscConfig+0x604>)
 80024e0:	2101      	movs	r1, #1
 80024e2:	430a      	orrs	r2, r1
 80024e4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80024e6:	e00b      	b.n	8002500 <HAL_RCC_OscConfig+0x41c>
 80024e8:	4b7f      	ldr	r3, [pc, #508]	@ (80026e8 <HAL_RCC_OscConfig+0x604>)
 80024ea:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80024ec:	4b7e      	ldr	r3, [pc, #504]	@ (80026e8 <HAL_RCC_OscConfig+0x604>)
 80024ee:	2101      	movs	r1, #1
 80024f0:	438a      	bics	r2, r1
 80024f2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80024f4:	4b7c      	ldr	r3, [pc, #496]	@ (80026e8 <HAL_RCC_OscConfig+0x604>)
 80024f6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80024f8:	4b7b      	ldr	r3, [pc, #492]	@ (80026e8 <HAL_RCC_OscConfig+0x604>)
 80024fa:	2104      	movs	r1, #4
 80024fc:	438a      	bics	r2, r1
 80024fe:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d014      	beq.n	8002532 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002508:	f7fe fc9a 	bl	8000e40 <HAL_GetTick>
 800250c:	0003      	movs	r3, r0
 800250e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002510:	e009      	b.n	8002526 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002512:	f7fe fc95 	bl	8000e40 <HAL_GetTick>
 8002516:	0002      	movs	r2, r0
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	4a74      	ldr	r2, [pc, #464]	@ (80026f0 <HAL_RCC_OscConfig+0x60c>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d901      	bls.n	8002526 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e0db      	b.n	80026de <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002526:	4b70      	ldr	r3, [pc, #448]	@ (80026e8 <HAL_RCC_OscConfig+0x604>)
 8002528:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800252a:	2202      	movs	r2, #2
 800252c:	4013      	ands	r3, r2
 800252e:	d0f0      	beq.n	8002512 <HAL_RCC_OscConfig+0x42e>
 8002530:	e013      	b.n	800255a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002532:	f7fe fc85 	bl	8000e40 <HAL_GetTick>
 8002536:	0003      	movs	r3, r0
 8002538:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800253a:	e009      	b.n	8002550 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800253c:	f7fe fc80 	bl	8000e40 <HAL_GetTick>
 8002540:	0002      	movs	r2, r0
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	4a6a      	ldr	r2, [pc, #424]	@ (80026f0 <HAL_RCC_OscConfig+0x60c>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d901      	bls.n	8002550 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e0c6      	b.n	80026de <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002550:	4b65      	ldr	r3, [pc, #404]	@ (80026e8 <HAL_RCC_OscConfig+0x604>)
 8002552:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002554:	2202      	movs	r2, #2
 8002556:	4013      	ands	r3, r2
 8002558:	d1f0      	bne.n	800253c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800255a:	231f      	movs	r3, #31
 800255c:	18fb      	adds	r3, r7, r3
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	2b01      	cmp	r3, #1
 8002562:	d105      	bne.n	8002570 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002564:	4b60      	ldr	r3, [pc, #384]	@ (80026e8 <HAL_RCC_OscConfig+0x604>)
 8002566:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002568:	4b5f      	ldr	r3, [pc, #380]	@ (80026e8 <HAL_RCC_OscConfig+0x604>)
 800256a:	4962      	ldr	r1, [pc, #392]	@ (80026f4 <HAL_RCC_OscConfig+0x610>)
 800256c:	400a      	ands	r2, r1
 800256e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	69db      	ldr	r3, [r3, #28]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d100      	bne.n	800257a <HAL_RCC_OscConfig+0x496>
 8002578:	e0b0      	b.n	80026dc <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800257a:	4b5b      	ldr	r3, [pc, #364]	@ (80026e8 <HAL_RCC_OscConfig+0x604>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	2238      	movs	r2, #56	@ 0x38
 8002580:	4013      	ands	r3, r2
 8002582:	2b10      	cmp	r3, #16
 8002584:	d100      	bne.n	8002588 <HAL_RCC_OscConfig+0x4a4>
 8002586:	e078      	b.n	800267a <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	69db      	ldr	r3, [r3, #28]
 800258c:	2b02      	cmp	r3, #2
 800258e:	d153      	bne.n	8002638 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002590:	4b55      	ldr	r3, [pc, #340]	@ (80026e8 <HAL_RCC_OscConfig+0x604>)
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	4b54      	ldr	r3, [pc, #336]	@ (80026e8 <HAL_RCC_OscConfig+0x604>)
 8002596:	4958      	ldr	r1, [pc, #352]	@ (80026f8 <HAL_RCC_OscConfig+0x614>)
 8002598:	400a      	ands	r2, r1
 800259a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800259c:	f7fe fc50 	bl	8000e40 <HAL_GetTick>
 80025a0:	0003      	movs	r3, r0
 80025a2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025a4:	e008      	b.n	80025b8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025a6:	f7fe fc4b 	bl	8000e40 <HAL_GetTick>
 80025aa:	0002      	movs	r2, r0
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d901      	bls.n	80025b8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e092      	b.n	80026de <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025b8:	4b4b      	ldr	r3, [pc, #300]	@ (80026e8 <HAL_RCC_OscConfig+0x604>)
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	2380      	movs	r3, #128	@ 0x80
 80025be:	049b      	lsls	r3, r3, #18
 80025c0:	4013      	ands	r3, r2
 80025c2:	d1f0      	bne.n	80025a6 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025c4:	4b48      	ldr	r3, [pc, #288]	@ (80026e8 <HAL_RCC_OscConfig+0x604>)
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	4a4c      	ldr	r2, [pc, #304]	@ (80026fc <HAL_RCC_OscConfig+0x618>)
 80025ca:	4013      	ands	r3, r2
 80025cc:	0019      	movs	r1, r3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a1a      	ldr	r2, [r3, #32]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d6:	431a      	orrs	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025dc:	021b      	lsls	r3, r3, #8
 80025de:	431a      	orrs	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025e4:	431a      	orrs	r2, r3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ea:	431a      	orrs	r2, r3
 80025ec:	4b3e      	ldr	r3, [pc, #248]	@ (80026e8 <HAL_RCC_OscConfig+0x604>)
 80025ee:	430a      	orrs	r2, r1
 80025f0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025f2:	4b3d      	ldr	r3, [pc, #244]	@ (80026e8 <HAL_RCC_OscConfig+0x604>)
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	4b3c      	ldr	r3, [pc, #240]	@ (80026e8 <HAL_RCC_OscConfig+0x604>)
 80025f8:	2180      	movs	r1, #128	@ 0x80
 80025fa:	0449      	lsls	r1, r1, #17
 80025fc:	430a      	orrs	r2, r1
 80025fe:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002600:	4b39      	ldr	r3, [pc, #228]	@ (80026e8 <HAL_RCC_OscConfig+0x604>)
 8002602:	68da      	ldr	r2, [r3, #12]
 8002604:	4b38      	ldr	r3, [pc, #224]	@ (80026e8 <HAL_RCC_OscConfig+0x604>)
 8002606:	2180      	movs	r1, #128	@ 0x80
 8002608:	0549      	lsls	r1, r1, #21
 800260a:	430a      	orrs	r2, r1
 800260c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800260e:	f7fe fc17 	bl	8000e40 <HAL_GetTick>
 8002612:	0003      	movs	r3, r0
 8002614:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002616:	e008      	b.n	800262a <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002618:	f7fe fc12 	bl	8000e40 <HAL_GetTick>
 800261c:	0002      	movs	r2, r0
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	2b02      	cmp	r3, #2
 8002624:	d901      	bls.n	800262a <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e059      	b.n	80026de <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800262a:	4b2f      	ldr	r3, [pc, #188]	@ (80026e8 <HAL_RCC_OscConfig+0x604>)
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	2380      	movs	r3, #128	@ 0x80
 8002630:	049b      	lsls	r3, r3, #18
 8002632:	4013      	ands	r3, r2
 8002634:	d0f0      	beq.n	8002618 <HAL_RCC_OscConfig+0x534>
 8002636:	e051      	b.n	80026dc <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002638:	4b2b      	ldr	r3, [pc, #172]	@ (80026e8 <HAL_RCC_OscConfig+0x604>)
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	4b2a      	ldr	r3, [pc, #168]	@ (80026e8 <HAL_RCC_OscConfig+0x604>)
 800263e:	492e      	ldr	r1, [pc, #184]	@ (80026f8 <HAL_RCC_OscConfig+0x614>)
 8002640:	400a      	ands	r2, r1
 8002642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002644:	f7fe fbfc 	bl	8000e40 <HAL_GetTick>
 8002648:	0003      	movs	r3, r0
 800264a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800264c:	e008      	b.n	8002660 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800264e:	f7fe fbf7 	bl	8000e40 <HAL_GetTick>
 8002652:	0002      	movs	r2, r0
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	2b02      	cmp	r3, #2
 800265a:	d901      	bls.n	8002660 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e03e      	b.n	80026de <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002660:	4b21      	ldr	r3, [pc, #132]	@ (80026e8 <HAL_RCC_OscConfig+0x604>)
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	2380      	movs	r3, #128	@ 0x80
 8002666:	049b      	lsls	r3, r3, #18
 8002668:	4013      	ands	r3, r2
 800266a:	d1f0      	bne.n	800264e <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 800266c:	4b1e      	ldr	r3, [pc, #120]	@ (80026e8 <HAL_RCC_OscConfig+0x604>)
 800266e:	68da      	ldr	r2, [r3, #12]
 8002670:	4b1d      	ldr	r3, [pc, #116]	@ (80026e8 <HAL_RCC_OscConfig+0x604>)
 8002672:	4923      	ldr	r1, [pc, #140]	@ (8002700 <HAL_RCC_OscConfig+0x61c>)
 8002674:	400a      	ands	r2, r1
 8002676:	60da      	str	r2, [r3, #12]
 8002678:	e030      	b.n	80026dc <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	69db      	ldr	r3, [r3, #28]
 800267e:	2b01      	cmp	r3, #1
 8002680:	d101      	bne.n	8002686 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e02b      	b.n	80026de <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002686:	4b18      	ldr	r3, [pc, #96]	@ (80026e8 <HAL_RCC_OscConfig+0x604>)
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	2203      	movs	r2, #3
 8002690:	401a      	ands	r2, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a1b      	ldr	r3, [r3, #32]
 8002696:	429a      	cmp	r2, r3
 8002698:	d11e      	bne.n	80026d8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	2270      	movs	r2, #112	@ 0x70
 800269e:	401a      	ands	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d117      	bne.n	80026d8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026a8:	697a      	ldr	r2, [r7, #20]
 80026aa:	23fe      	movs	r3, #254	@ 0xfe
 80026ac:	01db      	lsls	r3, r3, #7
 80026ae:	401a      	ands	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026b4:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d10e      	bne.n	80026d8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80026ba:	697a      	ldr	r2, [r7, #20]
 80026bc:	23f8      	movs	r3, #248	@ 0xf8
 80026be:	039b      	lsls	r3, r3, #14
 80026c0:	401a      	ands	r2, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d106      	bne.n	80026d8 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	0f5b      	lsrs	r3, r3, #29
 80026ce:	075a      	lsls	r2, r3, #29
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d001      	beq.n	80026dc <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e000      	b.n	80026de <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 80026dc:	2300      	movs	r3, #0
}
 80026de:	0018      	movs	r0, r3
 80026e0:	46bd      	mov	sp, r7
 80026e2:	b008      	add	sp, #32
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	46c0      	nop			@ (mov r8, r8)
 80026e8:	40021000 	.word	0x40021000
 80026ec:	40007000 	.word	0x40007000
 80026f0:	00001388 	.word	0x00001388
 80026f4:	efffffff 	.word	0xefffffff
 80026f8:	feffffff 	.word	0xfeffffff
 80026fc:	1fc1808c 	.word	0x1fc1808c
 8002700:	effefffc 	.word	0xeffefffc

08002704 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d101      	bne.n	8002718 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e0e9      	b.n	80028ec <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002718:	4b76      	ldr	r3, [pc, #472]	@ (80028f4 <HAL_RCC_ClockConfig+0x1f0>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2207      	movs	r2, #7
 800271e:	4013      	ands	r3, r2
 8002720:	683a      	ldr	r2, [r7, #0]
 8002722:	429a      	cmp	r2, r3
 8002724:	d91e      	bls.n	8002764 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002726:	4b73      	ldr	r3, [pc, #460]	@ (80028f4 <HAL_RCC_ClockConfig+0x1f0>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	2207      	movs	r2, #7
 800272c:	4393      	bics	r3, r2
 800272e:	0019      	movs	r1, r3
 8002730:	4b70      	ldr	r3, [pc, #448]	@ (80028f4 <HAL_RCC_ClockConfig+0x1f0>)
 8002732:	683a      	ldr	r2, [r7, #0]
 8002734:	430a      	orrs	r2, r1
 8002736:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002738:	f7fe fb82 	bl	8000e40 <HAL_GetTick>
 800273c:	0003      	movs	r3, r0
 800273e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002740:	e009      	b.n	8002756 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002742:	f7fe fb7d 	bl	8000e40 <HAL_GetTick>
 8002746:	0002      	movs	r2, r0
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	4a6a      	ldr	r2, [pc, #424]	@ (80028f8 <HAL_RCC_ClockConfig+0x1f4>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d901      	bls.n	8002756 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e0ca      	b.n	80028ec <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002756:	4b67      	ldr	r3, [pc, #412]	@ (80028f4 <HAL_RCC_ClockConfig+0x1f0>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2207      	movs	r2, #7
 800275c:	4013      	ands	r3, r2
 800275e:	683a      	ldr	r2, [r7, #0]
 8002760:	429a      	cmp	r2, r3
 8002762:	d1ee      	bne.n	8002742 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2202      	movs	r2, #2
 800276a:	4013      	ands	r3, r2
 800276c:	d015      	beq.n	800279a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2204      	movs	r2, #4
 8002774:	4013      	ands	r3, r2
 8002776:	d006      	beq.n	8002786 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002778:	4b60      	ldr	r3, [pc, #384]	@ (80028fc <HAL_RCC_ClockConfig+0x1f8>)
 800277a:	689a      	ldr	r2, [r3, #8]
 800277c:	4b5f      	ldr	r3, [pc, #380]	@ (80028fc <HAL_RCC_ClockConfig+0x1f8>)
 800277e:	21e0      	movs	r1, #224	@ 0xe0
 8002780:	01c9      	lsls	r1, r1, #7
 8002782:	430a      	orrs	r2, r1
 8002784:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002786:	4b5d      	ldr	r3, [pc, #372]	@ (80028fc <HAL_RCC_ClockConfig+0x1f8>)
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	4a5d      	ldr	r2, [pc, #372]	@ (8002900 <HAL_RCC_ClockConfig+0x1fc>)
 800278c:	4013      	ands	r3, r2
 800278e:	0019      	movs	r1, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689a      	ldr	r2, [r3, #8]
 8002794:	4b59      	ldr	r3, [pc, #356]	@ (80028fc <HAL_RCC_ClockConfig+0x1f8>)
 8002796:	430a      	orrs	r2, r1
 8002798:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2201      	movs	r2, #1
 80027a0:	4013      	ands	r3, r2
 80027a2:	d057      	beq.n	8002854 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d107      	bne.n	80027bc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027ac:	4b53      	ldr	r3, [pc, #332]	@ (80028fc <HAL_RCC_ClockConfig+0x1f8>)
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	2380      	movs	r3, #128	@ 0x80
 80027b2:	029b      	lsls	r3, r3, #10
 80027b4:	4013      	ands	r3, r2
 80027b6:	d12b      	bne.n	8002810 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e097      	b.n	80028ec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d107      	bne.n	80027d4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027c4:	4b4d      	ldr	r3, [pc, #308]	@ (80028fc <HAL_RCC_ClockConfig+0x1f8>)
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	2380      	movs	r3, #128	@ 0x80
 80027ca:	049b      	lsls	r3, r3, #18
 80027cc:	4013      	ands	r3, r2
 80027ce:	d11f      	bne.n	8002810 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e08b      	b.n	80028ec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d107      	bne.n	80027ec <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027dc:	4b47      	ldr	r3, [pc, #284]	@ (80028fc <HAL_RCC_ClockConfig+0x1f8>)
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	2380      	movs	r3, #128	@ 0x80
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	4013      	ands	r3, r2
 80027e6:	d113      	bne.n	8002810 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e07f      	b.n	80028ec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	2b03      	cmp	r3, #3
 80027f2:	d106      	bne.n	8002802 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027f4:	4b41      	ldr	r3, [pc, #260]	@ (80028fc <HAL_RCC_ClockConfig+0x1f8>)
 80027f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027f8:	2202      	movs	r2, #2
 80027fa:	4013      	ands	r3, r2
 80027fc:	d108      	bne.n	8002810 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e074      	b.n	80028ec <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002802:	4b3e      	ldr	r3, [pc, #248]	@ (80028fc <HAL_RCC_ClockConfig+0x1f8>)
 8002804:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002806:	2202      	movs	r2, #2
 8002808:	4013      	ands	r3, r2
 800280a:	d101      	bne.n	8002810 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e06d      	b.n	80028ec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002810:	4b3a      	ldr	r3, [pc, #232]	@ (80028fc <HAL_RCC_ClockConfig+0x1f8>)
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	2207      	movs	r2, #7
 8002816:	4393      	bics	r3, r2
 8002818:	0019      	movs	r1, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685a      	ldr	r2, [r3, #4]
 800281e:	4b37      	ldr	r3, [pc, #220]	@ (80028fc <HAL_RCC_ClockConfig+0x1f8>)
 8002820:	430a      	orrs	r2, r1
 8002822:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002824:	f7fe fb0c 	bl	8000e40 <HAL_GetTick>
 8002828:	0003      	movs	r3, r0
 800282a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800282c:	e009      	b.n	8002842 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800282e:	f7fe fb07 	bl	8000e40 <HAL_GetTick>
 8002832:	0002      	movs	r2, r0
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	4a2f      	ldr	r2, [pc, #188]	@ (80028f8 <HAL_RCC_ClockConfig+0x1f4>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d901      	bls.n	8002842 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e054      	b.n	80028ec <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002842:	4b2e      	ldr	r3, [pc, #184]	@ (80028fc <HAL_RCC_ClockConfig+0x1f8>)
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	2238      	movs	r2, #56	@ 0x38
 8002848:	401a      	ands	r2, r3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	00db      	lsls	r3, r3, #3
 8002850:	429a      	cmp	r2, r3
 8002852:	d1ec      	bne.n	800282e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002854:	4b27      	ldr	r3, [pc, #156]	@ (80028f4 <HAL_RCC_ClockConfig+0x1f0>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2207      	movs	r2, #7
 800285a:	4013      	ands	r3, r2
 800285c:	683a      	ldr	r2, [r7, #0]
 800285e:	429a      	cmp	r2, r3
 8002860:	d21e      	bcs.n	80028a0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002862:	4b24      	ldr	r3, [pc, #144]	@ (80028f4 <HAL_RCC_ClockConfig+0x1f0>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2207      	movs	r2, #7
 8002868:	4393      	bics	r3, r2
 800286a:	0019      	movs	r1, r3
 800286c:	4b21      	ldr	r3, [pc, #132]	@ (80028f4 <HAL_RCC_ClockConfig+0x1f0>)
 800286e:	683a      	ldr	r2, [r7, #0]
 8002870:	430a      	orrs	r2, r1
 8002872:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002874:	f7fe fae4 	bl	8000e40 <HAL_GetTick>
 8002878:	0003      	movs	r3, r0
 800287a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800287c:	e009      	b.n	8002892 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800287e:	f7fe fadf 	bl	8000e40 <HAL_GetTick>
 8002882:	0002      	movs	r2, r0
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	4a1b      	ldr	r2, [pc, #108]	@ (80028f8 <HAL_RCC_ClockConfig+0x1f4>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d901      	bls.n	8002892 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e02c      	b.n	80028ec <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002892:	4b18      	ldr	r3, [pc, #96]	@ (80028f4 <HAL_RCC_ClockConfig+0x1f0>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2207      	movs	r2, #7
 8002898:	4013      	ands	r3, r2
 800289a:	683a      	ldr	r2, [r7, #0]
 800289c:	429a      	cmp	r2, r3
 800289e:	d1ee      	bne.n	800287e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2204      	movs	r2, #4
 80028a6:	4013      	ands	r3, r2
 80028a8:	d009      	beq.n	80028be <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80028aa:	4b14      	ldr	r3, [pc, #80]	@ (80028fc <HAL_RCC_ClockConfig+0x1f8>)
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	4a15      	ldr	r2, [pc, #84]	@ (8002904 <HAL_RCC_ClockConfig+0x200>)
 80028b0:	4013      	ands	r3, r2
 80028b2:	0019      	movs	r1, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	68da      	ldr	r2, [r3, #12]
 80028b8:	4b10      	ldr	r3, [pc, #64]	@ (80028fc <HAL_RCC_ClockConfig+0x1f8>)
 80028ba:	430a      	orrs	r2, r1
 80028bc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80028be:	f000 f829 	bl	8002914 <HAL_RCC_GetSysClockFreq>
 80028c2:	0001      	movs	r1, r0
 80028c4:	4b0d      	ldr	r3, [pc, #52]	@ (80028fc <HAL_RCC_ClockConfig+0x1f8>)
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	0a1b      	lsrs	r3, r3, #8
 80028ca:	220f      	movs	r2, #15
 80028cc:	401a      	ands	r2, r3
 80028ce:	4b0e      	ldr	r3, [pc, #56]	@ (8002908 <HAL_RCC_ClockConfig+0x204>)
 80028d0:	0092      	lsls	r2, r2, #2
 80028d2:	58d3      	ldr	r3, [r2, r3]
 80028d4:	221f      	movs	r2, #31
 80028d6:	4013      	ands	r3, r2
 80028d8:	000a      	movs	r2, r1
 80028da:	40da      	lsrs	r2, r3
 80028dc:	4b0b      	ldr	r3, [pc, #44]	@ (800290c <HAL_RCC_ClockConfig+0x208>)
 80028de:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80028e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002910 <HAL_RCC_ClockConfig+0x20c>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	0018      	movs	r0, r3
 80028e6:	f7fe fa4f 	bl	8000d88 <HAL_InitTick>
 80028ea:	0003      	movs	r3, r0
}
 80028ec:	0018      	movs	r0, r3
 80028ee:	46bd      	mov	sp, r7
 80028f0:	b004      	add	sp, #16
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	40022000 	.word	0x40022000
 80028f8:	00001388 	.word	0x00001388
 80028fc:	40021000 	.word	0x40021000
 8002900:	fffff0ff 	.word	0xfffff0ff
 8002904:	ffff8fff 	.word	0xffff8fff
 8002908:	0800403c 	.word	0x0800403c
 800290c:	20000004 	.word	0x20000004
 8002910:	20000008 	.word	0x20000008

08002914 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b086      	sub	sp, #24
 8002918:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800291a:	4b3c      	ldr	r3, [pc, #240]	@ (8002a0c <HAL_RCC_GetSysClockFreq+0xf8>)
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	2238      	movs	r2, #56	@ 0x38
 8002920:	4013      	ands	r3, r2
 8002922:	d10f      	bne.n	8002944 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002924:	4b39      	ldr	r3, [pc, #228]	@ (8002a0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	0adb      	lsrs	r3, r3, #11
 800292a:	2207      	movs	r2, #7
 800292c:	4013      	ands	r3, r2
 800292e:	2201      	movs	r2, #1
 8002930:	409a      	lsls	r2, r3
 8002932:	0013      	movs	r3, r2
 8002934:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002936:	6839      	ldr	r1, [r7, #0]
 8002938:	4835      	ldr	r0, [pc, #212]	@ (8002a10 <HAL_RCC_GetSysClockFreq+0xfc>)
 800293a:	f7fd fbf3 	bl	8000124 <__udivsi3>
 800293e:	0003      	movs	r3, r0
 8002940:	613b      	str	r3, [r7, #16]
 8002942:	e05d      	b.n	8002a00 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002944:	4b31      	ldr	r3, [pc, #196]	@ (8002a0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	2238      	movs	r2, #56	@ 0x38
 800294a:	4013      	ands	r3, r2
 800294c:	2b08      	cmp	r3, #8
 800294e:	d102      	bne.n	8002956 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002950:	4b30      	ldr	r3, [pc, #192]	@ (8002a14 <HAL_RCC_GetSysClockFreq+0x100>)
 8002952:	613b      	str	r3, [r7, #16]
 8002954:	e054      	b.n	8002a00 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002956:	4b2d      	ldr	r3, [pc, #180]	@ (8002a0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	2238      	movs	r2, #56	@ 0x38
 800295c:	4013      	ands	r3, r2
 800295e:	2b10      	cmp	r3, #16
 8002960:	d138      	bne.n	80029d4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002962:	4b2a      	ldr	r3, [pc, #168]	@ (8002a0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	2203      	movs	r2, #3
 8002968:	4013      	ands	r3, r2
 800296a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800296c:	4b27      	ldr	r3, [pc, #156]	@ (8002a0c <HAL_RCC_GetSysClockFreq+0xf8>)
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	091b      	lsrs	r3, r3, #4
 8002972:	2207      	movs	r2, #7
 8002974:	4013      	ands	r3, r2
 8002976:	3301      	adds	r3, #1
 8002978:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2b03      	cmp	r3, #3
 800297e:	d10d      	bne.n	800299c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002980:	68b9      	ldr	r1, [r7, #8]
 8002982:	4824      	ldr	r0, [pc, #144]	@ (8002a14 <HAL_RCC_GetSysClockFreq+0x100>)
 8002984:	f7fd fbce 	bl	8000124 <__udivsi3>
 8002988:	0003      	movs	r3, r0
 800298a:	0019      	movs	r1, r3
 800298c:	4b1f      	ldr	r3, [pc, #124]	@ (8002a0c <HAL_RCC_GetSysClockFreq+0xf8>)
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	0a1b      	lsrs	r3, r3, #8
 8002992:	227f      	movs	r2, #127	@ 0x7f
 8002994:	4013      	ands	r3, r2
 8002996:	434b      	muls	r3, r1
 8002998:	617b      	str	r3, [r7, #20]
        break;
 800299a:	e00d      	b.n	80029b8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800299c:	68b9      	ldr	r1, [r7, #8]
 800299e:	481c      	ldr	r0, [pc, #112]	@ (8002a10 <HAL_RCC_GetSysClockFreq+0xfc>)
 80029a0:	f7fd fbc0 	bl	8000124 <__udivsi3>
 80029a4:	0003      	movs	r3, r0
 80029a6:	0019      	movs	r1, r3
 80029a8:	4b18      	ldr	r3, [pc, #96]	@ (8002a0c <HAL_RCC_GetSysClockFreq+0xf8>)
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	0a1b      	lsrs	r3, r3, #8
 80029ae:	227f      	movs	r2, #127	@ 0x7f
 80029b0:	4013      	ands	r3, r2
 80029b2:	434b      	muls	r3, r1
 80029b4:	617b      	str	r3, [r7, #20]
        break;
 80029b6:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80029b8:	4b14      	ldr	r3, [pc, #80]	@ (8002a0c <HAL_RCC_GetSysClockFreq+0xf8>)
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	0f5b      	lsrs	r3, r3, #29
 80029be:	2207      	movs	r2, #7
 80029c0:	4013      	ands	r3, r2
 80029c2:	3301      	adds	r3, #1
 80029c4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80029c6:	6879      	ldr	r1, [r7, #4]
 80029c8:	6978      	ldr	r0, [r7, #20]
 80029ca:	f7fd fbab 	bl	8000124 <__udivsi3>
 80029ce:	0003      	movs	r3, r0
 80029d0:	613b      	str	r3, [r7, #16]
 80029d2:	e015      	b.n	8002a00 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80029d4:	4b0d      	ldr	r3, [pc, #52]	@ (8002a0c <HAL_RCC_GetSysClockFreq+0xf8>)
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	2238      	movs	r2, #56	@ 0x38
 80029da:	4013      	ands	r3, r2
 80029dc:	2b20      	cmp	r3, #32
 80029de:	d103      	bne.n	80029e8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80029e0:	2380      	movs	r3, #128	@ 0x80
 80029e2:	021b      	lsls	r3, r3, #8
 80029e4:	613b      	str	r3, [r7, #16]
 80029e6:	e00b      	b.n	8002a00 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80029e8:	4b08      	ldr	r3, [pc, #32]	@ (8002a0c <HAL_RCC_GetSysClockFreq+0xf8>)
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	2238      	movs	r2, #56	@ 0x38
 80029ee:	4013      	ands	r3, r2
 80029f0:	2b18      	cmp	r3, #24
 80029f2:	d103      	bne.n	80029fc <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80029f4:	23fa      	movs	r3, #250	@ 0xfa
 80029f6:	01db      	lsls	r3, r3, #7
 80029f8:	613b      	str	r3, [r7, #16]
 80029fa:	e001      	b.n	8002a00 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80029fc:	2300      	movs	r3, #0
 80029fe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002a00:	693b      	ldr	r3, [r7, #16]
}
 8002a02:	0018      	movs	r0, r3
 8002a04:	46bd      	mov	sp, r7
 8002a06:	b006      	add	sp, #24
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	46c0      	nop			@ (mov r8, r8)
 8002a0c:	40021000 	.word	0x40021000
 8002a10:	00f42400 	.word	0x00f42400
 8002a14:	007a1200 	.word	0x007a1200

08002a18 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a1c:	4b02      	ldr	r3, [pc, #8]	@ (8002a28 <HAL_RCC_GetHCLKFreq+0x10>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
}
 8002a20:	0018      	movs	r0, r3
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	46c0      	nop			@ (mov r8, r8)
 8002a28:	20000004 	.word	0x20000004

08002a2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a2c:	b5b0      	push	{r4, r5, r7, lr}
 8002a2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002a30:	f7ff fff2 	bl	8002a18 <HAL_RCC_GetHCLKFreq>
 8002a34:	0004      	movs	r4, r0
 8002a36:	f7ff fb49 	bl	80020cc <LL_RCC_GetAPB1Prescaler>
 8002a3a:	0003      	movs	r3, r0
 8002a3c:	0b1a      	lsrs	r2, r3, #12
 8002a3e:	4b05      	ldr	r3, [pc, #20]	@ (8002a54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a40:	0092      	lsls	r2, r2, #2
 8002a42:	58d3      	ldr	r3, [r2, r3]
 8002a44:	221f      	movs	r2, #31
 8002a46:	4013      	ands	r3, r2
 8002a48:	40dc      	lsrs	r4, r3
 8002a4a:	0023      	movs	r3, r4
}
 8002a4c:	0018      	movs	r0, r3
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bdb0      	pop	{r4, r5, r7, pc}
 8002a52:	46c0      	nop			@ (mov r8, r8)
 8002a54:	0800407c 	.word	0x0800407c

08002a58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b086      	sub	sp, #24
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002a60:	2313      	movs	r3, #19
 8002a62:	18fb      	adds	r3, r7, r3
 8002a64:	2200      	movs	r2, #0
 8002a66:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a68:	2312      	movs	r3, #18
 8002a6a:	18fb      	adds	r3, r7, r3
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	2380      	movs	r3, #128	@ 0x80
 8002a76:	029b      	lsls	r3, r3, #10
 8002a78:	4013      	ands	r3, r2
 8002a7a:	d100      	bne.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002a7c:	e0a3      	b.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a7e:	2011      	movs	r0, #17
 8002a80:	183b      	adds	r3, r7, r0
 8002a82:	2200      	movs	r2, #0
 8002a84:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a86:	4b7f      	ldr	r3, [pc, #508]	@ (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002a88:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a8a:	2380      	movs	r3, #128	@ 0x80
 8002a8c:	055b      	lsls	r3, r3, #21
 8002a8e:	4013      	ands	r3, r2
 8002a90:	d110      	bne.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a92:	4b7c      	ldr	r3, [pc, #496]	@ (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002a94:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a96:	4b7b      	ldr	r3, [pc, #492]	@ (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002a98:	2180      	movs	r1, #128	@ 0x80
 8002a9a:	0549      	lsls	r1, r1, #21
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002aa0:	4b78      	ldr	r3, [pc, #480]	@ (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002aa2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002aa4:	2380      	movs	r3, #128	@ 0x80
 8002aa6:	055b      	lsls	r3, r3, #21
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	60bb      	str	r3, [r7, #8]
 8002aac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002aae:	183b      	adds	r3, r7, r0
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ab4:	4b74      	ldr	r3, [pc, #464]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	4b73      	ldr	r3, [pc, #460]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002aba:	2180      	movs	r1, #128	@ 0x80
 8002abc:	0049      	lsls	r1, r1, #1
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ac2:	f7fe f9bd 	bl	8000e40 <HAL_GetTick>
 8002ac6:	0003      	movs	r3, r0
 8002ac8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002aca:	e00b      	b.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002acc:	f7fe f9b8 	bl	8000e40 <HAL_GetTick>
 8002ad0:	0002      	movs	r2, r0
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d904      	bls.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002ada:	2313      	movs	r3, #19
 8002adc:	18fb      	adds	r3, r7, r3
 8002ade:	2203      	movs	r2, #3
 8002ae0:	701a      	strb	r2, [r3, #0]
        break;
 8002ae2:	e005      	b.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ae4:	4b68      	ldr	r3, [pc, #416]	@ (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	2380      	movs	r3, #128	@ 0x80
 8002aea:	005b      	lsls	r3, r3, #1
 8002aec:	4013      	ands	r3, r2
 8002aee:	d0ed      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002af0:	2313      	movs	r3, #19
 8002af2:	18fb      	adds	r3, r7, r3
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d154      	bne.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002afa:	4b62      	ldr	r3, [pc, #392]	@ (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002afc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002afe:	23c0      	movs	r3, #192	@ 0xc0
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	4013      	ands	r3, r2
 8002b04:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d019      	beq.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	695b      	ldr	r3, [r3, #20]
 8002b10:	697a      	ldr	r2, [r7, #20]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d014      	beq.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b16:	4b5b      	ldr	r3, [pc, #364]	@ (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002b18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b1a:	4a5c      	ldr	r2, [pc, #368]	@ (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b20:	4b58      	ldr	r3, [pc, #352]	@ (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002b22:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002b24:	4b57      	ldr	r3, [pc, #348]	@ (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002b26:	2180      	movs	r1, #128	@ 0x80
 8002b28:	0249      	lsls	r1, r1, #9
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b2e:	4b55      	ldr	r3, [pc, #340]	@ (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002b30:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002b32:	4b54      	ldr	r3, [pc, #336]	@ (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002b34:	4956      	ldr	r1, [pc, #344]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8002b36:	400a      	ands	r2, r1
 8002b38:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b3a:	4b52      	ldr	r3, [pc, #328]	@ (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002b3c:	697a      	ldr	r2, [r7, #20]
 8002b3e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	2201      	movs	r2, #1
 8002b44:	4013      	ands	r3, r2
 8002b46:	d016      	beq.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b48:	f7fe f97a 	bl	8000e40 <HAL_GetTick>
 8002b4c:	0003      	movs	r3, r0
 8002b4e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b50:	e00c      	b.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b52:	f7fe f975 	bl	8000e40 <HAL_GetTick>
 8002b56:	0002      	movs	r2, r0
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	4a4d      	ldr	r2, [pc, #308]	@ (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d904      	bls.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002b62:	2313      	movs	r3, #19
 8002b64:	18fb      	adds	r3, r7, r3
 8002b66:	2203      	movs	r2, #3
 8002b68:	701a      	strb	r2, [r3, #0]
            break;
 8002b6a:	e004      	b.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b6c:	4b45      	ldr	r3, [pc, #276]	@ (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002b6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b70:	2202      	movs	r2, #2
 8002b72:	4013      	ands	r3, r2
 8002b74:	d0ed      	beq.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002b76:	2313      	movs	r3, #19
 8002b78:	18fb      	adds	r3, r7, r3
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d10a      	bne.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b80:	4b40      	ldr	r3, [pc, #256]	@ (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002b82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b84:	4a41      	ldr	r2, [pc, #260]	@ (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002b86:	4013      	ands	r3, r2
 8002b88:	0019      	movs	r1, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	695a      	ldr	r2, [r3, #20]
 8002b8e:	4b3d      	ldr	r3, [pc, #244]	@ (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002b90:	430a      	orrs	r2, r1
 8002b92:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002b94:	e00c      	b.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b96:	2312      	movs	r3, #18
 8002b98:	18fb      	adds	r3, r7, r3
 8002b9a:	2213      	movs	r2, #19
 8002b9c:	18ba      	adds	r2, r7, r2
 8002b9e:	7812      	ldrb	r2, [r2, #0]
 8002ba0:	701a      	strb	r2, [r3, #0]
 8002ba2:	e005      	b.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ba4:	2312      	movs	r3, #18
 8002ba6:	18fb      	adds	r3, r7, r3
 8002ba8:	2213      	movs	r2, #19
 8002baa:	18ba      	adds	r2, r7, r2
 8002bac:	7812      	ldrb	r2, [r2, #0]
 8002bae:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002bb0:	2311      	movs	r3, #17
 8002bb2:	18fb      	adds	r3, r7, r3
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d105      	bne.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bba:	4b32      	ldr	r3, [pc, #200]	@ (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002bbc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002bbe:	4b31      	ldr	r3, [pc, #196]	@ (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002bc0:	4935      	ldr	r1, [pc, #212]	@ (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002bc2:	400a      	ands	r2, r1
 8002bc4:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	4013      	ands	r3, r2
 8002bce:	d009      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002bd0:	4b2c      	ldr	r3, [pc, #176]	@ (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002bd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bd4:	2203      	movs	r2, #3
 8002bd6:	4393      	bics	r3, r2
 8002bd8:	0019      	movs	r1, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685a      	ldr	r2, [r3, #4]
 8002bde:	4b29      	ldr	r3, [pc, #164]	@ (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002be0:	430a      	orrs	r2, r1
 8002be2:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2220      	movs	r2, #32
 8002bea:	4013      	ands	r3, r2
 8002bec:	d009      	beq.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002bee:	4b25      	ldr	r3, [pc, #148]	@ (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002bf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bf2:	4a2a      	ldr	r2, [pc, #168]	@ (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	0019      	movs	r1, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	689a      	ldr	r2, [r3, #8]
 8002bfc:	4b21      	ldr	r3, [pc, #132]	@ (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002bfe:	430a      	orrs	r2, r1
 8002c00:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	2380      	movs	r3, #128	@ 0x80
 8002c08:	01db      	lsls	r3, r3, #7
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	d015      	beq.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c0e:	4b1d      	ldr	r3, [pc, #116]	@ (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002c10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	0899      	lsrs	r1, r3, #2
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	691a      	ldr	r2, [r3, #16]
 8002c1a:	4b1a      	ldr	r3, [pc, #104]	@ (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002c1c:	430a      	orrs	r2, r1
 8002c1e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	691a      	ldr	r2, [r3, #16]
 8002c24:	2380      	movs	r3, #128	@ 0x80
 8002c26:	05db      	lsls	r3, r3, #23
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d106      	bne.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002c2c:	4b15      	ldr	r3, [pc, #84]	@ (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002c2e:	68da      	ldr	r2, [r3, #12]
 8002c30:	4b14      	ldr	r3, [pc, #80]	@ (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002c32:	2180      	movs	r1, #128	@ 0x80
 8002c34:	0249      	lsls	r1, r1, #9
 8002c36:	430a      	orrs	r2, r1
 8002c38:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	2380      	movs	r3, #128	@ 0x80
 8002c40:	011b      	lsls	r3, r3, #4
 8002c42:	4013      	ands	r3, r2
 8002c44:	d016      	beq.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002c46:	4b0f      	ldr	r3, [pc, #60]	@ (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002c48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c4a:	4a15      	ldr	r2, [pc, #84]	@ (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	0019      	movs	r1, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	68da      	ldr	r2, [r3, #12]
 8002c54:	4b0b      	ldr	r3, [pc, #44]	@ (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002c56:	430a      	orrs	r2, r1
 8002c58:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	68da      	ldr	r2, [r3, #12]
 8002c5e:	2380      	movs	r3, #128	@ 0x80
 8002c60:	01db      	lsls	r3, r3, #7
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d106      	bne.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002c66:	4b07      	ldr	r3, [pc, #28]	@ (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002c68:	68da      	ldr	r2, [r3, #12]
 8002c6a:	4b06      	ldr	r3, [pc, #24]	@ (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002c6c:	2180      	movs	r1, #128	@ 0x80
 8002c6e:	0249      	lsls	r1, r1, #9
 8002c70:	430a      	orrs	r2, r1
 8002c72:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002c74:	2312      	movs	r3, #18
 8002c76:	18fb      	adds	r3, r7, r3
 8002c78:	781b      	ldrb	r3, [r3, #0]
}
 8002c7a:	0018      	movs	r0, r3
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	b006      	add	sp, #24
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	46c0      	nop			@ (mov r8, r8)
 8002c84:	40021000 	.word	0x40021000
 8002c88:	40007000 	.word	0x40007000
 8002c8c:	fffffcff 	.word	0xfffffcff
 8002c90:	fffeffff 	.word	0xfffeffff
 8002c94:	00001388 	.word	0x00001388
 8002c98:	efffffff 	.word	0xefffffff
 8002c9c:	ffffcfff 	.word	0xffffcfff
 8002ca0:	ffff3fff 	.word	0xffff3fff

08002ca4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d101      	bne.n	8002cb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e046      	b.n	8002d44 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2288      	movs	r2, #136	@ 0x88
 8002cba:	589b      	ldr	r3, [r3, r2]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d107      	bne.n	8002cd0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2284      	movs	r2, #132	@ 0x84
 8002cc4:	2100      	movs	r1, #0
 8002cc6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	0018      	movs	r0, r3
 8002ccc:	f7fd ff5c 	bl	8000b88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2288      	movs	r2, #136	@ 0x88
 8002cd4:	2124      	movs	r1, #36	@ 0x24
 8002cd6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2101      	movs	r1, #1
 8002ce4:	438a      	bics	r2, r1
 8002ce6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d003      	beq.n	8002cf8 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	0018      	movs	r0, r3
 8002cf4:	f000 fa3a 	bl	800316c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	0018      	movs	r0, r3
 8002cfc:	f000 f8cc 	bl	8002e98 <UART_SetConfig>
 8002d00:	0003      	movs	r3, r0
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d101      	bne.n	8002d0a <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e01c      	b.n	8002d44 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	685a      	ldr	r2, [r3, #4]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	490d      	ldr	r1, [pc, #52]	@ (8002d4c <HAL_UART_Init+0xa8>)
 8002d16:	400a      	ands	r2, r1
 8002d18:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	689a      	ldr	r2, [r3, #8]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	212a      	movs	r1, #42	@ 0x2a
 8002d26:	438a      	bics	r2, r1
 8002d28:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2101      	movs	r1, #1
 8002d36:	430a      	orrs	r2, r1
 8002d38:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	0018      	movs	r0, r3
 8002d3e:	f000 fac9 	bl	80032d4 <UART_CheckIdleState>
 8002d42:	0003      	movs	r3, r0
}
 8002d44:	0018      	movs	r0, r3
 8002d46:	46bd      	mov	sp, r7
 8002d48:	b002      	add	sp, #8
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	ffffb7ff 	.word	0xffffb7ff

08002d50 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b08a      	sub	sp, #40	@ 0x28
 8002d54:	af02      	add	r7, sp, #8
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	603b      	str	r3, [r7, #0]
 8002d5c:	1dbb      	adds	r3, r7, #6
 8002d5e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2288      	movs	r2, #136	@ 0x88
 8002d64:	589b      	ldr	r3, [r3, r2]
 8002d66:	2b20      	cmp	r3, #32
 8002d68:	d000      	beq.n	8002d6c <HAL_UART_Transmit+0x1c>
 8002d6a:	e090      	b.n	8002e8e <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d003      	beq.n	8002d7a <HAL_UART_Transmit+0x2a>
 8002d72:	1dbb      	adds	r3, r7, #6
 8002d74:	881b      	ldrh	r3, [r3, #0]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d101      	bne.n	8002d7e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e088      	b.n	8002e90 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	689a      	ldr	r2, [r3, #8]
 8002d82:	2380      	movs	r3, #128	@ 0x80
 8002d84:	015b      	lsls	r3, r3, #5
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d109      	bne.n	8002d9e <HAL_UART_Transmit+0x4e>
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d105      	bne.n	8002d9e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	2201      	movs	r2, #1
 8002d96:	4013      	ands	r3, r2
 8002d98:	d001      	beq.n	8002d9e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e078      	b.n	8002e90 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2290      	movs	r2, #144	@ 0x90
 8002da2:	2100      	movs	r1, #0
 8002da4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2288      	movs	r2, #136	@ 0x88
 8002daa:	2121      	movs	r1, #33	@ 0x21
 8002dac:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002dae:	f7fe f847 	bl	8000e40 <HAL_GetTick>
 8002db2:	0003      	movs	r3, r0
 8002db4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	1dba      	adds	r2, r7, #6
 8002dba:	2154      	movs	r1, #84	@ 0x54
 8002dbc:	8812      	ldrh	r2, [r2, #0]
 8002dbe:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	1dba      	adds	r2, r7, #6
 8002dc4:	2156      	movs	r1, #86	@ 0x56
 8002dc6:	8812      	ldrh	r2, [r2, #0]
 8002dc8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	689a      	ldr	r2, [r3, #8]
 8002dce:	2380      	movs	r3, #128	@ 0x80
 8002dd0:	015b      	lsls	r3, r3, #5
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d108      	bne.n	8002de8 <HAL_UART_Transmit+0x98>
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d104      	bne.n	8002de8 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8002dde:	2300      	movs	r3, #0
 8002de0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	61bb      	str	r3, [r7, #24]
 8002de6:	e003      	b.n	8002df0 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002dec:	2300      	movs	r3, #0
 8002dee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002df0:	e030      	b.n	8002e54 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002df2:	697a      	ldr	r2, [r7, #20]
 8002df4:	68f8      	ldr	r0, [r7, #12]
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	9300      	str	r3, [sp, #0]
 8002dfa:	0013      	movs	r3, r2
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	2180      	movs	r1, #128	@ 0x80
 8002e00:	f000 fb12 	bl	8003428 <UART_WaitOnFlagUntilTimeout>
 8002e04:	1e03      	subs	r3, r0, #0
 8002e06:	d005      	beq.n	8002e14 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2288      	movs	r2, #136	@ 0x88
 8002e0c:	2120      	movs	r1, #32
 8002e0e:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e03d      	b.n	8002e90 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d10b      	bne.n	8002e32 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	881b      	ldrh	r3, [r3, #0]
 8002e1e:	001a      	movs	r2, r3
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	05d2      	lsls	r2, r2, #23
 8002e26:	0dd2      	lsrs	r2, r2, #23
 8002e28:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	3302      	adds	r3, #2
 8002e2e:	61bb      	str	r3, [r7, #24]
 8002e30:	e007      	b.n	8002e42 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	781a      	ldrb	r2, [r3, #0]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	3301      	adds	r3, #1
 8002e40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2256      	movs	r2, #86	@ 0x56
 8002e46:	5a9b      	ldrh	r3, [r3, r2]
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	b299      	uxth	r1, r3
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2256      	movs	r2, #86	@ 0x56
 8002e52:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2256      	movs	r2, #86	@ 0x56
 8002e58:	5a9b      	ldrh	r3, [r3, r2]
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d1c8      	bne.n	8002df2 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e60:	697a      	ldr	r2, [r7, #20]
 8002e62:	68f8      	ldr	r0, [r7, #12]
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	9300      	str	r3, [sp, #0]
 8002e68:	0013      	movs	r3, r2
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	2140      	movs	r1, #64	@ 0x40
 8002e6e:	f000 fadb 	bl	8003428 <UART_WaitOnFlagUntilTimeout>
 8002e72:	1e03      	subs	r3, r0, #0
 8002e74:	d005      	beq.n	8002e82 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2288      	movs	r2, #136	@ 0x88
 8002e7a:	2120      	movs	r1, #32
 8002e7c:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e006      	b.n	8002e90 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2288      	movs	r2, #136	@ 0x88
 8002e86:	2120      	movs	r1, #32
 8002e88:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	e000      	b.n	8002e90 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8002e8e:	2302      	movs	r3, #2
  }
}
 8002e90:	0018      	movs	r0, r3
 8002e92:	46bd      	mov	sp, r7
 8002e94:	b008      	add	sp, #32
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b088      	sub	sp, #32
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ea0:	231a      	movs	r3, #26
 8002ea2:	18fb      	adds	r3, r7, r3
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	689a      	ldr	r2, [r3, #8]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	691b      	ldr	r3, [r3, #16]
 8002eb0:	431a      	orrs	r2, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	695b      	ldr	r3, [r3, #20]
 8002eb6:	431a      	orrs	r2, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	69db      	ldr	r3, [r3, #28]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4aa1      	ldr	r2, [pc, #644]	@ (800314c <UART_SetConfig+0x2b4>)
 8002ec8:	4013      	ands	r3, r2
 8002eca:	0019      	movs	r1, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	69fa      	ldr	r2, [r7, #28]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	4a9c      	ldr	r2, [pc, #624]	@ (8003150 <UART_SetConfig+0x2b8>)
 8002ede:	4013      	ands	r3, r2
 8002ee0:	0019      	movs	r1, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	68da      	ldr	r2, [r3, #12]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	430a      	orrs	r2, r1
 8002eec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a1b      	ldr	r3, [r3, #32]
 8002ef8:	69fa      	ldr	r2, [r7, #28]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	4a93      	ldr	r2, [pc, #588]	@ (8003154 <UART_SetConfig+0x2bc>)
 8002f06:	4013      	ands	r3, r2
 8002f08:	0019      	movs	r1, r3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	69fa      	ldr	r2, [r7, #28]
 8002f10:	430a      	orrs	r2, r1
 8002f12:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f1a:	220f      	movs	r2, #15
 8002f1c:	4393      	bics	r3, r2
 8002f1e:	0019      	movs	r1, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a89      	ldr	r2, [pc, #548]	@ (8003158 <UART_SetConfig+0x2c0>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d127      	bne.n	8002f86 <UART_SetConfig+0xee>
 8002f36:	4b89      	ldr	r3, [pc, #548]	@ (800315c <UART_SetConfig+0x2c4>)
 8002f38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f3a:	2203      	movs	r2, #3
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	2b03      	cmp	r3, #3
 8002f40:	d017      	beq.n	8002f72 <UART_SetConfig+0xda>
 8002f42:	d81b      	bhi.n	8002f7c <UART_SetConfig+0xe4>
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d00a      	beq.n	8002f5e <UART_SetConfig+0xc6>
 8002f48:	d818      	bhi.n	8002f7c <UART_SetConfig+0xe4>
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d002      	beq.n	8002f54 <UART_SetConfig+0xbc>
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d00a      	beq.n	8002f68 <UART_SetConfig+0xd0>
 8002f52:	e013      	b.n	8002f7c <UART_SetConfig+0xe4>
 8002f54:	231b      	movs	r3, #27
 8002f56:	18fb      	adds	r3, r7, r3
 8002f58:	2200      	movs	r2, #0
 8002f5a:	701a      	strb	r2, [r3, #0]
 8002f5c:	e021      	b.n	8002fa2 <UART_SetConfig+0x10a>
 8002f5e:	231b      	movs	r3, #27
 8002f60:	18fb      	adds	r3, r7, r3
 8002f62:	2202      	movs	r2, #2
 8002f64:	701a      	strb	r2, [r3, #0]
 8002f66:	e01c      	b.n	8002fa2 <UART_SetConfig+0x10a>
 8002f68:	231b      	movs	r3, #27
 8002f6a:	18fb      	adds	r3, r7, r3
 8002f6c:	2204      	movs	r2, #4
 8002f6e:	701a      	strb	r2, [r3, #0]
 8002f70:	e017      	b.n	8002fa2 <UART_SetConfig+0x10a>
 8002f72:	231b      	movs	r3, #27
 8002f74:	18fb      	adds	r3, r7, r3
 8002f76:	2208      	movs	r2, #8
 8002f78:	701a      	strb	r2, [r3, #0]
 8002f7a:	e012      	b.n	8002fa2 <UART_SetConfig+0x10a>
 8002f7c:	231b      	movs	r3, #27
 8002f7e:	18fb      	adds	r3, r7, r3
 8002f80:	2210      	movs	r2, #16
 8002f82:	701a      	strb	r2, [r3, #0]
 8002f84:	e00d      	b.n	8002fa2 <UART_SetConfig+0x10a>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a75      	ldr	r2, [pc, #468]	@ (8003160 <UART_SetConfig+0x2c8>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d104      	bne.n	8002f9a <UART_SetConfig+0x102>
 8002f90:	231b      	movs	r3, #27
 8002f92:	18fb      	adds	r3, r7, r3
 8002f94:	2200      	movs	r2, #0
 8002f96:	701a      	strb	r2, [r3, #0]
 8002f98:	e003      	b.n	8002fa2 <UART_SetConfig+0x10a>
 8002f9a:	231b      	movs	r3, #27
 8002f9c:	18fb      	adds	r3, r7, r3
 8002f9e:	2210      	movs	r2, #16
 8002fa0:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	69da      	ldr	r2, [r3, #28]
 8002fa6:	2380      	movs	r3, #128	@ 0x80
 8002fa8:	021b      	lsls	r3, r3, #8
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d000      	beq.n	8002fb0 <UART_SetConfig+0x118>
 8002fae:	e065      	b.n	800307c <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 8002fb0:	231b      	movs	r3, #27
 8002fb2:	18fb      	adds	r3, r7, r3
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	2b08      	cmp	r3, #8
 8002fb8:	d015      	beq.n	8002fe6 <UART_SetConfig+0x14e>
 8002fba:	dc18      	bgt.n	8002fee <UART_SetConfig+0x156>
 8002fbc:	2b04      	cmp	r3, #4
 8002fbe:	d00d      	beq.n	8002fdc <UART_SetConfig+0x144>
 8002fc0:	dc15      	bgt.n	8002fee <UART_SetConfig+0x156>
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d002      	beq.n	8002fcc <UART_SetConfig+0x134>
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d005      	beq.n	8002fd6 <UART_SetConfig+0x13e>
 8002fca:	e010      	b.n	8002fee <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fcc:	f7ff fd2e 	bl	8002a2c <HAL_RCC_GetPCLK1Freq>
 8002fd0:	0003      	movs	r3, r0
 8002fd2:	617b      	str	r3, [r7, #20]
        break;
 8002fd4:	e012      	b.n	8002ffc <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002fd6:	4b63      	ldr	r3, [pc, #396]	@ (8003164 <UART_SetConfig+0x2cc>)
 8002fd8:	617b      	str	r3, [r7, #20]
        break;
 8002fda:	e00f      	b.n	8002ffc <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fdc:	f7ff fc9a 	bl	8002914 <HAL_RCC_GetSysClockFreq>
 8002fe0:	0003      	movs	r3, r0
 8002fe2:	617b      	str	r3, [r7, #20]
        break;
 8002fe4:	e00a      	b.n	8002ffc <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002fe6:	2380      	movs	r3, #128	@ 0x80
 8002fe8:	021b      	lsls	r3, r3, #8
 8002fea:	617b      	str	r3, [r7, #20]
        break;
 8002fec:	e006      	b.n	8002ffc <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002ff2:	231a      	movs	r3, #26
 8002ff4:	18fb      	adds	r3, r7, r3
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	701a      	strb	r2, [r3, #0]
        break;
 8002ffa:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d100      	bne.n	8003004 <UART_SetConfig+0x16c>
 8003002:	e08d      	b.n	8003120 <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003008:	4b57      	ldr	r3, [pc, #348]	@ (8003168 <UART_SetConfig+0x2d0>)
 800300a:	0052      	lsls	r2, r2, #1
 800300c:	5ad3      	ldrh	r3, [r2, r3]
 800300e:	0019      	movs	r1, r3
 8003010:	6978      	ldr	r0, [r7, #20]
 8003012:	f7fd f887 	bl	8000124 <__udivsi3>
 8003016:	0003      	movs	r3, r0
 8003018:	005a      	lsls	r2, r3, #1
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	085b      	lsrs	r3, r3, #1
 8003020:	18d2      	adds	r2, r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	0019      	movs	r1, r3
 8003028:	0010      	movs	r0, r2
 800302a:	f7fd f87b 	bl	8000124 <__udivsi3>
 800302e:	0003      	movs	r3, r0
 8003030:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	2b0f      	cmp	r3, #15
 8003036:	d91c      	bls.n	8003072 <UART_SetConfig+0x1da>
 8003038:	693a      	ldr	r2, [r7, #16]
 800303a:	2380      	movs	r3, #128	@ 0x80
 800303c:	025b      	lsls	r3, r3, #9
 800303e:	429a      	cmp	r2, r3
 8003040:	d217      	bcs.n	8003072 <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	b29a      	uxth	r2, r3
 8003046:	200e      	movs	r0, #14
 8003048:	183b      	adds	r3, r7, r0
 800304a:	210f      	movs	r1, #15
 800304c:	438a      	bics	r2, r1
 800304e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	085b      	lsrs	r3, r3, #1
 8003054:	b29b      	uxth	r3, r3
 8003056:	2207      	movs	r2, #7
 8003058:	4013      	ands	r3, r2
 800305a:	b299      	uxth	r1, r3
 800305c:	183b      	adds	r3, r7, r0
 800305e:	183a      	adds	r2, r7, r0
 8003060:	8812      	ldrh	r2, [r2, #0]
 8003062:	430a      	orrs	r2, r1
 8003064:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	183a      	adds	r2, r7, r0
 800306c:	8812      	ldrh	r2, [r2, #0]
 800306e:	60da      	str	r2, [r3, #12]
 8003070:	e056      	b.n	8003120 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8003072:	231a      	movs	r3, #26
 8003074:	18fb      	adds	r3, r7, r3
 8003076:	2201      	movs	r2, #1
 8003078:	701a      	strb	r2, [r3, #0]
 800307a:	e051      	b.n	8003120 <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 800307c:	231b      	movs	r3, #27
 800307e:	18fb      	adds	r3, r7, r3
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	2b08      	cmp	r3, #8
 8003084:	d015      	beq.n	80030b2 <UART_SetConfig+0x21a>
 8003086:	dc18      	bgt.n	80030ba <UART_SetConfig+0x222>
 8003088:	2b04      	cmp	r3, #4
 800308a:	d00d      	beq.n	80030a8 <UART_SetConfig+0x210>
 800308c:	dc15      	bgt.n	80030ba <UART_SetConfig+0x222>
 800308e:	2b00      	cmp	r3, #0
 8003090:	d002      	beq.n	8003098 <UART_SetConfig+0x200>
 8003092:	2b02      	cmp	r3, #2
 8003094:	d005      	beq.n	80030a2 <UART_SetConfig+0x20a>
 8003096:	e010      	b.n	80030ba <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003098:	f7ff fcc8 	bl	8002a2c <HAL_RCC_GetPCLK1Freq>
 800309c:	0003      	movs	r3, r0
 800309e:	617b      	str	r3, [r7, #20]
        break;
 80030a0:	e012      	b.n	80030c8 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030a2:	4b30      	ldr	r3, [pc, #192]	@ (8003164 <UART_SetConfig+0x2cc>)
 80030a4:	617b      	str	r3, [r7, #20]
        break;
 80030a6:	e00f      	b.n	80030c8 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030a8:	f7ff fc34 	bl	8002914 <HAL_RCC_GetSysClockFreq>
 80030ac:	0003      	movs	r3, r0
 80030ae:	617b      	str	r3, [r7, #20]
        break;
 80030b0:	e00a      	b.n	80030c8 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030b2:	2380      	movs	r3, #128	@ 0x80
 80030b4:	021b      	lsls	r3, r3, #8
 80030b6:	617b      	str	r3, [r7, #20]
        break;
 80030b8:	e006      	b.n	80030c8 <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 80030ba:	2300      	movs	r3, #0
 80030bc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80030be:	231a      	movs	r3, #26
 80030c0:	18fb      	adds	r3, r7, r3
 80030c2:	2201      	movs	r2, #1
 80030c4:	701a      	strb	r2, [r3, #0]
        break;
 80030c6:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d028      	beq.n	8003120 <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80030d2:	4b25      	ldr	r3, [pc, #148]	@ (8003168 <UART_SetConfig+0x2d0>)
 80030d4:	0052      	lsls	r2, r2, #1
 80030d6:	5ad3      	ldrh	r3, [r2, r3]
 80030d8:	0019      	movs	r1, r3
 80030da:	6978      	ldr	r0, [r7, #20]
 80030dc:	f7fd f822 	bl	8000124 <__udivsi3>
 80030e0:	0003      	movs	r3, r0
 80030e2:	001a      	movs	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	085b      	lsrs	r3, r3, #1
 80030ea:	18d2      	adds	r2, r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	0019      	movs	r1, r3
 80030f2:	0010      	movs	r0, r2
 80030f4:	f7fd f816 	bl	8000124 <__udivsi3>
 80030f8:	0003      	movs	r3, r0
 80030fa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	2b0f      	cmp	r3, #15
 8003100:	d90a      	bls.n	8003118 <UART_SetConfig+0x280>
 8003102:	693a      	ldr	r2, [r7, #16]
 8003104:	2380      	movs	r3, #128	@ 0x80
 8003106:	025b      	lsls	r3, r3, #9
 8003108:	429a      	cmp	r2, r3
 800310a:	d205      	bcs.n	8003118 <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	b29a      	uxth	r2, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	60da      	str	r2, [r3, #12]
 8003116:	e003      	b.n	8003120 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8003118:	231a      	movs	r3, #26
 800311a:	18fb      	adds	r3, r7, r3
 800311c:	2201      	movs	r2, #1
 800311e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	226a      	movs	r2, #106	@ 0x6a
 8003124:	2101      	movs	r1, #1
 8003126:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2268      	movs	r2, #104	@ 0x68
 800312c:	2101      	movs	r1, #1
 800312e:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800313c:	231a      	movs	r3, #26
 800313e:	18fb      	adds	r3, r7, r3
 8003140:	781b      	ldrb	r3, [r3, #0]
}
 8003142:	0018      	movs	r0, r3
 8003144:	46bd      	mov	sp, r7
 8003146:	b008      	add	sp, #32
 8003148:	bd80      	pop	{r7, pc}
 800314a:	46c0      	nop			@ (mov r8, r8)
 800314c:	cfff69f3 	.word	0xcfff69f3
 8003150:	ffffcfff 	.word	0xffffcfff
 8003154:	11fff4ff 	.word	0x11fff4ff
 8003158:	40013800 	.word	0x40013800
 800315c:	40021000 	.word	0x40021000
 8003160:	40004400 	.word	0x40004400
 8003164:	00f42400 	.word	0x00f42400
 8003168:	0800409c 	.word	0x0800409c

0800316c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003178:	2208      	movs	r2, #8
 800317a:	4013      	ands	r3, r2
 800317c:	d00b      	beq.n	8003196 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	4a4a      	ldr	r2, [pc, #296]	@ (80032b0 <UART_AdvFeatureConfig+0x144>)
 8003186:	4013      	ands	r3, r2
 8003188:	0019      	movs	r1, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	430a      	orrs	r2, r1
 8003194:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800319a:	2201      	movs	r2, #1
 800319c:	4013      	ands	r3, r2
 800319e:	d00b      	beq.n	80031b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	4a43      	ldr	r2, [pc, #268]	@ (80032b4 <UART_AdvFeatureConfig+0x148>)
 80031a8:	4013      	ands	r3, r2
 80031aa:	0019      	movs	r1, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	430a      	orrs	r2, r1
 80031b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031bc:	2202      	movs	r2, #2
 80031be:	4013      	ands	r3, r2
 80031c0:	d00b      	beq.n	80031da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	4a3b      	ldr	r2, [pc, #236]	@ (80032b8 <UART_AdvFeatureConfig+0x14c>)
 80031ca:	4013      	ands	r3, r2
 80031cc:	0019      	movs	r1, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	430a      	orrs	r2, r1
 80031d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031de:	2204      	movs	r2, #4
 80031e0:	4013      	ands	r3, r2
 80031e2:	d00b      	beq.n	80031fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	4a34      	ldr	r2, [pc, #208]	@ (80032bc <UART_AdvFeatureConfig+0x150>)
 80031ec:	4013      	ands	r3, r2
 80031ee:	0019      	movs	r1, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	430a      	orrs	r2, r1
 80031fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003200:	2210      	movs	r2, #16
 8003202:	4013      	ands	r3, r2
 8003204:	d00b      	beq.n	800321e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	4a2c      	ldr	r2, [pc, #176]	@ (80032c0 <UART_AdvFeatureConfig+0x154>)
 800320e:	4013      	ands	r3, r2
 8003210:	0019      	movs	r1, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	430a      	orrs	r2, r1
 800321c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003222:	2220      	movs	r2, #32
 8003224:	4013      	ands	r3, r2
 8003226:	d00b      	beq.n	8003240 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	4a25      	ldr	r2, [pc, #148]	@ (80032c4 <UART_AdvFeatureConfig+0x158>)
 8003230:	4013      	ands	r3, r2
 8003232:	0019      	movs	r1, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	430a      	orrs	r2, r1
 800323e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003244:	2240      	movs	r2, #64	@ 0x40
 8003246:	4013      	ands	r3, r2
 8003248:	d01d      	beq.n	8003286 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	4a1d      	ldr	r2, [pc, #116]	@ (80032c8 <UART_AdvFeatureConfig+0x15c>)
 8003252:	4013      	ands	r3, r2
 8003254:	0019      	movs	r1, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	430a      	orrs	r2, r1
 8003260:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003266:	2380      	movs	r3, #128	@ 0x80
 8003268:	035b      	lsls	r3, r3, #13
 800326a:	429a      	cmp	r2, r3
 800326c:	d10b      	bne.n	8003286 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	4a15      	ldr	r2, [pc, #84]	@ (80032cc <UART_AdvFeatureConfig+0x160>)
 8003276:	4013      	ands	r3, r2
 8003278:	0019      	movs	r1, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	430a      	orrs	r2, r1
 8003284:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800328a:	2280      	movs	r2, #128	@ 0x80
 800328c:	4013      	ands	r3, r2
 800328e:	d00b      	beq.n	80032a8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	4a0e      	ldr	r2, [pc, #56]	@ (80032d0 <UART_AdvFeatureConfig+0x164>)
 8003298:	4013      	ands	r3, r2
 800329a:	0019      	movs	r1, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	430a      	orrs	r2, r1
 80032a6:	605a      	str	r2, [r3, #4]
  }
}
 80032a8:	46c0      	nop			@ (mov r8, r8)
 80032aa:	46bd      	mov	sp, r7
 80032ac:	b002      	add	sp, #8
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	ffff7fff 	.word	0xffff7fff
 80032b4:	fffdffff 	.word	0xfffdffff
 80032b8:	fffeffff 	.word	0xfffeffff
 80032bc:	fffbffff 	.word	0xfffbffff
 80032c0:	ffffefff 	.word	0xffffefff
 80032c4:	ffffdfff 	.word	0xffffdfff
 80032c8:	ffefffff 	.word	0xffefffff
 80032cc:	ff9fffff 	.word	0xff9fffff
 80032d0:	fff7ffff 	.word	0xfff7ffff

080032d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b092      	sub	sp, #72	@ 0x48
 80032d8:	af02      	add	r7, sp, #8
 80032da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2290      	movs	r2, #144	@ 0x90
 80032e0:	2100      	movs	r1, #0
 80032e2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80032e4:	f7fd fdac 	bl	8000e40 <HAL_GetTick>
 80032e8:	0003      	movs	r3, r0
 80032ea:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2208      	movs	r2, #8
 80032f4:	4013      	ands	r3, r2
 80032f6:	2b08      	cmp	r3, #8
 80032f8:	d12d      	bne.n	8003356 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032fc:	2280      	movs	r2, #128	@ 0x80
 80032fe:	0391      	lsls	r1, r2, #14
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	4a47      	ldr	r2, [pc, #284]	@ (8003420 <UART_CheckIdleState+0x14c>)
 8003304:	9200      	str	r2, [sp, #0]
 8003306:	2200      	movs	r2, #0
 8003308:	f000 f88e 	bl	8003428 <UART_WaitOnFlagUntilTimeout>
 800330c:	1e03      	subs	r3, r0, #0
 800330e:	d022      	beq.n	8003356 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003310:	f3ef 8310 	mrs	r3, PRIMASK
 8003314:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003318:	63bb      	str	r3, [r7, #56]	@ 0x38
 800331a:	2301      	movs	r3, #1
 800331c:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800331e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003320:	f383 8810 	msr	PRIMASK, r3
}
 8003324:	46c0      	nop			@ (mov r8, r8)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2180      	movs	r1, #128	@ 0x80
 8003332:	438a      	bics	r2, r1
 8003334:	601a      	str	r2, [r3, #0]
 8003336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003338:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800333a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800333c:	f383 8810 	msr	PRIMASK, r3
}
 8003340:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2288      	movs	r2, #136	@ 0x88
 8003346:	2120      	movs	r1, #32
 8003348:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2284      	movs	r2, #132	@ 0x84
 800334e:	2100      	movs	r1, #0
 8003350:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e060      	b.n	8003418 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2204      	movs	r2, #4
 800335e:	4013      	ands	r3, r2
 8003360:	2b04      	cmp	r3, #4
 8003362:	d146      	bne.n	80033f2 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003364:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003366:	2280      	movs	r2, #128	@ 0x80
 8003368:	03d1      	lsls	r1, r2, #15
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	4a2c      	ldr	r2, [pc, #176]	@ (8003420 <UART_CheckIdleState+0x14c>)
 800336e:	9200      	str	r2, [sp, #0]
 8003370:	2200      	movs	r2, #0
 8003372:	f000 f859 	bl	8003428 <UART_WaitOnFlagUntilTimeout>
 8003376:	1e03      	subs	r3, r0, #0
 8003378:	d03b      	beq.n	80033f2 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800337a:	f3ef 8310 	mrs	r3, PRIMASK
 800337e:	60fb      	str	r3, [r7, #12]
  return(result);
 8003380:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003382:	637b      	str	r3, [r7, #52]	@ 0x34
 8003384:	2301      	movs	r3, #1
 8003386:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	f383 8810 	msr	PRIMASK, r3
}
 800338e:	46c0      	nop			@ (mov r8, r8)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4922      	ldr	r1, [pc, #136]	@ (8003424 <UART_CheckIdleState+0x150>)
 800339c:	400a      	ands	r2, r1
 800339e:	601a      	str	r2, [r3, #0]
 80033a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033a2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	f383 8810 	msr	PRIMASK, r3
}
 80033aa:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033ac:	f3ef 8310 	mrs	r3, PRIMASK
 80033b0:	61bb      	str	r3, [r7, #24]
  return(result);
 80033b2:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80033b6:	2301      	movs	r3, #1
 80033b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	f383 8810 	msr	PRIMASK, r3
}
 80033c0:	46c0      	nop			@ (mov r8, r8)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	689a      	ldr	r2, [r3, #8]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2101      	movs	r1, #1
 80033ce:	438a      	bics	r2, r1
 80033d0:	609a      	str	r2, [r3, #8]
 80033d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033d4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033d6:	6a3b      	ldr	r3, [r7, #32]
 80033d8:	f383 8810 	msr	PRIMASK, r3
}
 80033dc:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	228c      	movs	r2, #140	@ 0x8c
 80033e2:	2120      	movs	r1, #32
 80033e4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2284      	movs	r2, #132	@ 0x84
 80033ea:	2100      	movs	r1, #0
 80033ec:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e012      	b.n	8003418 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2288      	movs	r2, #136	@ 0x88
 80033f6:	2120      	movs	r1, #32
 80033f8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	228c      	movs	r2, #140	@ 0x8c
 80033fe:	2120      	movs	r1, #32
 8003400:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2284      	movs	r2, #132	@ 0x84
 8003412:	2100      	movs	r1, #0
 8003414:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003416:	2300      	movs	r3, #0
}
 8003418:	0018      	movs	r0, r3
 800341a:	46bd      	mov	sp, r7
 800341c:	b010      	add	sp, #64	@ 0x40
 800341e:	bd80      	pop	{r7, pc}
 8003420:	01ffffff 	.word	0x01ffffff
 8003424:	fffffedf 	.word	0xfffffedf

08003428 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	603b      	str	r3, [r7, #0]
 8003434:	1dfb      	adds	r3, r7, #7
 8003436:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003438:	e051      	b.n	80034de <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	3301      	adds	r3, #1
 800343e:	d04e      	beq.n	80034de <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003440:	f7fd fcfe 	bl	8000e40 <HAL_GetTick>
 8003444:	0002      	movs	r2, r0
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	69ba      	ldr	r2, [r7, #24]
 800344c:	429a      	cmp	r2, r3
 800344e:	d302      	bcc.n	8003456 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d101      	bne.n	800345a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e051      	b.n	80034fe <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	2204      	movs	r2, #4
 8003462:	4013      	ands	r3, r2
 8003464:	d03b      	beq.n	80034de <UART_WaitOnFlagUntilTimeout+0xb6>
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	2b80      	cmp	r3, #128	@ 0x80
 800346a:	d038      	beq.n	80034de <UART_WaitOnFlagUntilTimeout+0xb6>
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	2b40      	cmp	r3, #64	@ 0x40
 8003470:	d035      	beq.n	80034de <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	69db      	ldr	r3, [r3, #28]
 8003478:	2208      	movs	r2, #8
 800347a:	4013      	ands	r3, r2
 800347c:	2b08      	cmp	r3, #8
 800347e:	d111      	bne.n	80034a4 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2208      	movs	r2, #8
 8003486:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	0018      	movs	r0, r3
 800348c:	f000 f83c 	bl	8003508 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2290      	movs	r2, #144	@ 0x90
 8003494:	2108      	movs	r1, #8
 8003496:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2284      	movs	r2, #132	@ 0x84
 800349c:	2100      	movs	r1, #0
 800349e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e02c      	b.n	80034fe <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	69da      	ldr	r2, [r3, #28]
 80034aa:	2380      	movs	r3, #128	@ 0x80
 80034ac:	011b      	lsls	r3, r3, #4
 80034ae:	401a      	ands	r2, r3
 80034b0:	2380      	movs	r3, #128	@ 0x80
 80034b2:	011b      	lsls	r3, r3, #4
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d112      	bne.n	80034de <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2280      	movs	r2, #128	@ 0x80
 80034be:	0112      	lsls	r2, r2, #4
 80034c0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	0018      	movs	r0, r3
 80034c6:	f000 f81f 	bl	8003508 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2290      	movs	r2, #144	@ 0x90
 80034ce:	2120      	movs	r1, #32
 80034d0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2284      	movs	r2, #132	@ 0x84
 80034d6:	2100      	movs	r1, #0
 80034d8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e00f      	b.n	80034fe <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	69db      	ldr	r3, [r3, #28]
 80034e4:	68ba      	ldr	r2, [r7, #8]
 80034e6:	4013      	ands	r3, r2
 80034e8:	68ba      	ldr	r2, [r7, #8]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	425a      	negs	r2, r3
 80034ee:	4153      	adcs	r3, r2
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	001a      	movs	r2, r3
 80034f4:	1dfb      	adds	r3, r7, #7
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d09e      	beq.n	800343a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	0018      	movs	r0, r3
 8003500:	46bd      	mov	sp, r7
 8003502:	b004      	add	sp, #16
 8003504:	bd80      	pop	{r7, pc}
	...

08003508 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b08e      	sub	sp, #56	@ 0x38
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003510:	f3ef 8310 	mrs	r3, PRIMASK
 8003514:	617b      	str	r3, [r7, #20]
  return(result);
 8003516:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003518:	637b      	str	r3, [r7, #52]	@ 0x34
 800351a:	2301      	movs	r3, #1
 800351c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	f383 8810 	msr	PRIMASK, r3
}
 8003524:	46c0      	nop			@ (mov r8, r8)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4926      	ldr	r1, [pc, #152]	@ (80035cc <UART_EndRxTransfer+0xc4>)
 8003532:	400a      	ands	r2, r1
 8003534:	601a      	str	r2, [r3, #0]
 8003536:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003538:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	f383 8810 	msr	PRIMASK, r3
}
 8003540:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003542:	f3ef 8310 	mrs	r3, PRIMASK
 8003546:	623b      	str	r3, [r7, #32]
  return(result);
 8003548:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800354a:	633b      	str	r3, [r7, #48]	@ 0x30
 800354c:	2301      	movs	r3, #1
 800354e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003552:	f383 8810 	msr	PRIMASK, r3
}
 8003556:	46c0      	nop			@ (mov r8, r8)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	689a      	ldr	r2, [r3, #8]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	491b      	ldr	r1, [pc, #108]	@ (80035d0 <UART_EndRxTransfer+0xc8>)
 8003564:	400a      	ands	r2, r1
 8003566:	609a      	str	r2, [r3, #8]
 8003568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800356a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800356c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800356e:	f383 8810 	msr	PRIMASK, r3
}
 8003572:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003578:	2b01      	cmp	r3, #1
 800357a:	d118      	bne.n	80035ae <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800357c:	f3ef 8310 	mrs	r3, PRIMASK
 8003580:	60bb      	str	r3, [r7, #8]
  return(result);
 8003582:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003584:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003586:	2301      	movs	r3, #1
 8003588:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f383 8810 	msr	PRIMASK, r3
}
 8003590:	46c0      	nop			@ (mov r8, r8)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2110      	movs	r1, #16
 800359e:	438a      	bics	r2, r1
 80035a0:	601a      	str	r2, [r3, #0]
 80035a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	f383 8810 	msr	PRIMASK, r3
}
 80035ac:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	228c      	movs	r2, #140	@ 0x8c
 80035b2:	2120      	movs	r1, #32
 80035b4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80035c2:	46c0      	nop			@ (mov r8, r8)
 80035c4:	46bd      	mov	sp, r7
 80035c6:	b00e      	add	sp, #56	@ 0x38
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	46c0      	nop			@ (mov r8, r8)
 80035cc:	fffffedf 	.word	0xfffffedf
 80035d0:	effffffe 	.word	0xeffffffe

080035d4 <siprintf>:
 80035d4:	b40e      	push	{r1, r2, r3}
 80035d6:	b500      	push	{lr}
 80035d8:	490b      	ldr	r1, [pc, #44]	@ (8003608 <siprintf+0x34>)
 80035da:	b09c      	sub	sp, #112	@ 0x70
 80035dc:	ab1d      	add	r3, sp, #116	@ 0x74
 80035de:	9002      	str	r0, [sp, #8]
 80035e0:	9006      	str	r0, [sp, #24]
 80035e2:	9107      	str	r1, [sp, #28]
 80035e4:	9104      	str	r1, [sp, #16]
 80035e6:	4809      	ldr	r0, [pc, #36]	@ (800360c <siprintf+0x38>)
 80035e8:	4909      	ldr	r1, [pc, #36]	@ (8003610 <siprintf+0x3c>)
 80035ea:	cb04      	ldmia	r3!, {r2}
 80035ec:	9105      	str	r1, [sp, #20]
 80035ee:	6800      	ldr	r0, [r0, #0]
 80035f0:	a902      	add	r1, sp, #8
 80035f2:	9301      	str	r3, [sp, #4]
 80035f4:	f000 f99e 	bl	8003934 <_svfiprintf_r>
 80035f8:	2200      	movs	r2, #0
 80035fa:	9b02      	ldr	r3, [sp, #8]
 80035fc:	701a      	strb	r2, [r3, #0]
 80035fe:	b01c      	add	sp, #112	@ 0x70
 8003600:	bc08      	pop	{r3}
 8003602:	b003      	add	sp, #12
 8003604:	4718      	bx	r3
 8003606:	46c0      	nop			@ (mov r8, r8)
 8003608:	7fffffff 	.word	0x7fffffff
 800360c:	20000010 	.word	0x20000010
 8003610:	ffff0208 	.word	0xffff0208

08003614 <memset>:
 8003614:	0003      	movs	r3, r0
 8003616:	1882      	adds	r2, r0, r2
 8003618:	4293      	cmp	r3, r2
 800361a:	d100      	bne.n	800361e <memset+0xa>
 800361c:	4770      	bx	lr
 800361e:	7019      	strb	r1, [r3, #0]
 8003620:	3301      	adds	r3, #1
 8003622:	e7f9      	b.n	8003618 <memset+0x4>

08003624 <__errno>:
 8003624:	4b01      	ldr	r3, [pc, #4]	@ (800362c <__errno+0x8>)
 8003626:	6818      	ldr	r0, [r3, #0]
 8003628:	4770      	bx	lr
 800362a:	46c0      	nop			@ (mov r8, r8)
 800362c:	20000010 	.word	0x20000010

08003630 <__libc_init_array>:
 8003630:	b570      	push	{r4, r5, r6, lr}
 8003632:	2600      	movs	r6, #0
 8003634:	4c0c      	ldr	r4, [pc, #48]	@ (8003668 <__libc_init_array+0x38>)
 8003636:	4d0d      	ldr	r5, [pc, #52]	@ (800366c <__libc_init_array+0x3c>)
 8003638:	1b64      	subs	r4, r4, r5
 800363a:	10a4      	asrs	r4, r4, #2
 800363c:	42a6      	cmp	r6, r4
 800363e:	d109      	bne.n	8003654 <__libc_init_array+0x24>
 8003640:	2600      	movs	r6, #0
 8003642:	f000 fc65 	bl	8003f10 <_init>
 8003646:	4c0a      	ldr	r4, [pc, #40]	@ (8003670 <__libc_init_array+0x40>)
 8003648:	4d0a      	ldr	r5, [pc, #40]	@ (8003674 <__libc_init_array+0x44>)
 800364a:	1b64      	subs	r4, r4, r5
 800364c:	10a4      	asrs	r4, r4, #2
 800364e:	42a6      	cmp	r6, r4
 8003650:	d105      	bne.n	800365e <__libc_init_array+0x2e>
 8003652:	bd70      	pop	{r4, r5, r6, pc}
 8003654:	00b3      	lsls	r3, r6, #2
 8003656:	58eb      	ldr	r3, [r5, r3]
 8003658:	4798      	blx	r3
 800365a:	3601      	adds	r6, #1
 800365c:	e7ee      	b.n	800363c <__libc_init_array+0xc>
 800365e:	00b3      	lsls	r3, r6, #2
 8003660:	58eb      	ldr	r3, [r5, r3]
 8003662:	4798      	blx	r3
 8003664:	3601      	adds	r6, #1
 8003666:	e7f2      	b.n	800364e <__libc_init_array+0x1e>
 8003668:	080040e8 	.word	0x080040e8
 800366c:	080040e8 	.word	0x080040e8
 8003670:	080040ec 	.word	0x080040ec
 8003674:	080040e8 	.word	0x080040e8

08003678 <__retarget_lock_acquire_recursive>:
 8003678:	4770      	bx	lr

0800367a <__retarget_lock_release_recursive>:
 800367a:	4770      	bx	lr

0800367c <_free_r>:
 800367c:	b570      	push	{r4, r5, r6, lr}
 800367e:	0005      	movs	r5, r0
 8003680:	1e0c      	subs	r4, r1, #0
 8003682:	d010      	beq.n	80036a6 <_free_r+0x2a>
 8003684:	3c04      	subs	r4, #4
 8003686:	6823      	ldr	r3, [r4, #0]
 8003688:	2b00      	cmp	r3, #0
 800368a:	da00      	bge.n	800368e <_free_r+0x12>
 800368c:	18e4      	adds	r4, r4, r3
 800368e:	0028      	movs	r0, r5
 8003690:	f000 f8e0 	bl	8003854 <__malloc_lock>
 8003694:	4a1d      	ldr	r2, [pc, #116]	@ (800370c <_free_r+0x90>)
 8003696:	6813      	ldr	r3, [r2, #0]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d105      	bne.n	80036a8 <_free_r+0x2c>
 800369c:	6063      	str	r3, [r4, #4]
 800369e:	6014      	str	r4, [r2, #0]
 80036a0:	0028      	movs	r0, r5
 80036a2:	f000 f8df 	bl	8003864 <__malloc_unlock>
 80036a6:	bd70      	pop	{r4, r5, r6, pc}
 80036a8:	42a3      	cmp	r3, r4
 80036aa:	d908      	bls.n	80036be <_free_r+0x42>
 80036ac:	6820      	ldr	r0, [r4, #0]
 80036ae:	1821      	adds	r1, r4, r0
 80036b0:	428b      	cmp	r3, r1
 80036b2:	d1f3      	bne.n	800369c <_free_r+0x20>
 80036b4:	6819      	ldr	r1, [r3, #0]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	1809      	adds	r1, r1, r0
 80036ba:	6021      	str	r1, [r4, #0]
 80036bc:	e7ee      	b.n	800369c <_free_r+0x20>
 80036be:	001a      	movs	r2, r3
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d001      	beq.n	80036ca <_free_r+0x4e>
 80036c6:	42a3      	cmp	r3, r4
 80036c8:	d9f9      	bls.n	80036be <_free_r+0x42>
 80036ca:	6811      	ldr	r1, [r2, #0]
 80036cc:	1850      	adds	r0, r2, r1
 80036ce:	42a0      	cmp	r0, r4
 80036d0:	d10b      	bne.n	80036ea <_free_r+0x6e>
 80036d2:	6820      	ldr	r0, [r4, #0]
 80036d4:	1809      	adds	r1, r1, r0
 80036d6:	1850      	adds	r0, r2, r1
 80036d8:	6011      	str	r1, [r2, #0]
 80036da:	4283      	cmp	r3, r0
 80036dc:	d1e0      	bne.n	80036a0 <_free_r+0x24>
 80036de:	6818      	ldr	r0, [r3, #0]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	1841      	adds	r1, r0, r1
 80036e4:	6011      	str	r1, [r2, #0]
 80036e6:	6053      	str	r3, [r2, #4]
 80036e8:	e7da      	b.n	80036a0 <_free_r+0x24>
 80036ea:	42a0      	cmp	r0, r4
 80036ec:	d902      	bls.n	80036f4 <_free_r+0x78>
 80036ee:	230c      	movs	r3, #12
 80036f0:	602b      	str	r3, [r5, #0]
 80036f2:	e7d5      	b.n	80036a0 <_free_r+0x24>
 80036f4:	6820      	ldr	r0, [r4, #0]
 80036f6:	1821      	adds	r1, r4, r0
 80036f8:	428b      	cmp	r3, r1
 80036fa:	d103      	bne.n	8003704 <_free_r+0x88>
 80036fc:	6819      	ldr	r1, [r3, #0]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	1809      	adds	r1, r1, r0
 8003702:	6021      	str	r1, [r4, #0]
 8003704:	6063      	str	r3, [r4, #4]
 8003706:	6054      	str	r4, [r2, #4]
 8003708:	e7ca      	b.n	80036a0 <_free_r+0x24>
 800370a:	46c0      	nop			@ (mov r8, r8)
 800370c:	200002b0 	.word	0x200002b0

08003710 <sbrk_aligned>:
 8003710:	b570      	push	{r4, r5, r6, lr}
 8003712:	4e0f      	ldr	r6, [pc, #60]	@ (8003750 <sbrk_aligned+0x40>)
 8003714:	000d      	movs	r5, r1
 8003716:	6831      	ldr	r1, [r6, #0]
 8003718:	0004      	movs	r4, r0
 800371a:	2900      	cmp	r1, #0
 800371c:	d102      	bne.n	8003724 <sbrk_aligned+0x14>
 800371e:	f000 fb99 	bl	8003e54 <_sbrk_r>
 8003722:	6030      	str	r0, [r6, #0]
 8003724:	0029      	movs	r1, r5
 8003726:	0020      	movs	r0, r4
 8003728:	f000 fb94 	bl	8003e54 <_sbrk_r>
 800372c:	1c43      	adds	r3, r0, #1
 800372e:	d103      	bne.n	8003738 <sbrk_aligned+0x28>
 8003730:	2501      	movs	r5, #1
 8003732:	426d      	negs	r5, r5
 8003734:	0028      	movs	r0, r5
 8003736:	bd70      	pop	{r4, r5, r6, pc}
 8003738:	2303      	movs	r3, #3
 800373a:	1cc5      	adds	r5, r0, #3
 800373c:	439d      	bics	r5, r3
 800373e:	42a8      	cmp	r0, r5
 8003740:	d0f8      	beq.n	8003734 <sbrk_aligned+0x24>
 8003742:	1a29      	subs	r1, r5, r0
 8003744:	0020      	movs	r0, r4
 8003746:	f000 fb85 	bl	8003e54 <_sbrk_r>
 800374a:	3001      	adds	r0, #1
 800374c:	d1f2      	bne.n	8003734 <sbrk_aligned+0x24>
 800374e:	e7ef      	b.n	8003730 <sbrk_aligned+0x20>
 8003750:	200002ac 	.word	0x200002ac

08003754 <_malloc_r>:
 8003754:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003756:	2203      	movs	r2, #3
 8003758:	1ccb      	adds	r3, r1, #3
 800375a:	4393      	bics	r3, r2
 800375c:	3308      	adds	r3, #8
 800375e:	0005      	movs	r5, r0
 8003760:	001f      	movs	r7, r3
 8003762:	2b0c      	cmp	r3, #12
 8003764:	d234      	bcs.n	80037d0 <_malloc_r+0x7c>
 8003766:	270c      	movs	r7, #12
 8003768:	42b9      	cmp	r1, r7
 800376a:	d833      	bhi.n	80037d4 <_malloc_r+0x80>
 800376c:	0028      	movs	r0, r5
 800376e:	f000 f871 	bl	8003854 <__malloc_lock>
 8003772:	4e37      	ldr	r6, [pc, #220]	@ (8003850 <_malloc_r+0xfc>)
 8003774:	6833      	ldr	r3, [r6, #0]
 8003776:	001c      	movs	r4, r3
 8003778:	2c00      	cmp	r4, #0
 800377a:	d12f      	bne.n	80037dc <_malloc_r+0x88>
 800377c:	0039      	movs	r1, r7
 800377e:	0028      	movs	r0, r5
 8003780:	f7ff ffc6 	bl	8003710 <sbrk_aligned>
 8003784:	0004      	movs	r4, r0
 8003786:	1c43      	adds	r3, r0, #1
 8003788:	d15f      	bne.n	800384a <_malloc_r+0xf6>
 800378a:	6834      	ldr	r4, [r6, #0]
 800378c:	9400      	str	r4, [sp, #0]
 800378e:	9b00      	ldr	r3, [sp, #0]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d14a      	bne.n	800382a <_malloc_r+0xd6>
 8003794:	2c00      	cmp	r4, #0
 8003796:	d052      	beq.n	800383e <_malloc_r+0xea>
 8003798:	6823      	ldr	r3, [r4, #0]
 800379a:	0028      	movs	r0, r5
 800379c:	18e3      	adds	r3, r4, r3
 800379e:	9900      	ldr	r1, [sp, #0]
 80037a0:	9301      	str	r3, [sp, #4]
 80037a2:	f000 fb57 	bl	8003e54 <_sbrk_r>
 80037a6:	9b01      	ldr	r3, [sp, #4]
 80037a8:	4283      	cmp	r3, r0
 80037aa:	d148      	bne.n	800383e <_malloc_r+0xea>
 80037ac:	6823      	ldr	r3, [r4, #0]
 80037ae:	0028      	movs	r0, r5
 80037b0:	1aff      	subs	r7, r7, r3
 80037b2:	0039      	movs	r1, r7
 80037b4:	f7ff ffac 	bl	8003710 <sbrk_aligned>
 80037b8:	3001      	adds	r0, #1
 80037ba:	d040      	beq.n	800383e <_malloc_r+0xea>
 80037bc:	6823      	ldr	r3, [r4, #0]
 80037be:	19db      	adds	r3, r3, r7
 80037c0:	6023      	str	r3, [r4, #0]
 80037c2:	6833      	ldr	r3, [r6, #0]
 80037c4:	685a      	ldr	r2, [r3, #4]
 80037c6:	2a00      	cmp	r2, #0
 80037c8:	d133      	bne.n	8003832 <_malloc_r+0xde>
 80037ca:	9b00      	ldr	r3, [sp, #0]
 80037cc:	6033      	str	r3, [r6, #0]
 80037ce:	e019      	b.n	8003804 <_malloc_r+0xb0>
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	dac9      	bge.n	8003768 <_malloc_r+0x14>
 80037d4:	230c      	movs	r3, #12
 80037d6:	602b      	str	r3, [r5, #0]
 80037d8:	2000      	movs	r0, #0
 80037da:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80037dc:	6821      	ldr	r1, [r4, #0]
 80037de:	1bc9      	subs	r1, r1, r7
 80037e0:	d420      	bmi.n	8003824 <_malloc_r+0xd0>
 80037e2:	290b      	cmp	r1, #11
 80037e4:	d90a      	bls.n	80037fc <_malloc_r+0xa8>
 80037e6:	19e2      	adds	r2, r4, r7
 80037e8:	6027      	str	r7, [r4, #0]
 80037ea:	42a3      	cmp	r3, r4
 80037ec:	d104      	bne.n	80037f8 <_malloc_r+0xa4>
 80037ee:	6032      	str	r2, [r6, #0]
 80037f0:	6863      	ldr	r3, [r4, #4]
 80037f2:	6011      	str	r1, [r2, #0]
 80037f4:	6053      	str	r3, [r2, #4]
 80037f6:	e005      	b.n	8003804 <_malloc_r+0xb0>
 80037f8:	605a      	str	r2, [r3, #4]
 80037fa:	e7f9      	b.n	80037f0 <_malloc_r+0x9c>
 80037fc:	6862      	ldr	r2, [r4, #4]
 80037fe:	42a3      	cmp	r3, r4
 8003800:	d10e      	bne.n	8003820 <_malloc_r+0xcc>
 8003802:	6032      	str	r2, [r6, #0]
 8003804:	0028      	movs	r0, r5
 8003806:	f000 f82d 	bl	8003864 <__malloc_unlock>
 800380a:	0020      	movs	r0, r4
 800380c:	2207      	movs	r2, #7
 800380e:	300b      	adds	r0, #11
 8003810:	1d23      	adds	r3, r4, #4
 8003812:	4390      	bics	r0, r2
 8003814:	1ac2      	subs	r2, r0, r3
 8003816:	4298      	cmp	r0, r3
 8003818:	d0df      	beq.n	80037da <_malloc_r+0x86>
 800381a:	1a1b      	subs	r3, r3, r0
 800381c:	50a3      	str	r3, [r4, r2]
 800381e:	e7dc      	b.n	80037da <_malloc_r+0x86>
 8003820:	605a      	str	r2, [r3, #4]
 8003822:	e7ef      	b.n	8003804 <_malloc_r+0xb0>
 8003824:	0023      	movs	r3, r4
 8003826:	6864      	ldr	r4, [r4, #4]
 8003828:	e7a6      	b.n	8003778 <_malloc_r+0x24>
 800382a:	9c00      	ldr	r4, [sp, #0]
 800382c:	6863      	ldr	r3, [r4, #4]
 800382e:	9300      	str	r3, [sp, #0]
 8003830:	e7ad      	b.n	800378e <_malloc_r+0x3a>
 8003832:	001a      	movs	r2, r3
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	42a3      	cmp	r3, r4
 8003838:	d1fb      	bne.n	8003832 <_malloc_r+0xde>
 800383a:	2300      	movs	r3, #0
 800383c:	e7da      	b.n	80037f4 <_malloc_r+0xa0>
 800383e:	230c      	movs	r3, #12
 8003840:	0028      	movs	r0, r5
 8003842:	602b      	str	r3, [r5, #0]
 8003844:	f000 f80e 	bl	8003864 <__malloc_unlock>
 8003848:	e7c6      	b.n	80037d8 <_malloc_r+0x84>
 800384a:	6007      	str	r7, [r0, #0]
 800384c:	e7da      	b.n	8003804 <_malloc_r+0xb0>
 800384e:	46c0      	nop			@ (mov r8, r8)
 8003850:	200002b0 	.word	0x200002b0

08003854 <__malloc_lock>:
 8003854:	b510      	push	{r4, lr}
 8003856:	4802      	ldr	r0, [pc, #8]	@ (8003860 <__malloc_lock+0xc>)
 8003858:	f7ff ff0e 	bl	8003678 <__retarget_lock_acquire_recursive>
 800385c:	bd10      	pop	{r4, pc}
 800385e:	46c0      	nop			@ (mov r8, r8)
 8003860:	200002a8 	.word	0x200002a8

08003864 <__malloc_unlock>:
 8003864:	b510      	push	{r4, lr}
 8003866:	4802      	ldr	r0, [pc, #8]	@ (8003870 <__malloc_unlock+0xc>)
 8003868:	f7ff ff07 	bl	800367a <__retarget_lock_release_recursive>
 800386c:	bd10      	pop	{r4, pc}
 800386e:	46c0      	nop			@ (mov r8, r8)
 8003870:	200002a8 	.word	0x200002a8

08003874 <__ssputs_r>:
 8003874:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003876:	688e      	ldr	r6, [r1, #8]
 8003878:	b085      	sub	sp, #20
 800387a:	001f      	movs	r7, r3
 800387c:	000c      	movs	r4, r1
 800387e:	680b      	ldr	r3, [r1, #0]
 8003880:	9002      	str	r0, [sp, #8]
 8003882:	9203      	str	r2, [sp, #12]
 8003884:	42be      	cmp	r6, r7
 8003886:	d830      	bhi.n	80038ea <__ssputs_r+0x76>
 8003888:	210c      	movs	r1, #12
 800388a:	5e62      	ldrsh	r2, [r4, r1]
 800388c:	2190      	movs	r1, #144	@ 0x90
 800388e:	00c9      	lsls	r1, r1, #3
 8003890:	420a      	tst	r2, r1
 8003892:	d028      	beq.n	80038e6 <__ssputs_r+0x72>
 8003894:	2003      	movs	r0, #3
 8003896:	6921      	ldr	r1, [r4, #16]
 8003898:	1a5b      	subs	r3, r3, r1
 800389a:	9301      	str	r3, [sp, #4]
 800389c:	6963      	ldr	r3, [r4, #20]
 800389e:	4343      	muls	r3, r0
 80038a0:	9801      	ldr	r0, [sp, #4]
 80038a2:	0fdd      	lsrs	r5, r3, #31
 80038a4:	18ed      	adds	r5, r5, r3
 80038a6:	1c7b      	adds	r3, r7, #1
 80038a8:	181b      	adds	r3, r3, r0
 80038aa:	106d      	asrs	r5, r5, #1
 80038ac:	42ab      	cmp	r3, r5
 80038ae:	d900      	bls.n	80038b2 <__ssputs_r+0x3e>
 80038b0:	001d      	movs	r5, r3
 80038b2:	0552      	lsls	r2, r2, #21
 80038b4:	d528      	bpl.n	8003908 <__ssputs_r+0x94>
 80038b6:	0029      	movs	r1, r5
 80038b8:	9802      	ldr	r0, [sp, #8]
 80038ba:	f7ff ff4b 	bl	8003754 <_malloc_r>
 80038be:	1e06      	subs	r6, r0, #0
 80038c0:	d02c      	beq.n	800391c <__ssputs_r+0xa8>
 80038c2:	9a01      	ldr	r2, [sp, #4]
 80038c4:	6921      	ldr	r1, [r4, #16]
 80038c6:	f000 fae2 	bl	8003e8e <memcpy>
 80038ca:	89a2      	ldrh	r2, [r4, #12]
 80038cc:	4b18      	ldr	r3, [pc, #96]	@ (8003930 <__ssputs_r+0xbc>)
 80038ce:	401a      	ands	r2, r3
 80038d0:	2380      	movs	r3, #128	@ 0x80
 80038d2:	4313      	orrs	r3, r2
 80038d4:	81a3      	strh	r3, [r4, #12]
 80038d6:	9b01      	ldr	r3, [sp, #4]
 80038d8:	6126      	str	r6, [r4, #16]
 80038da:	18f6      	adds	r6, r6, r3
 80038dc:	6026      	str	r6, [r4, #0]
 80038de:	003e      	movs	r6, r7
 80038e0:	6165      	str	r5, [r4, #20]
 80038e2:	1aed      	subs	r5, r5, r3
 80038e4:	60a5      	str	r5, [r4, #8]
 80038e6:	42be      	cmp	r6, r7
 80038e8:	d900      	bls.n	80038ec <__ssputs_r+0x78>
 80038ea:	003e      	movs	r6, r7
 80038ec:	0032      	movs	r2, r6
 80038ee:	9903      	ldr	r1, [sp, #12]
 80038f0:	6820      	ldr	r0, [r4, #0]
 80038f2:	f000 fa9b 	bl	8003e2c <memmove>
 80038f6:	2000      	movs	r0, #0
 80038f8:	68a3      	ldr	r3, [r4, #8]
 80038fa:	1b9b      	subs	r3, r3, r6
 80038fc:	60a3      	str	r3, [r4, #8]
 80038fe:	6823      	ldr	r3, [r4, #0]
 8003900:	199b      	adds	r3, r3, r6
 8003902:	6023      	str	r3, [r4, #0]
 8003904:	b005      	add	sp, #20
 8003906:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003908:	002a      	movs	r2, r5
 800390a:	9802      	ldr	r0, [sp, #8]
 800390c:	f000 fac8 	bl	8003ea0 <_realloc_r>
 8003910:	1e06      	subs	r6, r0, #0
 8003912:	d1e0      	bne.n	80038d6 <__ssputs_r+0x62>
 8003914:	6921      	ldr	r1, [r4, #16]
 8003916:	9802      	ldr	r0, [sp, #8]
 8003918:	f7ff feb0 	bl	800367c <_free_r>
 800391c:	230c      	movs	r3, #12
 800391e:	2001      	movs	r0, #1
 8003920:	9a02      	ldr	r2, [sp, #8]
 8003922:	4240      	negs	r0, r0
 8003924:	6013      	str	r3, [r2, #0]
 8003926:	89a2      	ldrh	r2, [r4, #12]
 8003928:	3334      	adds	r3, #52	@ 0x34
 800392a:	4313      	orrs	r3, r2
 800392c:	81a3      	strh	r3, [r4, #12]
 800392e:	e7e9      	b.n	8003904 <__ssputs_r+0x90>
 8003930:	fffffb7f 	.word	0xfffffb7f

08003934 <_svfiprintf_r>:
 8003934:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003936:	b0a1      	sub	sp, #132	@ 0x84
 8003938:	9003      	str	r0, [sp, #12]
 800393a:	001d      	movs	r5, r3
 800393c:	898b      	ldrh	r3, [r1, #12]
 800393e:	000f      	movs	r7, r1
 8003940:	0016      	movs	r6, r2
 8003942:	061b      	lsls	r3, r3, #24
 8003944:	d511      	bpl.n	800396a <_svfiprintf_r+0x36>
 8003946:	690b      	ldr	r3, [r1, #16]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d10e      	bne.n	800396a <_svfiprintf_r+0x36>
 800394c:	2140      	movs	r1, #64	@ 0x40
 800394e:	f7ff ff01 	bl	8003754 <_malloc_r>
 8003952:	6038      	str	r0, [r7, #0]
 8003954:	6138      	str	r0, [r7, #16]
 8003956:	2800      	cmp	r0, #0
 8003958:	d105      	bne.n	8003966 <_svfiprintf_r+0x32>
 800395a:	230c      	movs	r3, #12
 800395c:	9a03      	ldr	r2, [sp, #12]
 800395e:	6013      	str	r3, [r2, #0]
 8003960:	2001      	movs	r0, #1
 8003962:	4240      	negs	r0, r0
 8003964:	e0cf      	b.n	8003b06 <_svfiprintf_r+0x1d2>
 8003966:	2340      	movs	r3, #64	@ 0x40
 8003968:	617b      	str	r3, [r7, #20]
 800396a:	2300      	movs	r3, #0
 800396c:	ac08      	add	r4, sp, #32
 800396e:	6163      	str	r3, [r4, #20]
 8003970:	3320      	adds	r3, #32
 8003972:	7663      	strb	r3, [r4, #25]
 8003974:	3310      	adds	r3, #16
 8003976:	76a3      	strb	r3, [r4, #26]
 8003978:	9507      	str	r5, [sp, #28]
 800397a:	0035      	movs	r5, r6
 800397c:	782b      	ldrb	r3, [r5, #0]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d001      	beq.n	8003986 <_svfiprintf_r+0x52>
 8003982:	2b25      	cmp	r3, #37	@ 0x25
 8003984:	d148      	bne.n	8003a18 <_svfiprintf_r+0xe4>
 8003986:	1bab      	subs	r3, r5, r6
 8003988:	9305      	str	r3, [sp, #20]
 800398a:	42b5      	cmp	r5, r6
 800398c:	d00b      	beq.n	80039a6 <_svfiprintf_r+0x72>
 800398e:	0032      	movs	r2, r6
 8003990:	0039      	movs	r1, r7
 8003992:	9803      	ldr	r0, [sp, #12]
 8003994:	f7ff ff6e 	bl	8003874 <__ssputs_r>
 8003998:	3001      	adds	r0, #1
 800399a:	d100      	bne.n	800399e <_svfiprintf_r+0x6a>
 800399c:	e0ae      	b.n	8003afc <_svfiprintf_r+0x1c8>
 800399e:	6963      	ldr	r3, [r4, #20]
 80039a0:	9a05      	ldr	r2, [sp, #20]
 80039a2:	189b      	adds	r3, r3, r2
 80039a4:	6163      	str	r3, [r4, #20]
 80039a6:	782b      	ldrb	r3, [r5, #0]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d100      	bne.n	80039ae <_svfiprintf_r+0x7a>
 80039ac:	e0a6      	b.n	8003afc <_svfiprintf_r+0x1c8>
 80039ae:	2201      	movs	r2, #1
 80039b0:	2300      	movs	r3, #0
 80039b2:	4252      	negs	r2, r2
 80039b4:	6062      	str	r2, [r4, #4]
 80039b6:	a904      	add	r1, sp, #16
 80039b8:	3254      	adds	r2, #84	@ 0x54
 80039ba:	1852      	adds	r2, r2, r1
 80039bc:	1c6e      	adds	r6, r5, #1
 80039be:	6023      	str	r3, [r4, #0]
 80039c0:	60e3      	str	r3, [r4, #12]
 80039c2:	60a3      	str	r3, [r4, #8]
 80039c4:	7013      	strb	r3, [r2, #0]
 80039c6:	65a3      	str	r3, [r4, #88]	@ 0x58
 80039c8:	4b54      	ldr	r3, [pc, #336]	@ (8003b1c <_svfiprintf_r+0x1e8>)
 80039ca:	2205      	movs	r2, #5
 80039cc:	0018      	movs	r0, r3
 80039ce:	7831      	ldrb	r1, [r6, #0]
 80039d0:	9305      	str	r3, [sp, #20]
 80039d2:	f000 fa51 	bl	8003e78 <memchr>
 80039d6:	1c75      	adds	r5, r6, #1
 80039d8:	2800      	cmp	r0, #0
 80039da:	d11f      	bne.n	8003a1c <_svfiprintf_r+0xe8>
 80039dc:	6822      	ldr	r2, [r4, #0]
 80039de:	06d3      	lsls	r3, r2, #27
 80039e0:	d504      	bpl.n	80039ec <_svfiprintf_r+0xb8>
 80039e2:	2353      	movs	r3, #83	@ 0x53
 80039e4:	a904      	add	r1, sp, #16
 80039e6:	185b      	adds	r3, r3, r1
 80039e8:	2120      	movs	r1, #32
 80039ea:	7019      	strb	r1, [r3, #0]
 80039ec:	0713      	lsls	r3, r2, #28
 80039ee:	d504      	bpl.n	80039fa <_svfiprintf_r+0xc6>
 80039f0:	2353      	movs	r3, #83	@ 0x53
 80039f2:	a904      	add	r1, sp, #16
 80039f4:	185b      	adds	r3, r3, r1
 80039f6:	212b      	movs	r1, #43	@ 0x2b
 80039f8:	7019      	strb	r1, [r3, #0]
 80039fa:	7833      	ldrb	r3, [r6, #0]
 80039fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80039fe:	d016      	beq.n	8003a2e <_svfiprintf_r+0xfa>
 8003a00:	0035      	movs	r5, r6
 8003a02:	2100      	movs	r1, #0
 8003a04:	200a      	movs	r0, #10
 8003a06:	68e3      	ldr	r3, [r4, #12]
 8003a08:	782a      	ldrb	r2, [r5, #0]
 8003a0a:	1c6e      	adds	r6, r5, #1
 8003a0c:	3a30      	subs	r2, #48	@ 0x30
 8003a0e:	2a09      	cmp	r2, #9
 8003a10:	d950      	bls.n	8003ab4 <_svfiprintf_r+0x180>
 8003a12:	2900      	cmp	r1, #0
 8003a14:	d111      	bne.n	8003a3a <_svfiprintf_r+0x106>
 8003a16:	e017      	b.n	8003a48 <_svfiprintf_r+0x114>
 8003a18:	3501      	adds	r5, #1
 8003a1a:	e7af      	b.n	800397c <_svfiprintf_r+0x48>
 8003a1c:	9b05      	ldr	r3, [sp, #20]
 8003a1e:	6822      	ldr	r2, [r4, #0]
 8003a20:	1ac0      	subs	r0, r0, r3
 8003a22:	2301      	movs	r3, #1
 8003a24:	4083      	lsls	r3, r0
 8003a26:	4313      	orrs	r3, r2
 8003a28:	002e      	movs	r6, r5
 8003a2a:	6023      	str	r3, [r4, #0]
 8003a2c:	e7cc      	b.n	80039c8 <_svfiprintf_r+0x94>
 8003a2e:	9b07      	ldr	r3, [sp, #28]
 8003a30:	1d19      	adds	r1, r3, #4
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	9107      	str	r1, [sp, #28]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	db01      	blt.n	8003a3e <_svfiprintf_r+0x10a>
 8003a3a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003a3c:	e004      	b.n	8003a48 <_svfiprintf_r+0x114>
 8003a3e:	425b      	negs	r3, r3
 8003a40:	60e3      	str	r3, [r4, #12]
 8003a42:	2302      	movs	r3, #2
 8003a44:	4313      	orrs	r3, r2
 8003a46:	6023      	str	r3, [r4, #0]
 8003a48:	782b      	ldrb	r3, [r5, #0]
 8003a4a:	2b2e      	cmp	r3, #46	@ 0x2e
 8003a4c:	d10c      	bne.n	8003a68 <_svfiprintf_r+0x134>
 8003a4e:	786b      	ldrb	r3, [r5, #1]
 8003a50:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a52:	d134      	bne.n	8003abe <_svfiprintf_r+0x18a>
 8003a54:	9b07      	ldr	r3, [sp, #28]
 8003a56:	3502      	adds	r5, #2
 8003a58:	1d1a      	adds	r2, r3, #4
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	9207      	str	r2, [sp, #28]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	da01      	bge.n	8003a66 <_svfiprintf_r+0x132>
 8003a62:	2301      	movs	r3, #1
 8003a64:	425b      	negs	r3, r3
 8003a66:	9309      	str	r3, [sp, #36]	@ 0x24
 8003a68:	4e2d      	ldr	r6, [pc, #180]	@ (8003b20 <_svfiprintf_r+0x1ec>)
 8003a6a:	2203      	movs	r2, #3
 8003a6c:	0030      	movs	r0, r6
 8003a6e:	7829      	ldrb	r1, [r5, #0]
 8003a70:	f000 fa02 	bl	8003e78 <memchr>
 8003a74:	2800      	cmp	r0, #0
 8003a76:	d006      	beq.n	8003a86 <_svfiprintf_r+0x152>
 8003a78:	2340      	movs	r3, #64	@ 0x40
 8003a7a:	1b80      	subs	r0, r0, r6
 8003a7c:	4083      	lsls	r3, r0
 8003a7e:	6822      	ldr	r2, [r4, #0]
 8003a80:	3501      	adds	r5, #1
 8003a82:	4313      	orrs	r3, r2
 8003a84:	6023      	str	r3, [r4, #0]
 8003a86:	7829      	ldrb	r1, [r5, #0]
 8003a88:	2206      	movs	r2, #6
 8003a8a:	4826      	ldr	r0, [pc, #152]	@ (8003b24 <_svfiprintf_r+0x1f0>)
 8003a8c:	1c6e      	adds	r6, r5, #1
 8003a8e:	7621      	strb	r1, [r4, #24]
 8003a90:	f000 f9f2 	bl	8003e78 <memchr>
 8003a94:	2800      	cmp	r0, #0
 8003a96:	d038      	beq.n	8003b0a <_svfiprintf_r+0x1d6>
 8003a98:	4b23      	ldr	r3, [pc, #140]	@ (8003b28 <_svfiprintf_r+0x1f4>)
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d122      	bne.n	8003ae4 <_svfiprintf_r+0x1b0>
 8003a9e:	2207      	movs	r2, #7
 8003aa0:	9b07      	ldr	r3, [sp, #28]
 8003aa2:	3307      	adds	r3, #7
 8003aa4:	4393      	bics	r3, r2
 8003aa6:	3308      	adds	r3, #8
 8003aa8:	9307      	str	r3, [sp, #28]
 8003aaa:	6963      	ldr	r3, [r4, #20]
 8003aac:	9a04      	ldr	r2, [sp, #16]
 8003aae:	189b      	adds	r3, r3, r2
 8003ab0:	6163      	str	r3, [r4, #20]
 8003ab2:	e762      	b.n	800397a <_svfiprintf_r+0x46>
 8003ab4:	4343      	muls	r3, r0
 8003ab6:	0035      	movs	r5, r6
 8003ab8:	2101      	movs	r1, #1
 8003aba:	189b      	adds	r3, r3, r2
 8003abc:	e7a4      	b.n	8003a08 <_svfiprintf_r+0xd4>
 8003abe:	2300      	movs	r3, #0
 8003ac0:	200a      	movs	r0, #10
 8003ac2:	0019      	movs	r1, r3
 8003ac4:	3501      	adds	r5, #1
 8003ac6:	6063      	str	r3, [r4, #4]
 8003ac8:	782a      	ldrb	r2, [r5, #0]
 8003aca:	1c6e      	adds	r6, r5, #1
 8003acc:	3a30      	subs	r2, #48	@ 0x30
 8003ace:	2a09      	cmp	r2, #9
 8003ad0:	d903      	bls.n	8003ada <_svfiprintf_r+0x1a6>
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d0c8      	beq.n	8003a68 <_svfiprintf_r+0x134>
 8003ad6:	9109      	str	r1, [sp, #36]	@ 0x24
 8003ad8:	e7c6      	b.n	8003a68 <_svfiprintf_r+0x134>
 8003ada:	4341      	muls	r1, r0
 8003adc:	0035      	movs	r5, r6
 8003ade:	2301      	movs	r3, #1
 8003ae0:	1889      	adds	r1, r1, r2
 8003ae2:	e7f1      	b.n	8003ac8 <_svfiprintf_r+0x194>
 8003ae4:	aa07      	add	r2, sp, #28
 8003ae6:	9200      	str	r2, [sp, #0]
 8003ae8:	0021      	movs	r1, r4
 8003aea:	003a      	movs	r2, r7
 8003aec:	4b0f      	ldr	r3, [pc, #60]	@ (8003b2c <_svfiprintf_r+0x1f8>)
 8003aee:	9803      	ldr	r0, [sp, #12]
 8003af0:	e000      	b.n	8003af4 <_svfiprintf_r+0x1c0>
 8003af2:	bf00      	nop
 8003af4:	9004      	str	r0, [sp, #16]
 8003af6:	9b04      	ldr	r3, [sp, #16]
 8003af8:	3301      	adds	r3, #1
 8003afa:	d1d6      	bne.n	8003aaa <_svfiprintf_r+0x176>
 8003afc:	89bb      	ldrh	r3, [r7, #12]
 8003afe:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8003b00:	065b      	lsls	r3, r3, #25
 8003b02:	d500      	bpl.n	8003b06 <_svfiprintf_r+0x1d2>
 8003b04:	e72c      	b.n	8003960 <_svfiprintf_r+0x2c>
 8003b06:	b021      	add	sp, #132	@ 0x84
 8003b08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b0a:	aa07      	add	r2, sp, #28
 8003b0c:	9200      	str	r2, [sp, #0]
 8003b0e:	0021      	movs	r1, r4
 8003b10:	003a      	movs	r2, r7
 8003b12:	4b06      	ldr	r3, [pc, #24]	@ (8003b2c <_svfiprintf_r+0x1f8>)
 8003b14:	9803      	ldr	r0, [sp, #12]
 8003b16:	f000 f87b 	bl	8003c10 <_printf_i>
 8003b1a:	e7eb      	b.n	8003af4 <_svfiprintf_r+0x1c0>
 8003b1c:	080040b4 	.word	0x080040b4
 8003b20:	080040ba 	.word	0x080040ba
 8003b24:	080040be 	.word	0x080040be
 8003b28:	00000000 	.word	0x00000000
 8003b2c:	08003875 	.word	0x08003875

08003b30 <_printf_common>:
 8003b30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b32:	0016      	movs	r6, r2
 8003b34:	9301      	str	r3, [sp, #4]
 8003b36:	688a      	ldr	r2, [r1, #8]
 8003b38:	690b      	ldr	r3, [r1, #16]
 8003b3a:	000c      	movs	r4, r1
 8003b3c:	9000      	str	r0, [sp, #0]
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	da00      	bge.n	8003b44 <_printf_common+0x14>
 8003b42:	0013      	movs	r3, r2
 8003b44:	0022      	movs	r2, r4
 8003b46:	6033      	str	r3, [r6, #0]
 8003b48:	3243      	adds	r2, #67	@ 0x43
 8003b4a:	7812      	ldrb	r2, [r2, #0]
 8003b4c:	2a00      	cmp	r2, #0
 8003b4e:	d001      	beq.n	8003b54 <_printf_common+0x24>
 8003b50:	3301      	adds	r3, #1
 8003b52:	6033      	str	r3, [r6, #0]
 8003b54:	6823      	ldr	r3, [r4, #0]
 8003b56:	069b      	lsls	r3, r3, #26
 8003b58:	d502      	bpl.n	8003b60 <_printf_common+0x30>
 8003b5a:	6833      	ldr	r3, [r6, #0]
 8003b5c:	3302      	adds	r3, #2
 8003b5e:	6033      	str	r3, [r6, #0]
 8003b60:	6822      	ldr	r2, [r4, #0]
 8003b62:	2306      	movs	r3, #6
 8003b64:	0015      	movs	r5, r2
 8003b66:	401d      	ands	r5, r3
 8003b68:	421a      	tst	r2, r3
 8003b6a:	d027      	beq.n	8003bbc <_printf_common+0x8c>
 8003b6c:	0023      	movs	r3, r4
 8003b6e:	3343      	adds	r3, #67	@ 0x43
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	1e5a      	subs	r2, r3, #1
 8003b74:	4193      	sbcs	r3, r2
 8003b76:	6822      	ldr	r2, [r4, #0]
 8003b78:	0692      	lsls	r2, r2, #26
 8003b7a:	d430      	bmi.n	8003bde <_printf_common+0xae>
 8003b7c:	0022      	movs	r2, r4
 8003b7e:	9901      	ldr	r1, [sp, #4]
 8003b80:	9800      	ldr	r0, [sp, #0]
 8003b82:	9d08      	ldr	r5, [sp, #32]
 8003b84:	3243      	adds	r2, #67	@ 0x43
 8003b86:	47a8      	blx	r5
 8003b88:	3001      	adds	r0, #1
 8003b8a:	d025      	beq.n	8003bd8 <_printf_common+0xa8>
 8003b8c:	2206      	movs	r2, #6
 8003b8e:	6823      	ldr	r3, [r4, #0]
 8003b90:	2500      	movs	r5, #0
 8003b92:	4013      	ands	r3, r2
 8003b94:	2b04      	cmp	r3, #4
 8003b96:	d105      	bne.n	8003ba4 <_printf_common+0x74>
 8003b98:	6833      	ldr	r3, [r6, #0]
 8003b9a:	68e5      	ldr	r5, [r4, #12]
 8003b9c:	1aed      	subs	r5, r5, r3
 8003b9e:	43eb      	mvns	r3, r5
 8003ba0:	17db      	asrs	r3, r3, #31
 8003ba2:	401d      	ands	r5, r3
 8003ba4:	68a3      	ldr	r3, [r4, #8]
 8003ba6:	6922      	ldr	r2, [r4, #16]
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	dd01      	ble.n	8003bb0 <_printf_common+0x80>
 8003bac:	1a9b      	subs	r3, r3, r2
 8003bae:	18ed      	adds	r5, r5, r3
 8003bb0:	2600      	movs	r6, #0
 8003bb2:	42b5      	cmp	r5, r6
 8003bb4:	d120      	bne.n	8003bf8 <_printf_common+0xc8>
 8003bb6:	2000      	movs	r0, #0
 8003bb8:	e010      	b.n	8003bdc <_printf_common+0xac>
 8003bba:	3501      	adds	r5, #1
 8003bbc:	68e3      	ldr	r3, [r4, #12]
 8003bbe:	6832      	ldr	r2, [r6, #0]
 8003bc0:	1a9b      	subs	r3, r3, r2
 8003bc2:	42ab      	cmp	r3, r5
 8003bc4:	ddd2      	ble.n	8003b6c <_printf_common+0x3c>
 8003bc6:	0022      	movs	r2, r4
 8003bc8:	2301      	movs	r3, #1
 8003bca:	9901      	ldr	r1, [sp, #4]
 8003bcc:	9800      	ldr	r0, [sp, #0]
 8003bce:	9f08      	ldr	r7, [sp, #32]
 8003bd0:	3219      	adds	r2, #25
 8003bd2:	47b8      	blx	r7
 8003bd4:	3001      	adds	r0, #1
 8003bd6:	d1f0      	bne.n	8003bba <_printf_common+0x8a>
 8003bd8:	2001      	movs	r0, #1
 8003bda:	4240      	negs	r0, r0
 8003bdc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003bde:	2030      	movs	r0, #48	@ 0x30
 8003be0:	18e1      	adds	r1, r4, r3
 8003be2:	3143      	adds	r1, #67	@ 0x43
 8003be4:	7008      	strb	r0, [r1, #0]
 8003be6:	0021      	movs	r1, r4
 8003be8:	1c5a      	adds	r2, r3, #1
 8003bea:	3145      	adds	r1, #69	@ 0x45
 8003bec:	7809      	ldrb	r1, [r1, #0]
 8003bee:	18a2      	adds	r2, r4, r2
 8003bf0:	3243      	adds	r2, #67	@ 0x43
 8003bf2:	3302      	adds	r3, #2
 8003bf4:	7011      	strb	r1, [r2, #0]
 8003bf6:	e7c1      	b.n	8003b7c <_printf_common+0x4c>
 8003bf8:	0022      	movs	r2, r4
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	9901      	ldr	r1, [sp, #4]
 8003bfe:	9800      	ldr	r0, [sp, #0]
 8003c00:	9f08      	ldr	r7, [sp, #32]
 8003c02:	321a      	adds	r2, #26
 8003c04:	47b8      	blx	r7
 8003c06:	3001      	adds	r0, #1
 8003c08:	d0e6      	beq.n	8003bd8 <_printf_common+0xa8>
 8003c0a:	3601      	adds	r6, #1
 8003c0c:	e7d1      	b.n	8003bb2 <_printf_common+0x82>
	...

08003c10 <_printf_i>:
 8003c10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c12:	b08b      	sub	sp, #44	@ 0x2c
 8003c14:	9206      	str	r2, [sp, #24]
 8003c16:	000a      	movs	r2, r1
 8003c18:	3243      	adds	r2, #67	@ 0x43
 8003c1a:	9307      	str	r3, [sp, #28]
 8003c1c:	9005      	str	r0, [sp, #20]
 8003c1e:	9203      	str	r2, [sp, #12]
 8003c20:	7e0a      	ldrb	r2, [r1, #24]
 8003c22:	000c      	movs	r4, r1
 8003c24:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8003c26:	2a78      	cmp	r2, #120	@ 0x78
 8003c28:	d809      	bhi.n	8003c3e <_printf_i+0x2e>
 8003c2a:	2a62      	cmp	r2, #98	@ 0x62
 8003c2c:	d80b      	bhi.n	8003c46 <_printf_i+0x36>
 8003c2e:	2a00      	cmp	r2, #0
 8003c30:	d100      	bne.n	8003c34 <_printf_i+0x24>
 8003c32:	e0bc      	b.n	8003dae <_printf_i+0x19e>
 8003c34:	497b      	ldr	r1, [pc, #492]	@ (8003e24 <_printf_i+0x214>)
 8003c36:	9104      	str	r1, [sp, #16]
 8003c38:	2a58      	cmp	r2, #88	@ 0x58
 8003c3a:	d100      	bne.n	8003c3e <_printf_i+0x2e>
 8003c3c:	e090      	b.n	8003d60 <_printf_i+0x150>
 8003c3e:	0025      	movs	r5, r4
 8003c40:	3542      	adds	r5, #66	@ 0x42
 8003c42:	702a      	strb	r2, [r5, #0]
 8003c44:	e022      	b.n	8003c8c <_printf_i+0x7c>
 8003c46:	0010      	movs	r0, r2
 8003c48:	3863      	subs	r0, #99	@ 0x63
 8003c4a:	2815      	cmp	r0, #21
 8003c4c:	d8f7      	bhi.n	8003c3e <_printf_i+0x2e>
 8003c4e:	f7fc fa5f 	bl	8000110 <__gnu_thumb1_case_shi>
 8003c52:	0016      	.short	0x0016
 8003c54:	fff6001f 	.word	0xfff6001f
 8003c58:	fff6fff6 	.word	0xfff6fff6
 8003c5c:	001ffff6 	.word	0x001ffff6
 8003c60:	fff6fff6 	.word	0xfff6fff6
 8003c64:	fff6fff6 	.word	0xfff6fff6
 8003c68:	003600a1 	.word	0x003600a1
 8003c6c:	fff60080 	.word	0xfff60080
 8003c70:	00b2fff6 	.word	0x00b2fff6
 8003c74:	0036fff6 	.word	0x0036fff6
 8003c78:	fff6fff6 	.word	0xfff6fff6
 8003c7c:	0084      	.short	0x0084
 8003c7e:	0025      	movs	r5, r4
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	3542      	adds	r5, #66	@ 0x42
 8003c84:	1d11      	adds	r1, r2, #4
 8003c86:	6019      	str	r1, [r3, #0]
 8003c88:	6813      	ldr	r3, [r2, #0]
 8003c8a:	702b      	strb	r3, [r5, #0]
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e0a0      	b.n	8003dd2 <_printf_i+0x1c2>
 8003c90:	6818      	ldr	r0, [r3, #0]
 8003c92:	6809      	ldr	r1, [r1, #0]
 8003c94:	1d02      	adds	r2, r0, #4
 8003c96:	060d      	lsls	r5, r1, #24
 8003c98:	d50b      	bpl.n	8003cb2 <_printf_i+0xa2>
 8003c9a:	6806      	ldr	r6, [r0, #0]
 8003c9c:	601a      	str	r2, [r3, #0]
 8003c9e:	2e00      	cmp	r6, #0
 8003ca0:	da03      	bge.n	8003caa <_printf_i+0x9a>
 8003ca2:	232d      	movs	r3, #45	@ 0x2d
 8003ca4:	9a03      	ldr	r2, [sp, #12]
 8003ca6:	4276      	negs	r6, r6
 8003ca8:	7013      	strb	r3, [r2, #0]
 8003caa:	4b5e      	ldr	r3, [pc, #376]	@ (8003e24 <_printf_i+0x214>)
 8003cac:	270a      	movs	r7, #10
 8003cae:	9304      	str	r3, [sp, #16]
 8003cb0:	e018      	b.n	8003ce4 <_printf_i+0xd4>
 8003cb2:	6806      	ldr	r6, [r0, #0]
 8003cb4:	601a      	str	r2, [r3, #0]
 8003cb6:	0649      	lsls	r1, r1, #25
 8003cb8:	d5f1      	bpl.n	8003c9e <_printf_i+0x8e>
 8003cba:	b236      	sxth	r6, r6
 8003cbc:	e7ef      	b.n	8003c9e <_printf_i+0x8e>
 8003cbe:	6808      	ldr	r0, [r1, #0]
 8003cc0:	6819      	ldr	r1, [r3, #0]
 8003cc2:	c940      	ldmia	r1!, {r6}
 8003cc4:	0605      	lsls	r5, r0, #24
 8003cc6:	d402      	bmi.n	8003cce <_printf_i+0xbe>
 8003cc8:	0640      	lsls	r0, r0, #25
 8003cca:	d500      	bpl.n	8003cce <_printf_i+0xbe>
 8003ccc:	b2b6      	uxth	r6, r6
 8003cce:	6019      	str	r1, [r3, #0]
 8003cd0:	4b54      	ldr	r3, [pc, #336]	@ (8003e24 <_printf_i+0x214>)
 8003cd2:	270a      	movs	r7, #10
 8003cd4:	9304      	str	r3, [sp, #16]
 8003cd6:	2a6f      	cmp	r2, #111	@ 0x6f
 8003cd8:	d100      	bne.n	8003cdc <_printf_i+0xcc>
 8003cda:	3f02      	subs	r7, #2
 8003cdc:	0023      	movs	r3, r4
 8003cde:	2200      	movs	r2, #0
 8003ce0:	3343      	adds	r3, #67	@ 0x43
 8003ce2:	701a      	strb	r2, [r3, #0]
 8003ce4:	6863      	ldr	r3, [r4, #4]
 8003ce6:	60a3      	str	r3, [r4, #8]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	db03      	blt.n	8003cf4 <_printf_i+0xe4>
 8003cec:	2104      	movs	r1, #4
 8003cee:	6822      	ldr	r2, [r4, #0]
 8003cf0:	438a      	bics	r2, r1
 8003cf2:	6022      	str	r2, [r4, #0]
 8003cf4:	2e00      	cmp	r6, #0
 8003cf6:	d102      	bne.n	8003cfe <_printf_i+0xee>
 8003cf8:	9d03      	ldr	r5, [sp, #12]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00c      	beq.n	8003d18 <_printf_i+0x108>
 8003cfe:	9d03      	ldr	r5, [sp, #12]
 8003d00:	0030      	movs	r0, r6
 8003d02:	0039      	movs	r1, r7
 8003d04:	f7fc fa94 	bl	8000230 <__aeabi_uidivmod>
 8003d08:	9b04      	ldr	r3, [sp, #16]
 8003d0a:	3d01      	subs	r5, #1
 8003d0c:	5c5b      	ldrb	r3, [r3, r1]
 8003d0e:	702b      	strb	r3, [r5, #0]
 8003d10:	0033      	movs	r3, r6
 8003d12:	0006      	movs	r6, r0
 8003d14:	429f      	cmp	r7, r3
 8003d16:	d9f3      	bls.n	8003d00 <_printf_i+0xf0>
 8003d18:	2f08      	cmp	r7, #8
 8003d1a:	d109      	bne.n	8003d30 <_printf_i+0x120>
 8003d1c:	6823      	ldr	r3, [r4, #0]
 8003d1e:	07db      	lsls	r3, r3, #31
 8003d20:	d506      	bpl.n	8003d30 <_printf_i+0x120>
 8003d22:	6862      	ldr	r2, [r4, #4]
 8003d24:	6923      	ldr	r3, [r4, #16]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	dc02      	bgt.n	8003d30 <_printf_i+0x120>
 8003d2a:	2330      	movs	r3, #48	@ 0x30
 8003d2c:	3d01      	subs	r5, #1
 8003d2e:	702b      	strb	r3, [r5, #0]
 8003d30:	9b03      	ldr	r3, [sp, #12]
 8003d32:	1b5b      	subs	r3, r3, r5
 8003d34:	6123      	str	r3, [r4, #16]
 8003d36:	9b07      	ldr	r3, [sp, #28]
 8003d38:	0021      	movs	r1, r4
 8003d3a:	9300      	str	r3, [sp, #0]
 8003d3c:	9805      	ldr	r0, [sp, #20]
 8003d3e:	9b06      	ldr	r3, [sp, #24]
 8003d40:	aa09      	add	r2, sp, #36	@ 0x24
 8003d42:	f7ff fef5 	bl	8003b30 <_printf_common>
 8003d46:	3001      	adds	r0, #1
 8003d48:	d148      	bne.n	8003ddc <_printf_i+0x1cc>
 8003d4a:	2001      	movs	r0, #1
 8003d4c:	4240      	negs	r0, r0
 8003d4e:	b00b      	add	sp, #44	@ 0x2c
 8003d50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d52:	2220      	movs	r2, #32
 8003d54:	6809      	ldr	r1, [r1, #0]
 8003d56:	430a      	orrs	r2, r1
 8003d58:	6022      	str	r2, [r4, #0]
 8003d5a:	2278      	movs	r2, #120	@ 0x78
 8003d5c:	4932      	ldr	r1, [pc, #200]	@ (8003e28 <_printf_i+0x218>)
 8003d5e:	9104      	str	r1, [sp, #16]
 8003d60:	0021      	movs	r1, r4
 8003d62:	3145      	adds	r1, #69	@ 0x45
 8003d64:	700a      	strb	r2, [r1, #0]
 8003d66:	6819      	ldr	r1, [r3, #0]
 8003d68:	6822      	ldr	r2, [r4, #0]
 8003d6a:	c940      	ldmia	r1!, {r6}
 8003d6c:	0610      	lsls	r0, r2, #24
 8003d6e:	d402      	bmi.n	8003d76 <_printf_i+0x166>
 8003d70:	0650      	lsls	r0, r2, #25
 8003d72:	d500      	bpl.n	8003d76 <_printf_i+0x166>
 8003d74:	b2b6      	uxth	r6, r6
 8003d76:	6019      	str	r1, [r3, #0]
 8003d78:	07d3      	lsls	r3, r2, #31
 8003d7a:	d502      	bpl.n	8003d82 <_printf_i+0x172>
 8003d7c:	2320      	movs	r3, #32
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	6023      	str	r3, [r4, #0]
 8003d82:	2e00      	cmp	r6, #0
 8003d84:	d001      	beq.n	8003d8a <_printf_i+0x17a>
 8003d86:	2710      	movs	r7, #16
 8003d88:	e7a8      	b.n	8003cdc <_printf_i+0xcc>
 8003d8a:	2220      	movs	r2, #32
 8003d8c:	6823      	ldr	r3, [r4, #0]
 8003d8e:	4393      	bics	r3, r2
 8003d90:	6023      	str	r3, [r4, #0]
 8003d92:	e7f8      	b.n	8003d86 <_printf_i+0x176>
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	680d      	ldr	r5, [r1, #0]
 8003d98:	1d10      	adds	r0, r2, #4
 8003d9a:	6949      	ldr	r1, [r1, #20]
 8003d9c:	6018      	str	r0, [r3, #0]
 8003d9e:	6813      	ldr	r3, [r2, #0]
 8003da0:	062e      	lsls	r6, r5, #24
 8003da2:	d501      	bpl.n	8003da8 <_printf_i+0x198>
 8003da4:	6019      	str	r1, [r3, #0]
 8003da6:	e002      	b.n	8003dae <_printf_i+0x19e>
 8003da8:	066d      	lsls	r5, r5, #25
 8003daa:	d5fb      	bpl.n	8003da4 <_printf_i+0x194>
 8003dac:	8019      	strh	r1, [r3, #0]
 8003dae:	2300      	movs	r3, #0
 8003db0:	9d03      	ldr	r5, [sp, #12]
 8003db2:	6123      	str	r3, [r4, #16]
 8003db4:	e7bf      	b.n	8003d36 <_printf_i+0x126>
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	1d11      	adds	r1, r2, #4
 8003dba:	6019      	str	r1, [r3, #0]
 8003dbc:	6815      	ldr	r5, [r2, #0]
 8003dbe:	2100      	movs	r1, #0
 8003dc0:	0028      	movs	r0, r5
 8003dc2:	6862      	ldr	r2, [r4, #4]
 8003dc4:	f000 f858 	bl	8003e78 <memchr>
 8003dc8:	2800      	cmp	r0, #0
 8003dca:	d001      	beq.n	8003dd0 <_printf_i+0x1c0>
 8003dcc:	1b40      	subs	r0, r0, r5
 8003dce:	6060      	str	r0, [r4, #4]
 8003dd0:	6863      	ldr	r3, [r4, #4]
 8003dd2:	6123      	str	r3, [r4, #16]
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	9a03      	ldr	r2, [sp, #12]
 8003dd8:	7013      	strb	r3, [r2, #0]
 8003dda:	e7ac      	b.n	8003d36 <_printf_i+0x126>
 8003ddc:	002a      	movs	r2, r5
 8003dde:	6923      	ldr	r3, [r4, #16]
 8003de0:	9906      	ldr	r1, [sp, #24]
 8003de2:	9805      	ldr	r0, [sp, #20]
 8003de4:	9d07      	ldr	r5, [sp, #28]
 8003de6:	47a8      	blx	r5
 8003de8:	3001      	adds	r0, #1
 8003dea:	d0ae      	beq.n	8003d4a <_printf_i+0x13a>
 8003dec:	6823      	ldr	r3, [r4, #0]
 8003dee:	079b      	lsls	r3, r3, #30
 8003df0:	d415      	bmi.n	8003e1e <_printf_i+0x20e>
 8003df2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003df4:	68e0      	ldr	r0, [r4, #12]
 8003df6:	4298      	cmp	r0, r3
 8003df8:	daa9      	bge.n	8003d4e <_printf_i+0x13e>
 8003dfa:	0018      	movs	r0, r3
 8003dfc:	e7a7      	b.n	8003d4e <_printf_i+0x13e>
 8003dfe:	0022      	movs	r2, r4
 8003e00:	2301      	movs	r3, #1
 8003e02:	9906      	ldr	r1, [sp, #24]
 8003e04:	9805      	ldr	r0, [sp, #20]
 8003e06:	9e07      	ldr	r6, [sp, #28]
 8003e08:	3219      	adds	r2, #25
 8003e0a:	47b0      	blx	r6
 8003e0c:	3001      	adds	r0, #1
 8003e0e:	d09c      	beq.n	8003d4a <_printf_i+0x13a>
 8003e10:	3501      	adds	r5, #1
 8003e12:	68e3      	ldr	r3, [r4, #12]
 8003e14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003e16:	1a9b      	subs	r3, r3, r2
 8003e18:	42ab      	cmp	r3, r5
 8003e1a:	dcf0      	bgt.n	8003dfe <_printf_i+0x1ee>
 8003e1c:	e7e9      	b.n	8003df2 <_printf_i+0x1e2>
 8003e1e:	2500      	movs	r5, #0
 8003e20:	e7f7      	b.n	8003e12 <_printf_i+0x202>
 8003e22:	46c0      	nop			@ (mov r8, r8)
 8003e24:	080040c5 	.word	0x080040c5
 8003e28:	080040d6 	.word	0x080040d6

08003e2c <memmove>:
 8003e2c:	b510      	push	{r4, lr}
 8003e2e:	4288      	cmp	r0, r1
 8003e30:	d806      	bhi.n	8003e40 <memmove+0x14>
 8003e32:	2300      	movs	r3, #0
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d008      	beq.n	8003e4a <memmove+0x1e>
 8003e38:	5ccc      	ldrb	r4, [r1, r3]
 8003e3a:	54c4      	strb	r4, [r0, r3]
 8003e3c:	3301      	adds	r3, #1
 8003e3e:	e7f9      	b.n	8003e34 <memmove+0x8>
 8003e40:	188b      	adds	r3, r1, r2
 8003e42:	4298      	cmp	r0, r3
 8003e44:	d2f5      	bcs.n	8003e32 <memmove+0x6>
 8003e46:	3a01      	subs	r2, #1
 8003e48:	d200      	bcs.n	8003e4c <memmove+0x20>
 8003e4a:	bd10      	pop	{r4, pc}
 8003e4c:	5c8b      	ldrb	r3, [r1, r2]
 8003e4e:	5483      	strb	r3, [r0, r2]
 8003e50:	e7f9      	b.n	8003e46 <memmove+0x1a>
	...

08003e54 <_sbrk_r>:
 8003e54:	2300      	movs	r3, #0
 8003e56:	b570      	push	{r4, r5, r6, lr}
 8003e58:	4d06      	ldr	r5, [pc, #24]	@ (8003e74 <_sbrk_r+0x20>)
 8003e5a:	0004      	movs	r4, r0
 8003e5c:	0008      	movs	r0, r1
 8003e5e:	602b      	str	r3, [r5, #0]
 8003e60:	f7fc ff0c 	bl	8000c7c <_sbrk>
 8003e64:	1c43      	adds	r3, r0, #1
 8003e66:	d103      	bne.n	8003e70 <_sbrk_r+0x1c>
 8003e68:	682b      	ldr	r3, [r5, #0]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d000      	beq.n	8003e70 <_sbrk_r+0x1c>
 8003e6e:	6023      	str	r3, [r4, #0]
 8003e70:	bd70      	pop	{r4, r5, r6, pc}
 8003e72:	46c0      	nop			@ (mov r8, r8)
 8003e74:	200002a4 	.word	0x200002a4

08003e78 <memchr>:
 8003e78:	b2c9      	uxtb	r1, r1
 8003e7a:	1882      	adds	r2, r0, r2
 8003e7c:	4290      	cmp	r0, r2
 8003e7e:	d101      	bne.n	8003e84 <memchr+0xc>
 8003e80:	2000      	movs	r0, #0
 8003e82:	4770      	bx	lr
 8003e84:	7803      	ldrb	r3, [r0, #0]
 8003e86:	428b      	cmp	r3, r1
 8003e88:	d0fb      	beq.n	8003e82 <memchr+0xa>
 8003e8a:	3001      	adds	r0, #1
 8003e8c:	e7f6      	b.n	8003e7c <memchr+0x4>

08003e8e <memcpy>:
 8003e8e:	2300      	movs	r3, #0
 8003e90:	b510      	push	{r4, lr}
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d100      	bne.n	8003e98 <memcpy+0xa>
 8003e96:	bd10      	pop	{r4, pc}
 8003e98:	5ccc      	ldrb	r4, [r1, r3]
 8003e9a:	54c4      	strb	r4, [r0, r3]
 8003e9c:	3301      	adds	r3, #1
 8003e9e:	e7f8      	b.n	8003e92 <memcpy+0x4>

08003ea0 <_realloc_r>:
 8003ea0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003ea2:	0006      	movs	r6, r0
 8003ea4:	000c      	movs	r4, r1
 8003ea6:	0015      	movs	r5, r2
 8003ea8:	2900      	cmp	r1, #0
 8003eaa:	d105      	bne.n	8003eb8 <_realloc_r+0x18>
 8003eac:	0011      	movs	r1, r2
 8003eae:	f7ff fc51 	bl	8003754 <_malloc_r>
 8003eb2:	0004      	movs	r4, r0
 8003eb4:	0020      	movs	r0, r4
 8003eb6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003eb8:	2a00      	cmp	r2, #0
 8003eba:	d103      	bne.n	8003ec4 <_realloc_r+0x24>
 8003ebc:	f7ff fbde 	bl	800367c <_free_r>
 8003ec0:	2400      	movs	r4, #0
 8003ec2:	e7f7      	b.n	8003eb4 <_realloc_r+0x14>
 8003ec4:	f000 f81b 	bl	8003efe <_malloc_usable_size_r>
 8003ec8:	0007      	movs	r7, r0
 8003eca:	4285      	cmp	r5, r0
 8003ecc:	d802      	bhi.n	8003ed4 <_realloc_r+0x34>
 8003ece:	0843      	lsrs	r3, r0, #1
 8003ed0:	42ab      	cmp	r3, r5
 8003ed2:	d3ef      	bcc.n	8003eb4 <_realloc_r+0x14>
 8003ed4:	0029      	movs	r1, r5
 8003ed6:	0030      	movs	r0, r6
 8003ed8:	f7ff fc3c 	bl	8003754 <_malloc_r>
 8003edc:	9001      	str	r0, [sp, #4]
 8003ede:	2800      	cmp	r0, #0
 8003ee0:	d0ee      	beq.n	8003ec0 <_realloc_r+0x20>
 8003ee2:	002a      	movs	r2, r5
 8003ee4:	42bd      	cmp	r5, r7
 8003ee6:	d900      	bls.n	8003eea <_realloc_r+0x4a>
 8003ee8:	003a      	movs	r2, r7
 8003eea:	0021      	movs	r1, r4
 8003eec:	9801      	ldr	r0, [sp, #4]
 8003eee:	f7ff ffce 	bl	8003e8e <memcpy>
 8003ef2:	0021      	movs	r1, r4
 8003ef4:	0030      	movs	r0, r6
 8003ef6:	f7ff fbc1 	bl	800367c <_free_r>
 8003efa:	9c01      	ldr	r4, [sp, #4]
 8003efc:	e7da      	b.n	8003eb4 <_realloc_r+0x14>

08003efe <_malloc_usable_size_r>:
 8003efe:	1f0b      	subs	r3, r1, #4
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	1f18      	subs	r0, r3, #4
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	da01      	bge.n	8003f0c <_malloc_usable_size_r+0xe>
 8003f08:	580b      	ldr	r3, [r1, r0]
 8003f0a:	18c0      	adds	r0, r0, r3
 8003f0c:	4770      	bx	lr
	...

08003f10 <_init>:
 8003f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f12:	46c0      	nop			@ (mov r8, r8)
 8003f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f16:	bc08      	pop	{r3}
 8003f18:	469e      	mov	lr, r3
 8003f1a:	4770      	bx	lr

08003f1c <_fini>:
 8003f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f1e:	46c0      	nop			@ (mov r8, r8)
 8003f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f22:	bc08      	pop	{r3}
 8003f24:	469e      	mov	lr, r3
 8003f26:	4770      	bx	lr
