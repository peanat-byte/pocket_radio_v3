
pocket_radio_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b9c  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  08003c54  08003c54  00004c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e1c  08003e1c  0000505c  2**0
                  CONTENTS
  4 .ARM          00000000  08003e1c  08003e1c  0000505c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003e1c  08003e1c  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e1c  08003e1c  00004e1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003e20  08003e20  00004e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003e24  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000254  2000005c  08003e80  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b0  08003e80  000052b0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ca6f  00000000  00000000  00005084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d09  00000000  00000000  00011af3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a88  00000000  00000000  00013800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000083a  00000000  00000000  00014288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015061  00000000  00000000  00014ac2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e9a9  00000000  00000000  00029b23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082943  00000000  00000000  000384cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bae0f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029f4  00000000  00000000  000bae54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000bd848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000005c 	.word	0x2000005c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08003c3c 	.word	0x08003c3c

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000060 	.word	0x20000060
 80000fc:	08003c3c 	.word	0x08003c3c

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_shi>:
 8000110:	b403      	push	{r0, r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0040      	lsls	r0, r0, #1
 8000118:	0049      	lsls	r1, r1, #1
 800011a:	5e09      	ldrsh	r1, [r1, r0]
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	448e      	add	lr, r1
 8000120:	bc03      	pop	{r0, r1}
 8000122:	4770      	bx	lr

08000124 <__udivsi3>:
 8000124:	2200      	movs	r2, #0
 8000126:	0843      	lsrs	r3, r0, #1
 8000128:	428b      	cmp	r3, r1
 800012a:	d374      	bcc.n	8000216 <__udivsi3+0xf2>
 800012c:	0903      	lsrs	r3, r0, #4
 800012e:	428b      	cmp	r3, r1
 8000130:	d35f      	bcc.n	80001f2 <__udivsi3+0xce>
 8000132:	0a03      	lsrs	r3, r0, #8
 8000134:	428b      	cmp	r3, r1
 8000136:	d344      	bcc.n	80001c2 <__udivsi3+0x9e>
 8000138:	0b03      	lsrs	r3, r0, #12
 800013a:	428b      	cmp	r3, r1
 800013c:	d328      	bcc.n	8000190 <__udivsi3+0x6c>
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d30d      	bcc.n	8000160 <__udivsi3+0x3c>
 8000144:	22ff      	movs	r2, #255	@ 0xff
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	ba12      	rev	r2, r2
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d302      	bcc.n	8000156 <__udivsi3+0x32>
 8000150:	1212      	asrs	r2, r2, #8
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	d065      	beq.n	8000222 <__udivsi3+0xfe>
 8000156:	0b03      	lsrs	r3, r0, #12
 8000158:	428b      	cmp	r3, r1
 800015a:	d319      	bcc.n	8000190 <__udivsi3+0x6c>
 800015c:	e000      	b.n	8000160 <__udivsi3+0x3c>
 800015e:	0a09      	lsrs	r1, r1, #8
 8000160:	0bc3      	lsrs	r3, r0, #15
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x46>
 8000166:	03cb      	lsls	r3, r1, #15
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b83      	lsrs	r3, r0, #14
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x52>
 8000172:	038b      	lsls	r3, r1, #14
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b43      	lsrs	r3, r0, #13
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x5e>
 800017e:	034b      	lsls	r3, r1, #13
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b03      	lsrs	r3, r0, #12
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x6a>
 800018a:	030b      	lsls	r3, r1, #12
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0ac3      	lsrs	r3, r0, #11
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x76>
 8000196:	02cb      	lsls	r3, r1, #11
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a83      	lsrs	r3, r0, #10
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x82>
 80001a2:	028b      	lsls	r3, r1, #10
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a43      	lsrs	r3, r0, #9
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x8e>
 80001ae:	024b      	lsls	r3, r1, #9
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a03      	lsrs	r3, r0, #8
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x9a>
 80001ba:	020b      	lsls	r3, r1, #8
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	d2cd      	bcs.n	800015e <__udivsi3+0x3a>
 80001c2:	09c3      	lsrs	r3, r0, #7
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xa8>
 80001c8:	01cb      	lsls	r3, r1, #7
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0983      	lsrs	r3, r0, #6
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xb4>
 80001d4:	018b      	lsls	r3, r1, #6
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0943      	lsrs	r3, r0, #5
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xc0>
 80001e0:	014b      	lsls	r3, r1, #5
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0903      	lsrs	r3, r0, #4
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xcc>
 80001ec:	010b      	lsls	r3, r1, #4
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	08c3      	lsrs	r3, r0, #3
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xd8>
 80001f8:	00cb      	lsls	r3, r1, #3
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0883      	lsrs	r3, r0, #2
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xe4>
 8000204:	008b      	lsls	r3, r1, #2
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0843      	lsrs	r3, r0, #1
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xf0>
 8000210:	004b      	lsls	r3, r1, #1
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	1a41      	subs	r1, r0, r1
 8000218:	d200      	bcs.n	800021c <__udivsi3+0xf8>
 800021a:	4601      	mov	r1, r0
 800021c:	4152      	adcs	r2, r2
 800021e:	4610      	mov	r0, r2
 8000220:	4770      	bx	lr
 8000222:	e7ff      	b.n	8000224 <__udivsi3+0x100>
 8000224:	b501      	push	{r0, lr}
 8000226:	2000      	movs	r0, #0
 8000228:	f000 f806 	bl	8000238 <__aeabi_idiv0>
 800022c:	bd02      	pop	{r1, pc}
 800022e:	46c0      	nop			@ (mov r8, r8)

08000230 <__aeabi_uidivmod>:
 8000230:	2900      	cmp	r1, #0
 8000232:	d0f7      	beq.n	8000224 <__udivsi3+0x100>
 8000234:	e776      	b.n	8000124 <__udivsi3>
 8000236:	4770      	bx	lr

08000238 <__aeabi_idiv0>:
 8000238:	4770      	bx	lr
 800023a:	46c0      	nop			@ (mov r8, r8)

0800023c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b090      	sub	sp, #64	@ 0x40
 8000240:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000242:	f000 fc75 	bl	8000b30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000246:	f000 f835 	bl	80002b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800024a:	f000 f8fb 	bl	8000444 <MX_GPIO_Init>
  MX_I2C1_Init();
 800024e:	f000 f885 	bl	800035c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000252:	f000 f8c3 	bl	80003dc <MX_USART2_UART_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  HAL_GPIO_WritePin(GPIOB, DIG2_Pin, GPIO_PIN_SET);
 8000256:	2380      	movs	r3, #128	@ 0x80
 8000258:	015b      	lsls	r3, r3, #5
 800025a:	4812      	ldr	r0, [pc, #72]	@ (80002a4 <main+0x68>)
 800025c:	2201      	movs	r2, #1
 800025e:	0019      	movs	r1, r3
 8000260:	f000 ff28 	bl	80010b4 <HAL_GPIO_WritePin>

	  HAL_Delay(1000);
 8000264:	23fa      	movs	r3, #250	@ 0xfa
 8000266:	009b      	lsls	r3, r3, #2
 8000268:	0018      	movs	r0, r3
 800026a:	f000 fce7 	bl	8000c3c <HAL_Delay>

	  char msg[64];
	  sprintf(msg, "I'M ALIVEEEE");
 800026e:	4a0e      	ldr	r2, [pc, #56]	@ (80002a8 <main+0x6c>)
 8000270:	003b      	movs	r3, r7
 8000272:	0011      	movs	r1, r2
 8000274:	0018      	movs	r0, r3
 8000276:	f003 f843 	bl	8003300 <siprintf>
	  Print_UART(msg);
 800027a:	003b      	movs	r3, r7
 800027c:	0018      	movs	r0, r3
 800027e:	f000 f967 	bl	8000550 <Print_UART>

	  Power_Up();
 8000282:	f000 f97b 	bl	800057c <Power_Up>
	  Get_Rev();
 8000286:	f000 f997 	bl	80005b8 <Get_Rev>
	  Set_Property();
 800028a:	f000 fa33 	bl	80006f4 <Set_Property>
	  FM_Tune_Freq(10350);
 800028e:	4b07      	ldr	r3, [pc, #28]	@ (80002ac <main+0x70>)
 8000290:	0018      	movs	r0, r3
 8000292:	f000 fa4d 	bl	8000730 <FM_Tune_Freq>
	  FM_Tune_Status();
 8000296:	f000 fa81 	bl	800079c <FM_Tune_Status>

	  while (1)
	  {
		  HAL_Delay(10000);
 800029a:	4b05      	ldr	r3, [pc, #20]	@ (80002b0 <main+0x74>)
 800029c:	0018      	movs	r0, r3
 800029e:	f000 fccd 	bl	8000c3c <HAL_Delay>
 80002a2:	e7fa      	b.n	800029a <main+0x5e>
 80002a4:	50000400 	.word	0x50000400
 80002a8:	08003c54 	.word	0x08003c54
 80002ac:	0000286e 	.word	0x0000286e
 80002b0:	00002710 	.word	0x00002710

080002b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b4:	b590      	push	{r4, r7, lr}
 80002b6:	b093      	sub	sp, #76	@ 0x4c
 80002b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ba:	2414      	movs	r4, #20
 80002bc:	193b      	adds	r3, r7, r4
 80002be:	0018      	movs	r0, r3
 80002c0:	2334      	movs	r3, #52	@ 0x34
 80002c2:	001a      	movs	r2, r3
 80002c4:	2100      	movs	r1, #0
 80002c6:	f003 f83b 	bl	8003340 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ca:	1d3b      	adds	r3, r7, #4
 80002cc:	0018      	movs	r0, r3
 80002ce:	2310      	movs	r3, #16
 80002d0:	001a      	movs	r2, r3
 80002d2:	2100      	movs	r1, #0
 80002d4:	f003 f834 	bl	8003340 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002d8:	2380      	movs	r3, #128	@ 0x80
 80002da:	009b      	lsls	r3, r3, #2
 80002dc:	0018      	movs	r0, r3
 80002de:	f001 fd4b 	bl	8001d78 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002e2:	193b      	adds	r3, r7, r4
 80002e4:	2201      	movs	r2, #1
 80002e6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002e8:	193b      	adds	r3, r7, r4
 80002ea:	2280      	movs	r2, #128	@ 0x80
 80002ec:	0252      	lsls	r2, r2, #9
 80002ee:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002f0:	0021      	movs	r1, r4
 80002f2:	187b      	adds	r3, r7, r1
 80002f4:	2202      	movs	r2, #2
 80002f6:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002f8:	187b      	adds	r3, r7, r1
 80002fa:	2203      	movs	r2, #3
 80002fc:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80002fe:	187b      	adds	r3, r7, r1
 8000300:	2200      	movs	r2, #0
 8000302:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000304:	187b      	adds	r3, r7, r1
 8000306:	220c      	movs	r2, #12
 8000308:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800030a:	187b      	adds	r3, r7, r1
 800030c:	2280      	movs	r2, #128	@ 0x80
 800030e:	0292      	lsls	r2, r2, #10
 8000310:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000312:	187b      	adds	r3, r7, r1
 8000314:	2280      	movs	r2, #128	@ 0x80
 8000316:	0592      	lsls	r2, r2, #22
 8000318:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800031a:	187b      	adds	r3, r7, r1
 800031c:	0018      	movs	r0, r3
 800031e:	f001 fd77 	bl	8001e10 <HAL_RCC_OscConfig>
 8000322:	1e03      	subs	r3, r0, #0
 8000324:	d001      	beq.n	800032a <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000326:	f000 faad 	bl	8000884 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800032a:	1d3b      	adds	r3, r7, #4
 800032c:	2207      	movs	r2, #7
 800032e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000330:	1d3b      	adds	r3, r7, #4
 8000332:	2202      	movs	r2, #2
 8000334:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000336:	1d3b      	adds	r3, r7, #4
 8000338:	2200      	movs	r2, #0
 800033a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800033c:	1d3b      	adds	r3, r7, #4
 800033e:	2200      	movs	r2, #0
 8000340:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000342:	1d3b      	adds	r3, r7, #4
 8000344:	2101      	movs	r1, #1
 8000346:	0018      	movs	r0, r3
 8000348:	f002 f872 	bl	8002430 <HAL_RCC_ClockConfig>
 800034c:	1e03      	subs	r3, r0, #0
 800034e:	d001      	beq.n	8000354 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000350:	f000 fa98 	bl	8000884 <Error_Handler>
  }
}
 8000354:	46c0      	nop			@ (mov r8, r8)
 8000356:	46bd      	mov	sp, r7
 8000358:	b013      	add	sp, #76	@ 0x4c
 800035a:	bd90      	pop	{r4, r7, pc}

0800035c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000360:	4b1b      	ldr	r3, [pc, #108]	@ (80003d0 <MX_I2C1_Init+0x74>)
 8000362:	4a1c      	ldr	r2, [pc, #112]	@ (80003d4 <MX_I2C1_Init+0x78>)
 8000364:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10805D88;
 8000366:	4b1a      	ldr	r3, [pc, #104]	@ (80003d0 <MX_I2C1_Init+0x74>)
 8000368:	4a1b      	ldr	r2, [pc, #108]	@ (80003d8 <MX_I2C1_Init+0x7c>)
 800036a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800036c:	4b18      	ldr	r3, [pc, #96]	@ (80003d0 <MX_I2C1_Init+0x74>)
 800036e:	2200      	movs	r2, #0
 8000370:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000372:	4b17      	ldr	r3, [pc, #92]	@ (80003d0 <MX_I2C1_Init+0x74>)
 8000374:	2201      	movs	r2, #1
 8000376:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000378:	4b15      	ldr	r3, [pc, #84]	@ (80003d0 <MX_I2C1_Init+0x74>)
 800037a:	2200      	movs	r2, #0
 800037c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800037e:	4b14      	ldr	r3, [pc, #80]	@ (80003d0 <MX_I2C1_Init+0x74>)
 8000380:	2200      	movs	r2, #0
 8000382:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000384:	4b12      	ldr	r3, [pc, #72]	@ (80003d0 <MX_I2C1_Init+0x74>)
 8000386:	2200      	movs	r2, #0
 8000388:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800038a:	4b11      	ldr	r3, [pc, #68]	@ (80003d0 <MX_I2C1_Init+0x74>)
 800038c:	2200      	movs	r2, #0
 800038e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000390:	4b0f      	ldr	r3, [pc, #60]	@ (80003d0 <MX_I2C1_Init+0x74>)
 8000392:	2200      	movs	r2, #0
 8000394:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000396:	4b0e      	ldr	r3, [pc, #56]	@ (80003d0 <MX_I2C1_Init+0x74>)
 8000398:	0018      	movs	r0, r3
 800039a:	f000 fea9 	bl	80010f0 <HAL_I2C_Init>
 800039e:	1e03      	subs	r3, r0, #0
 80003a0:	d001      	beq.n	80003a6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80003a2:	f000 fa6f 	bl	8000884 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003a6:	4b0a      	ldr	r3, [pc, #40]	@ (80003d0 <MX_I2C1_Init+0x74>)
 80003a8:	2100      	movs	r1, #0
 80003aa:	0018      	movs	r0, r3
 80003ac:	f001 fc4c 	bl	8001c48 <HAL_I2CEx_ConfigAnalogFilter>
 80003b0:	1e03      	subs	r3, r0, #0
 80003b2:	d001      	beq.n	80003b8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80003b4:	f000 fa66 	bl	8000884 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80003b8:	4b05      	ldr	r3, [pc, #20]	@ (80003d0 <MX_I2C1_Init+0x74>)
 80003ba:	2100      	movs	r1, #0
 80003bc:	0018      	movs	r0, r3
 80003be:	f001 fc8f 	bl	8001ce0 <HAL_I2CEx_ConfigDigitalFilter>
 80003c2:	1e03      	subs	r3, r0, #0
 80003c4:	d001      	beq.n	80003ca <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80003c6:	f000 fa5d 	bl	8000884 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003ca:	46c0      	nop			@ (mov r8, r8)
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd80      	pop	{r7, pc}
 80003d0:	20000078 	.word	0x20000078
 80003d4:	40005400 	.word	0x40005400
 80003d8:	10805d88 	.word	0x10805d88

080003dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003e0:	4b16      	ldr	r3, [pc, #88]	@ (800043c <MX_USART2_UART_Init+0x60>)
 80003e2:	4a17      	ldr	r2, [pc, #92]	@ (8000440 <MX_USART2_UART_Init+0x64>)
 80003e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80003e6:	4b15      	ldr	r3, [pc, #84]	@ (800043c <MX_USART2_UART_Init+0x60>)
 80003e8:	22e1      	movs	r2, #225	@ 0xe1
 80003ea:	0252      	lsls	r2, r2, #9
 80003ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003ee:	4b13      	ldr	r3, [pc, #76]	@ (800043c <MX_USART2_UART_Init+0x60>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003f4:	4b11      	ldr	r3, [pc, #68]	@ (800043c <MX_USART2_UART_Init+0x60>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003fa:	4b10      	ldr	r3, [pc, #64]	@ (800043c <MX_USART2_UART_Init+0x60>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000400:	4b0e      	ldr	r3, [pc, #56]	@ (800043c <MX_USART2_UART_Init+0x60>)
 8000402:	220c      	movs	r2, #12
 8000404:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000406:	4b0d      	ldr	r3, [pc, #52]	@ (800043c <MX_USART2_UART_Init+0x60>)
 8000408:	2200      	movs	r2, #0
 800040a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800040c:	4b0b      	ldr	r3, [pc, #44]	@ (800043c <MX_USART2_UART_Init+0x60>)
 800040e:	2200      	movs	r2, #0
 8000410:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000412:	4b0a      	ldr	r3, [pc, #40]	@ (800043c <MX_USART2_UART_Init+0x60>)
 8000414:	2200      	movs	r2, #0
 8000416:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000418:	4b08      	ldr	r3, [pc, #32]	@ (800043c <MX_USART2_UART_Init+0x60>)
 800041a:	2200      	movs	r2, #0
 800041c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800041e:	4b07      	ldr	r3, [pc, #28]	@ (800043c <MX_USART2_UART_Init+0x60>)
 8000420:	2200      	movs	r2, #0
 8000422:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000424:	4b05      	ldr	r3, [pc, #20]	@ (800043c <MX_USART2_UART_Init+0x60>)
 8000426:	0018      	movs	r0, r3
 8000428:	f002 fad2 	bl	80029d0 <HAL_UART_Init>
 800042c:	1e03      	subs	r3, r0, #0
 800042e:	d001      	beq.n	8000434 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000430:	f000 fa28 	bl	8000884 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000434:	46c0      	nop			@ (mov r8, r8)
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
 800043a:	46c0      	nop			@ (mov r8, r8)
 800043c:	200000cc 	.word	0x200000cc
 8000440:	40004400 	.word	0x40004400

08000444 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000444:	b590      	push	{r4, r7, lr}
 8000446:	b089      	sub	sp, #36	@ 0x24
 8000448:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800044a:	240c      	movs	r4, #12
 800044c:	193b      	adds	r3, r7, r4
 800044e:	0018      	movs	r0, r3
 8000450:	2314      	movs	r3, #20
 8000452:	001a      	movs	r2, r3
 8000454:	2100      	movs	r1, #0
 8000456:	f002 ff73 	bl	8003340 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800045a:	4b3a      	ldr	r3, [pc, #232]	@ (8000544 <MX_GPIO_Init+0x100>)
 800045c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800045e:	4b39      	ldr	r3, [pc, #228]	@ (8000544 <MX_GPIO_Init+0x100>)
 8000460:	2120      	movs	r1, #32
 8000462:	430a      	orrs	r2, r1
 8000464:	635a      	str	r2, [r3, #52]	@ 0x34
 8000466:	4b37      	ldr	r3, [pc, #220]	@ (8000544 <MX_GPIO_Init+0x100>)
 8000468:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800046a:	2220      	movs	r2, #32
 800046c:	4013      	ands	r3, r2
 800046e:	60bb      	str	r3, [r7, #8]
 8000470:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000472:	4b34      	ldr	r3, [pc, #208]	@ (8000544 <MX_GPIO_Init+0x100>)
 8000474:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000476:	4b33      	ldr	r3, [pc, #204]	@ (8000544 <MX_GPIO_Init+0x100>)
 8000478:	2101      	movs	r1, #1
 800047a:	430a      	orrs	r2, r1
 800047c:	635a      	str	r2, [r3, #52]	@ 0x34
 800047e:	4b31      	ldr	r3, [pc, #196]	@ (8000544 <MX_GPIO_Init+0x100>)
 8000480:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000482:	2201      	movs	r2, #1
 8000484:	4013      	ands	r3, r2
 8000486:	607b      	str	r3, [r7, #4]
 8000488:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800048a:	4b2e      	ldr	r3, [pc, #184]	@ (8000544 <MX_GPIO_Init+0x100>)
 800048c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800048e:	4b2d      	ldr	r3, [pc, #180]	@ (8000544 <MX_GPIO_Init+0x100>)
 8000490:	2102      	movs	r1, #2
 8000492:	430a      	orrs	r2, r1
 8000494:	635a      	str	r2, [r3, #52]	@ 0x34
 8000496:	4b2b      	ldr	r3, [pc, #172]	@ (8000544 <MX_GPIO_Init+0x100>)
 8000498:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800049a:	2202      	movs	r2, #2
 800049c:	4013      	ands	r3, r2
 800049e:	603b      	str	r3, [r7, #0]
 80004a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIG1_Pin|DIG2_Pin|DIG4_Pin|DIG8_Pin
 80004a2:	4929      	ldr	r1, [pc, #164]	@ (8000548 <MX_GPIO_Init+0x104>)
 80004a4:	4b29      	ldr	r3, [pc, #164]	@ (800054c <MX_GPIO_Init+0x108>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	0018      	movs	r0, r3
 80004aa:	f000 fe03 	bl	80010b4 <HAL_GPIO_WritePin>
                          |IND_Pin|ADDR_SEL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : VOL_P_Pin CHAN_M_Pin CHAN_P_Pin VOL_M_Pin */
  GPIO_InitStruct.Pin = VOL_P_Pin|CHAN_M_Pin|CHAN_P_Pin|VOL_M_Pin;
 80004ae:	193b      	adds	r3, r7, r4
 80004b0:	220f      	movs	r2, #15
 80004b2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004b4:	193b      	adds	r3, r7, r4
 80004b6:	2200      	movs	r2, #0
 80004b8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004ba:	193b      	adds	r3, r7, r4
 80004bc:	2201      	movs	r2, #1
 80004be:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004c0:	193b      	adds	r3, r7, r4
 80004c2:	4a22      	ldr	r2, [pc, #136]	@ (800054c <MX_GPIO_Init+0x108>)
 80004c4:	0019      	movs	r1, r3
 80004c6:	0010      	movs	r0, r2
 80004c8:	f000 fc90 	bl	8000dec <HAL_GPIO_Init>

  /*Configure GPIO pins : DIG1_Pin DIG2_Pin DIG4_Pin DIG8_Pin
                           IND_Pin */
  GPIO_InitStruct.Pin = DIG1_Pin|DIG2_Pin|DIG4_Pin|DIG8_Pin
 80004cc:	0021      	movs	r1, r4
 80004ce:	187b      	adds	r3, r7, r1
 80004d0:	22f8      	movs	r2, #248	@ 0xf8
 80004d2:	0212      	lsls	r2, r2, #8
 80004d4:	601a      	str	r2, [r3, #0]
                          |IND_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d6:	000c      	movs	r4, r1
 80004d8:	193b      	adds	r3, r7, r4
 80004da:	2201      	movs	r2, #1
 80004dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004de:	193b      	adds	r3, r7, r4
 80004e0:	2200      	movs	r2, #0
 80004e2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004e4:	193b      	adds	r3, r7, r4
 80004e6:	2200      	movs	r2, #0
 80004e8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004ea:	193b      	adds	r3, r7, r4
 80004ec:	4a17      	ldr	r2, [pc, #92]	@ (800054c <MX_GPIO_Init+0x108>)
 80004ee:	0019      	movs	r1, r3
 80004f0:	0010      	movs	r0, r2
 80004f2:	f000 fc7b 	bl	8000dec <HAL_GPIO_Init>

  /*Configure GPIO pin : ADDR_SEL_Pin */
  GPIO_InitStruct.Pin = ADDR_SEL_Pin;
 80004f6:	193b      	adds	r3, r7, r4
 80004f8:	2220      	movs	r2, #32
 80004fa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004fc:	193b      	adds	r3, r7, r4
 80004fe:	2201      	movs	r2, #1
 8000500:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000502:	193b      	adds	r3, r7, r4
 8000504:	2202      	movs	r2, #2
 8000506:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000508:	193b      	adds	r3, r7, r4
 800050a:	2200      	movs	r2, #0
 800050c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(ADDR_SEL_GPIO_Port, &GPIO_InitStruct);
 800050e:	193b      	adds	r3, r7, r4
 8000510:	4a0e      	ldr	r2, [pc, #56]	@ (800054c <MX_GPIO_Init+0x108>)
 8000512:	0019      	movs	r1, r3
 8000514:	0010      	movs	r0, r2
 8000516:	f000 fc69 	bl	8000dec <HAL_GPIO_Init>

  /*Configure GPIO pins : GPO1_Pin GPO2_Pin */
  GPIO_InitStruct.Pin = GPO1_Pin|GPO2_Pin;
 800051a:	0021      	movs	r1, r4
 800051c:	187b      	adds	r3, r7, r1
 800051e:	22c0      	movs	r2, #192	@ 0xc0
 8000520:	0092      	lsls	r2, r2, #2
 8000522:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000524:	187b      	adds	r3, r7, r1
 8000526:	2200      	movs	r2, #0
 8000528:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052a:	187b      	adds	r3, r7, r1
 800052c:	2200      	movs	r2, #0
 800052e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000530:	187b      	adds	r3, r7, r1
 8000532:	4a06      	ldr	r2, [pc, #24]	@ (800054c <MX_GPIO_Init+0x108>)
 8000534:	0019      	movs	r1, r3
 8000536:	0010      	movs	r0, r2
 8000538:	f000 fc58 	bl	8000dec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800053c:	46c0      	nop			@ (mov r8, r8)
 800053e:	46bd      	mov	sp, r7
 8000540:	b009      	add	sp, #36	@ 0x24
 8000542:	bd90      	pop	{r4, r7, pc}
 8000544:	40021000 	.word	0x40021000
 8000548:	0000f820 	.word	0x0000f820
 800054c:	50000400 	.word	0x50000400

08000550 <Print_UART>:

/* USER CODE BEGIN 4 */
void Print_UART(char *str)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	0018      	movs	r0, r3
 800055c:	f7ff fdd0 	bl	8000100 <strlen>
 8000560:	0003      	movs	r3, r0
 8000562:	b29a      	uxth	r2, r3
 8000564:	2301      	movs	r3, #1
 8000566:	425b      	negs	r3, r3
 8000568:	6879      	ldr	r1, [r7, #4]
 800056a:	4803      	ldr	r0, [pc, #12]	@ (8000578 <Print_UART+0x28>)
 800056c:	f002 fa86 	bl	8002a7c <HAL_UART_Transmit>
}
 8000570:	46c0      	nop			@ (mov r8, r8)
 8000572:	46bd      	mov	sp, r7
 8000574:	b002      	add	sp, #8
 8000576:	bd80      	pop	{r7, pc}
 8000578:	200000cc 	.word	0x200000cc

0800057c <Power_Up>:
* 	XOSCEN 1 (use crystal oscillator)
* 	FUNC 0 (FM receive)
* ARG2 0x05 (00000101 analog audio output)
*/
void Power_Up(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af02      	add	r7, sp, #8
  uint8_t cmd[3] = {0x01, 0x10, 0x05};  // CMD, ARG1, ARG2
 8000582:	1d3b      	adds	r3, r7, #4
 8000584:	4a0a      	ldr	r2, [pc, #40]	@ (80005b0 <Power_Up+0x34>)
 8000586:	8811      	ldrh	r1, [r2, #0]
 8000588:	8019      	strh	r1, [r3, #0]
 800058a:	7892      	ldrb	r2, [r2, #2]
 800058c:	709a      	strb	r2, [r3, #2]
  HAL_I2C_Master_Transmit(&hi2c1, ADDR, cmd, sizeof(cmd), HAL_MAX_DELAY);
 800058e:	1d3a      	adds	r2, r7, #4
 8000590:	4808      	ldr	r0, [pc, #32]	@ (80005b4 <Power_Up+0x38>)
 8000592:	2301      	movs	r3, #1
 8000594:	425b      	negs	r3, r3
 8000596:	9300      	str	r3, [sp, #0]
 8000598:	2303      	movs	r3, #3
 800059a:	2122      	movs	r1, #34	@ 0x22
 800059c:	f000 fe4e 	bl	800123c <HAL_I2C_Master_Transmit>
  HAL_Delay(100);  // wait for CTS to go high hopefully
 80005a0:	2064      	movs	r0, #100	@ 0x64
 80005a2:	f000 fb4b 	bl	8000c3c <HAL_Delay>
}
 80005a6:	46c0      	nop			@ (mov r8, r8)
 80005a8:	46bd      	mov	sp, r7
 80005aa:	b002      	add	sp, #8
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	46c0      	nop			@ (mov r8, r8)
 80005b0:	08003c64 	.word	0x08003c64
 80005b4:	20000078 	.word	0x20000078

080005b8 <Get_Rev>:
/*
* CMD 0x10 (GET_REV)
* Response: STATUS + 15 bytes
*/
void Get_Rev(void)
{
 80005b8:	b5b0      	push	{r4, r5, r7, lr}
 80005ba:	b098      	sub	sp, #96	@ 0x60
 80005bc:	af02      	add	r7, sp, #8
  uint8_t cmd = 0x10;
 80005be:	2553      	movs	r5, #83	@ 0x53
 80005c0:	197b      	adds	r3, r7, r5
 80005c2:	2210      	movs	r2, #16
 80005c4:	701a      	strb	r2, [r3, #0]
  uint8_t resp[16] = {0};
 80005c6:	2440      	movs	r4, #64	@ 0x40
 80005c8:	193b      	adds	r3, r7, r4
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
 80005ce:	3304      	adds	r3, #4
 80005d0:	220c      	movs	r2, #12
 80005d2:	2100      	movs	r1, #0
 80005d4:	0018      	movs	r0, r3
 80005d6:	f002 feb3 	bl	8003340 <memset>

  HAL_I2C_Master_Transmit(&hi2c1, ADDR, &cmd, 1, HAL_MAX_DELAY);
 80005da:	197a      	adds	r2, r7, r5
 80005dc:	483c      	ldr	r0, [pc, #240]	@ (80006d0 <Get_Rev+0x118>)
 80005de:	2301      	movs	r3, #1
 80005e0:	425b      	negs	r3, r3
 80005e2:	9300      	str	r3, [sp, #0]
 80005e4:	2301      	movs	r3, #1
 80005e6:	2122      	movs	r1, #34	@ 0x22
 80005e8:	f000 fe28 	bl	800123c <HAL_I2C_Master_Transmit>

  HAL_Delay(100); // Hopefully CTS set by now
 80005ec:	2064      	movs	r0, #100	@ 0x64
 80005ee:	f000 fb25 	bl	8000c3c <HAL_Delay>

  HAL_I2C_Master_Receive(&hi2c1, ADDR, resp, 16, HAL_MAX_DELAY);
 80005f2:	193a      	adds	r2, r7, r4
 80005f4:	4836      	ldr	r0, [pc, #216]	@ (80006d0 <Get_Rev+0x118>)
 80005f6:	2301      	movs	r3, #1
 80005f8:	425b      	negs	r3, r3
 80005fa:	9300      	str	r3, [sp, #0]
 80005fc:	2310      	movs	r3, #16
 80005fe:	2122      	movs	r1, #34	@ 0x22
 8000600:	f000 ff46 	bl	8001490 <HAL_I2C_Master_Receive>

  char msg[64];
  sprintf(msg, "STATUS: 0x%02X\r\n", resp[0]);
 8000604:	193b      	adds	r3, r7, r4
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	001a      	movs	r2, r3
 800060a:	4932      	ldr	r1, [pc, #200]	@ (80006d4 <Get_Rev+0x11c>)
 800060c:	003b      	movs	r3, r7
 800060e:	0018      	movs	r0, r3
 8000610:	f002 fe76 	bl	8003300 <siprintf>
  Print_UART(msg);
 8000614:	003b      	movs	r3, r7
 8000616:	0018      	movs	r0, r3
 8000618:	f7ff ff9a 	bl	8000550 <Print_UART>
  sprintf(msg, "Part Number: %d\r\n", resp[1]);
 800061c:	193b      	adds	r3, r7, r4
 800061e:	785b      	ldrb	r3, [r3, #1]
 8000620:	001a      	movs	r2, r3
 8000622:	492d      	ldr	r1, [pc, #180]	@ (80006d8 <Get_Rev+0x120>)
 8000624:	003b      	movs	r3, r7
 8000626:	0018      	movs	r0, r3
 8000628:	f002 fe6a 	bl	8003300 <siprintf>
  Print_UART(msg);
 800062c:	003b      	movs	r3, r7
 800062e:	0018      	movs	r0, r3
 8000630:	f7ff ff8e 	bl	8000550 <Print_UART>
  sprintf(msg, "FW Major: %d\r\n", resp[2]);
 8000634:	193b      	adds	r3, r7, r4
 8000636:	789b      	ldrb	r3, [r3, #2]
 8000638:	001a      	movs	r2, r3
 800063a:	4928      	ldr	r1, [pc, #160]	@ (80006dc <Get_Rev+0x124>)
 800063c:	003b      	movs	r3, r7
 800063e:	0018      	movs	r0, r3
 8000640:	f002 fe5e 	bl	8003300 <siprintf>
  Print_UART(msg);
 8000644:	003b      	movs	r3, r7
 8000646:	0018      	movs	r0, r3
 8000648:	f7ff ff82 	bl	8000550 <Print_UART>
  sprintf(msg, "FW Minor: %d\r\n", resp[3]);
 800064c:	193b      	adds	r3, r7, r4
 800064e:	78db      	ldrb	r3, [r3, #3]
 8000650:	001a      	movs	r2, r3
 8000652:	4923      	ldr	r1, [pc, #140]	@ (80006e0 <Get_Rev+0x128>)
 8000654:	003b      	movs	r3, r7
 8000656:	0018      	movs	r0, r3
 8000658:	f002 fe52 	bl	8003300 <siprintf>
  int patchID = (resp[4] << 8) | resp[5];
 800065c:	193b      	adds	r3, r7, r4
 800065e:	791b      	ldrb	r3, [r3, #4]
 8000660:	021b      	lsls	r3, r3, #8
 8000662:	193a      	adds	r2, r7, r4
 8000664:	7952      	ldrb	r2, [r2, #5]
 8000666:	4313      	orrs	r3, r2
 8000668:	657b      	str	r3, [r7, #84]	@ 0x54
  sprintf(msg, "Patch ID: %d\r\n", patchID);
 800066a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800066c:	491d      	ldr	r1, [pc, #116]	@ (80006e4 <Get_Rev+0x12c>)
 800066e:	003b      	movs	r3, r7
 8000670:	0018      	movs	r0, r3
 8000672:	f002 fe45 	bl	8003300 <siprintf>
  Print_UART(msg);
 8000676:	003b      	movs	r3, r7
 8000678:	0018      	movs	r0, r3
 800067a:	f7ff ff69 	bl	8000550 <Print_UART>
  sprintf(msg, "Comp Major: %d\r\n", resp[6]);
 800067e:	193b      	adds	r3, r7, r4
 8000680:	799b      	ldrb	r3, [r3, #6]
 8000682:	001a      	movs	r2, r3
 8000684:	4918      	ldr	r1, [pc, #96]	@ (80006e8 <Get_Rev+0x130>)
 8000686:	003b      	movs	r3, r7
 8000688:	0018      	movs	r0, r3
 800068a:	f002 fe39 	bl	8003300 <siprintf>
  Print_UART(msg);
 800068e:	003b      	movs	r3, r7
 8000690:	0018      	movs	r0, r3
 8000692:	f7ff ff5d 	bl	8000550 <Print_UART>
  sprintf(msg, "Comp Minor: %d\r\n", resp[7]);
 8000696:	193b      	adds	r3, r7, r4
 8000698:	79db      	ldrb	r3, [r3, #7]
 800069a:	001a      	movs	r2, r3
 800069c:	4913      	ldr	r1, [pc, #76]	@ (80006ec <Get_Rev+0x134>)
 800069e:	003b      	movs	r3, r7
 80006a0:	0018      	movs	r0, r3
 80006a2:	f002 fe2d 	bl	8003300 <siprintf>
  Print_UART(msg);
 80006a6:	003b      	movs	r3, r7
 80006a8:	0018      	movs	r0, r3
 80006aa:	f7ff ff51 	bl	8000550 <Print_UART>
  sprintf(msg, "Chip Rev: %d\r\n", resp[8]);
 80006ae:	193b      	adds	r3, r7, r4
 80006b0:	7a1b      	ldrb	r3, [r3, #8]
 80006b2:	001a      	movs	r2, r3
 80006b4:	490e      	ldr	r1, [pc, #56]	@ (80006f0 <Get_Rev+0x138>)
 80006b6:	003b      	movs	r3, r7
 80006b8:	0018      	movs	r0, r3
 80006ba:	f002 fe21 	bl	8003300 <siprintf>
  Print_UART(msg);
 80006be:	003b      	movs	r3, r7
 80006c0:	0018      	movs	r0, r3
 80006c2:	f7ff ff45 	bl	8000550 <Print_UART>
}
 80006c6:	46c0      	nop			@ (mov r8, r8)
 80006c8:	46bd      	mov	sp, r7
 80006ca:	b016      	add	sp, #88	@ 0x58
 80006cc:	bdb0      	pop	{r4, r5, r7, pc}
 80006ce:	46c0      	nop			@ (mov r8, r8)
 80006d0:	20000078 	.word	0x20000078
 80006d4:	08003c68 	.word	0x08003c68
 80006d8:	08003c7c 	.word	0x08003c7c
 80006dc:	08003c90 	.word	0x08003c90
 80006e0:	08003ca0 	.word	0x08003ca0
 80006e4:	08003cb0 	.word	0x08003cb0
 80006e8:	08003cc0 	.word	0x08003cc0
 80006ec:	08003cd4 	.word	0x08003cd4
 80006f0:	08003ce8 	.word	0x08003ce8

080006f4 <Set_Property>:
* Properties:
* 	FM_ANTENNA_INPUT 0x1107
* 	RX_VOLUME 0x4000
*/
void Set_Property(void/*uint8_t property, uint8_t value*/)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af02      	add	r7, sp, #8
  uint8_t cmd[6] = {0x12, 0x00, 0x11, 0x07, 0x00, 0x01};
 80006fa:	003b      	movs	r3, r7
 80006fc:	4a0a      	ldr	r2, [pc, #40]	@ (8000728 <Set_Property+0x34>)
 80006fe:	6811      	ldr	r1, [r2, #0]
 8000700:	6019      	str	r1, [r3, #0]
 8000702:	8892      	ldrh	r2, [r2, #4]
 8000704:	809a      	strh	r2, [r3, #4]
  HAL_I2C_Master_Transmit(&hi2c1, ADDR, cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000706:	003a      	movs	r2, r7
 8000708:	4808      	ldr	r0, [pc, #32]	@ (800072c <Set_Property+0x38>)
 800070a:	2301      	movs	r3, #1
 800070c:	425b      	negs	r3, r3
 800070e:	9300      	str	r3, [sp, #0]
 8000710:	2306      	movs	r3, #6
 8000712:	2122      	movs	r1, #34	@ 0x22
 8000714:	f000 fd92 	bl	800123c <HAL_I2C_Master_Transmit>
  HAL_Delay(100);
 8000718:	2064      	movs	r0, #100	@ 0x64
 800071a:	f000 fa8f 	bl	8000c3c <HAL_Delay>
}
 800071e:	46c0      	nop			@ (mov r8, r8)
 8000720:	46bd      	mov	sp, r7
 8000722:	b002      	add	sp, #8
 8000724:	bd80      	pop	{r7, pc}
 8000726:	46c0      	nop			@ (mov r8, r8)
 8000728:	08003cf8 	.word	0x08003cf8
 800072c:	20000078 	.word	0x20000078

08000730 <FM_Tune_Freq>:
* ARG4 0x00 (set antenna tuning cap automatically)
*
* @param channel in 10kHz units from 64-108MHz
*/
void FM_Tune_Freq(uint16_t channel)
{
 8000730:	b590      	push	{r4, r7, lr}
 8000732:	b087      	sub	sp, #28
 8000734:	af02      	add	r7, sp, #8
 8000736:	0002      	movs	r2, r0
 8000738:	1dbb      	adds	r3, r7, #6
 800073a:	801a      	strh	r2, [r3, #0]
  uint8_t FREQ_H = (channel >> 8) & 0xFF;
 800073c:	1dbb      	adds	r3, r7, #6
 800073e:	881b      	ldrh	r3, [r3, #0]
 8000740:	0a1b      	lsrs	r3, r3, #8
 8000742:	b29a      	uxth	r2, r3
 8000744:	200f      	movs	r0, #15
 8000746:	183b      	adds	r3, r7, r0
 8000748:	701a      	strb	r2, [r3, #0]
  uint8_t FREQ_L = channel & 0xFF;
 800074a:	240e      	movs	r4, #14
 800074c:	193b      	adds	r3, r7, r4
 800074e:	1dba      	adds	r2, r7, #6
 8000750:	8812      	ldrh	r2, [r2, #0]
 8000752:	701a      	strb	r2, [r3, #0]
  uint8_t cmd[5] = {0x20, 0x00, FREQ_H, FREQ_L, 0x00};
 8000754:	2108      	movs	r1, #8
 8000756:	187b      	adds	r3, r7, r1
 8000758:	2220      	movs	r2, #32
 800075a:	701a      	strb	r2, [r3, #0]
 800075c:	187b      	adds	r3, r7, r1
 800075e:	2200      	movs	r2, #0
 8000760:	705a      	strb	r2, [r3, #1]
 8000762:	187b      	adds	r3, r7, r1
 8000764:	183a      	adds	r2, r7, r0
 8000766:	7812      	ldrb	r2, [r2, #0]
 8000768:	709a      	strb	r2, [r3, #2]
 800076a:	187b      	adds	r3, r7, r1
 800076c:	193a      	adds	r2, r7, r4
 800076e:	7812      	ldrb	r2, [r2, #0]
 8000770:	70da      	strb	r2, [r3, #3]
 8000772:	187b      	adds	r3, r7, r1
 8000774:	2200      	movs	r2, #0
 8000776:	711a      	strb	r2, [r3, #4]
  HAL_I2C_Master_Transmit(&hi2c1, ADDR, cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000778:	187a      	adds	r2, r7, r1
 800077a:	4807      	ldr	r0, [pc, #28]	@ (8000798 <FM_Tune_Freq+0x68>)
 800077c:	2301      	movs	r3, #1
 800077e:	425b      	negs	r3, r3
 8000780:	9300      	str	r3, [sp, #0]
 8000782:	2305      	movs	r3, #5
 8000784:	2122      	movs	r1, #34	@ 0x22
 8000786:	f000 fd59 	bl	800123c <HAL_I2C_Master_Transmit>
  HAL_Delay(100);
 800078a:	2064      	movs	r0, #100	@ 0x64
 800078c:	f000 fa56 	bl	8000c3c <HAL_Delay>
}
 8000790:	46c0      	nop			@ (mov r8, r8)
 8000792:	46bd      	mov	sp, r7
 8000794:	b005      	add	sp, #20
 8000796:	bd90      	pop	{r4, r7, pc}
 8000798:	20000078 	.word	0x20000078

0800079c <FM_Tune_Status>:
* ARG1 0x00
* 	CANCEL 0 (don't cancel seek) (bit 1)
* 	INTACK 0 (don't clear seek/tune interrupt status indicator) (bit 0)
*/
void FM_Tune_Status(void)
{
 800079c:	b590      	push	{r4, r7, lr}
 800079e:	b097      	sub	sp, #92	@ 0x5c
 80007a0:	af02      	add	r7, sp, #8
  uint8_t cmd[2] = {0x22, 0x00};
 80007a2:	2148      	movs	r1, #72	@ 0x48
 80007a4:	187b      	adds	r3, r7, r1
 80007a6:	2222      	movs	r2, #34	@ 0x22
 80007a8:	801a      	strh	r2, [r3, #0]
  HAL_I2C_Master_Transmit(&hi2c1, ADDR, cmd, sizeof(cmd), HAL_MAX_DELAY);
 80007aa:	187a      	adds	r2, r7, r1
 80007ac:	482f      	ldr	r0, [pc, #188]	@ (800086c <FM_Tune_Status+0xd0>)
 80007ae:	2301      	movs	r3, #1
 80007b0:	425b      	negs	r3, r3
 80007b2:	9300      	str	r3, [sp, #0]
 80007b4:	2302      	movs	r3, #2
 80007b6:	2122      	movs	r1, #34	@ 0x22
 80007b8:	f000 fd40 	bl	800123c <HAL_I2C_Master_Transmit>
  HAL_Delay(100);
 80007bc:	2064      	movs	r0, #100	@ 0x64
 80007be:	f000 fa3d 	bl	8000c3c <HAL_Delay>

  uint8_t resp[8] = {0};
 80007c2:	2440      	movs	r4, #64	@ 0x40
 80007c4:	193b      	adds	r3, r7, r4
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	2200      	movs	r2, #0
 80007cc:	605a      	str	r2, [r3, #4]
  HAL_I2C_Master_Receive(&hi2c1, ADDR, resp, 8, HAL_MAX_DELAY);
 80007ce:	193a      	adds	r2, r7, r4
 80007d0:	4826      	ldr	r0, [pc, #152]	@ (800086c <FM_Tune_Status+0xd0>)
 80007d2:	2301      	movs	r3, #1
 80007d4:	425b      	negs	r3, r3
 80007d6:	9300      	str	r3, [sp, #0]
 80007d8:	2308      	movs	r3, #8
 80007da:	2122      	movs	r1, #34	@ 0x22
 80007dc:	f000 fe58 	bl	8001490 <HAL_I2C_Master_Receive>

  char msg[64];
  sprintf(msg, "RESP1: 0x%02X\r\n", resp[1]);
 80007e0:	193b      	adds	r3, r7, r4
 80007e2:	785b      	ldrb	r3, [r3, #1]
 80007e4:	001a      	movs	r2, r3
 80007e6:	4922      	ldr	r1, [pc, #136]	@ (8000870 <FM_Tune_Status+0xd4>)
 80007e8:	003b      	movs	r3, r7
 80007ea:	0018      	movs	r0, r3
 80007ec:	f002 fd88 	bl	8003300 <siprintf>
  Print_UART(msg);
 80007f0:	003b      	movs	r3, r7
 80007f2:	0018      	movs	r0, r3
 80007f4:	f7ff feac 	bl	8000550 <Print_UART>
  int freq = (resp[2] << 8) | resp[3];
 80007f8:	193b      	adds	r3, r7, r4
 80007fa:	789b      	ldrb	r3, [r3, #2]
 80007fc:	021b      	lsls	r3, r3, #8
 80007fe:	193a      	adds	r2, r7, r4
 8000800:	78d2      	ldrb	r2, [r2, #3]
 8000802:	4313      	orrs	r3, r2
 8000804:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sprintf(msg, "Read frequency: %d\r\n", freq);
 8000806:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000808:	491a      	ldr	r1, [pc, #104]	@ (8000874 <FM_Tune_Status+0xd8>)
 800080a:	003b      	movs	r3, r7
 800080c:	0018      	movs	r0, r3
 800080e:	f002 fd77 	bl	8003300 <siprintf>
  Print_UART(msg);
 8000812:	003b      	movs	r3, r7
 8000814:	0018      	movs	r0, r3
 8000816:	f7ff fe9b 	bl	8000550 <Print_UART>
  sprintf(msg, "RSSI: %d\r\n", resp[4]);
 800081a:	193b      	adds	r3, r7, r4
 800081c:	791b      	ldrb	r3, [r3, #4]
 800081e:	001a      	movs	r2, r3
 8000820:	4915      	ldr	r1, [pc, #84]	@ (8000878 <FM_Tune_Status+0xdc>)
 8000822:	003b      	movs	r3, r7
 8000824:	0018      	movs	r0, r3
 8000826:	f002 fd6b 	bl	8003300 <siprintf>
  Print_UART(msg);
 800082a:	003b      	movs	r3, r7
 800082c:	0018      	movs	r0, r3
 800082e:	f7ff fe8f 	bl	8000550 <Print_UART>
  sprintf(msg, "SNR: %d\r\n", resp[5]);
 8000832:	193b      	adds	r3, r7, r4
 8000834:	795b      	ldrb	r3, [r3, #5]
 8000836:	001a      	movs	r2, r3
 8000838:	4910      	ldr	r1, [pc, #64]	@ (800087c <FM_Tune_Status+0xe0>)
 800083a:	003b      	movs	r3, r7
 800083c:	0018      	movs	r0, r3
 800083e:	f002 fd5f 	bl	8003300 <siprintf>
  Print_UART(msg);
 8000842:	003b      	movs	r3, r7
 8000844:	0018      	movs	r0, r3
 8000846:	f7ff fe83 	bl	8000550 <Print_UART>
  sprintf(msg, "READANTCAP: %d\r\n", resp[7]);
 800084a:	193b      	adds	r3, r7, r4
 800084c:	79db      	ldrb	r3, [r3, #7]
 800084e:	001a      	movs	r2, r3
 8000850:	490b      	ldr	r1, [pc, #44]	@ (8000880 <FM_Tune_Status+0xe4>)
 8000852:	003b      	movs	r3, r7
 8000854:	0018      	movs	r0, r3
 8000856:	f002 fd53 	bl	8003300 <siprintf>
  Print_UART(msg);
 800085a:	003b      	movs	r3, r7
 800085c:	0018      	movs	r0, r3
 800085e:	f7ff fe77 	bl	8000550 <Print_UART>
}
 8000862:	46c0      	nop			@ (mov r8, r8)
 8000864:	46bd      	mov	sp, r7
 8000866:	b015      	add	sp, #84	@ 0x54
 8000868:	bd90      	pop	{r4, r7, pc}
 800086a:	46c0      	nop			@ (mov r8, r8)
 800086c:	20000078 	.word	0x20000078
 8000870:	08003d00 	.word	0x08003d00
 8000874:	08003d10 	.word	0x08003d10
 8000878:	08003d28 	.word	0x08003d28
 800087c:	08003d34 	.word	0x08003d34
 8000880:	08003d40 	.word	0x08003d40

08000884 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000888:	b672      	cpsid	i
}
 800088a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800088c:	46c0      	nop			@ (mov r8, r8)
 800088e:	e7fd      	b.n	800088c <Error_Handler+0x8>

08000890 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000896:	4b0f      	ldr	r3, [pc, #60]	@ (80008d4 <HAL_MspInit+0x44>)
 8000898:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800089a:	4b0e      	ldr	r3, [pc, #56]	@ (80008d4 <HAL_MspInit+0x44>)
 800089c:	2101      	movs	r1, #1
 800089e:	430a      	orrs	r2, r1
 80008a0:	641a      	str	r2, [r3, #64]	@ 0x40
 80008a2:	4b0c      	ldr	r3, [pc, #48]	@ (80008d4 <HAL_MspInit+0x44>)
 80008a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008a6:	2201      	movs	r2, #1
 80008a8:	4013      	ands	r3, r2
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ae:	4b09      	ldr	r3, [pc, #36]	@ (80008d4 <HAL_MspInit+0x44>)
 80008b0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80008b2:	4b08      	ldr	r3, [pc, #32]	@ (80008d4 <HAL_MspInit+0x44>)
 80008b4:	2180      	movs	r1, #128	@ 0x80
 80008b6:	0549      	lsls	r1, r1, #21
 80008b8:	430a      	orrs	r2, r1
 80008ba:	63da      	str	r2, [r3, #60]	@ 0x3c
 80008bc:	4b05      	ldr	r3, [pc, #20]	@ (80008d4 <HAL_MspInit+0x44>)
 80008be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80008c0:	2380      	movs	r3, #128	@ 0x80
 80008c2:	055b      	lsls	r3, r3, #21
 80008c4:	4013      	ands	r3, r2
 80008c6:	603b      	str	r3, [r7, #0]
 80008c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ca:	46c0      	nop			@ (mov r8, r8)
 80008cc:	46bd      	mov	sp, r7
 80008ce:	b002      	add	sp, #8
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	46c0      	nop			@ (mov r8, r8)
 80008d4:	40021000 	.word	0x40021000

080008d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80008d8:	b590      	push	{r4, r7, lr}
 80008da:	b091      	sub	sp, #68	@ 0x44
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e0:	232c      	movs	r3, #44	@ 0x2c
 80008e2:	18fb      	adds	r3, r7, r3
 80008e4:	0018      	movs	r0, r3
 80008e6:	2314      	movs	r3, #20
 80008e8:	001a      	movs	r2, r3
 80008ea:	2100      	movs	r1, #0
 80008ec:	f002 fd28 	bl	8003340 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008f0:	2414      	movs	r4, #20
 80008f2:	193b      	adds	r3, r7, r4
 80008f4:	0018      	movs	r0, r3
 80008f6:	2318      	movs	r3, #24
 80008f8:	001a      	movs	r2, r3
 80008fa:	2100      	movs	r1, #0
 80008fc:	f002 fd20 	bl	8003340 <memset>
  if(hi2c->Instance==I2C1)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a22      	ldr	r2, [pc, #136]	@ (8000990 <HAL_I2C_MspInit+0xb8>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d13d      	bne.n	8000986 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800090a:	193b      	adds	r3, r7, r4
 800090c:	2220      	movs	r2, #32
 800090e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000910:	193b      	adds	r3, r7, r4
 8000912:	2200      	movs	r2, #0
 8000914:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000916:	193b      	adds	r3, r7, r4
 8000918:	0018      	movs	r0, r3
 800091a:	f001 ff33 	bl	8002784 <HAL_RCCEx_PeriphCLKConfig>
 800091e:	1e03      	subs	r3, r0, #0
 8000920:	d001      	beq.n	8000926 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000922:	f7ff ffaf 	bl	8000884 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000926:	4b1b      	ldr	r3, [pc, #108]	@ (8000994 <HAL_I2C_MspInit+0xbc>)
 8000928:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800092a:	4b1a      	ldr	r3, [pc, #104]	@ (8000994 <HAL_I2C_MspInit+0xbc>)
 800092c:	2102      	movs	r1, #2
 800092e:	430a      	orrs	r2, r1
 8000930:	635a      	str	r2, [r3, #52]	@ 0x34
 8000932:	4b18      	ldr	r3, [pc, #96]	@ (8000994 <HAL_I2C_MspInit+0xbc>)
 8000934:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000936:	2202      	movs	r2, #2
 8000938:	4013      	ands	r3, r2
 800093a:	613b      	str	r3, [r7, #16]
 800093c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800093e:	212c      	movs	r1, #44	@ 0x2c
 8000940:	187b      	adds	r3, r7, r1
 8000942:	22c0      	movs	r2, #192	@ 0xc0
 8000944:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000946:	187b      	adds	r3, r7, r1
 8000948:	2212      	movs	r2, #18
 800094a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	187b      	adds	r3, r7, r1
 800094e:	2200      	movs	r2, #0
 8000950:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000952:	187b      	adds	r3, r7, r1
 8000954:	2200      	movs	r2, #0
 8000956:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000958:	187b      	adds	r3, r7, r1
 800095a:	2206      	movs	r2, #6
 800095c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800095e:	187b      	adds	r3, r7, r1
 8000960:	4a0d      	ldr	r2, [pc, #52]	@ (8000998 <HAL_I2C_MspInit+0xc0>)
 8000962:	0019      	movs	r1, r3
 8000964:	0010      	movs	r0, r2
 8000966:	f000 fa41 	bl	8000dec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800096a:	4b0a      	ldr	r3, [pc, #40]	@ (8000994 <HAL_I2C_MspInit+0xbc>)
 800096c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800096e:	4b09      	ldr	r3, [pc, #36]	@ (8000994 <HAL_I2C_MspInit+0xbc>)
 8000970:	2180      	movs	r1, #128	@ 0x80
 8000972:	0389      	lsls	r1, r1, #14
 8000974:	430a      	orrs	r2, r1
 8000976:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000978:	4b06      	ldr	r3, [pc, #24]	@ (8000994 <HAL_I2C_MspInit+0xbc>)
 800097a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800097c:	2380      	movs	r3, #128	@ 0x80
 800097e:	039b      	lsls	r3, r3, #14
 8000980:	4013      	ands	r3, r2
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000986:	46c0      	nop			@ (mov r8, r8)
 8000988:	46bd      	mov	sp, r7
 800098a:	b011      	add	sp, #68	@ 0x44
 800098c:	bd90      	pop	{r4, r7, pc}
 800098e:	46c0      	nop			@ (mov r8, r8)
 8000990:	40005400 	.word	0x40005400
 8000994:	40021000 	.word	0x40021000
 8000998:	50000400 	.word	0x50000400

0800099c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800099c:	b590      	push	{r4, r7, lr}
 800099e:	b08b      	sub	sp, #44	@ 0x2c
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a4:	2414      	movs	r4, #20
 80009a6:	193b      	adds	r3, r7, r4
 80009a8:	0018      	movs	r0, r3
 80009aa:	2314      	movs	r3, #20
 80009ac:	001a      	movs	r2, r3
 80009ae:	2100      	movs	r1, #0
 80009b0:	f002 fcc6 	bl	8003340 <memset>
  if(huart->Instance==USART2)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a1b      	ldr	r2, [pc, #108]	@ (8000a28 <HAL_UART_MspInit+0x8c>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d130      	bne.n	8000a20 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009be:	4b1b      	ldr	r3, [pc, #108]	@ (8000a2c <HAL_UART_MspInit+0x90>)
 80009c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80009c2:	4b1a      	ldr	r3, [pc, #104]	@ (8000a2c <HAL_UART_MspInit+0x90>)
 80009c4:	2180      	movs	r1, #128	@ 0x80
 80009c6:	0289      	lsls	r1, r1, #10
 80009c8:	430a      	orrs	r2, r1
 80009ca:	63da      	str	r2, [r3, #60]	@ 0x3c
 80009cc:	4b17      	ldr	r3, [pc, #92]	@ (8000a2c <HAL_UART_MspInit+0x90>)
 80009ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80009d0:	2380      	movs	r3, #128	@ 0x80
 80009d2:	029b      	lsls	r3, r3, #10
 80009d4:	4013      	ands	r3, r2
 80009d6:	613b      	str	r3, [r7, #16]
 80009d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009da:	4b14      	ldr	r3, [pc, #80]	@ (8000a2c <HAL_UART_MspInit+0x90>)
 80009dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80009de:	4b13      	ldr	r3, [pc, #76]	@ (8000a2c <HAL_UART_MspInit+0x90>)
 80009e0:	2101      	movs	r1, #1
 80009e2:	430a      	orrs	r2, r1
 80009e4:	635a      	str	r2, [r3, #52]	@ 0x34
 80009e6:	4b11      	ldr	r3, [pc, #68]	@ (8000a2c <HAL_UART_MspInit+0x90>)
 80009e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009ea:	2201      	movs	r2, #1
 80009ec:	4013      	ands	r3, r2
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> USART2_CTS
    PA1     ------> USART2_RTS
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80009f2:	0021      	movs	r1, r4
 80009f4:	187b      	adds	r3, r7, r1
 80009f6:	220f      	movs	r2, #15
 80009f8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fa:	187b      	adds	r3, r7, r1
 80009fc:	2202      	movs	r2, #2
 80009fe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	187b      	adds	r3, r7, r1
 8000a02:	2200      	movs	r2, #0
 8000a04:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a06:	187b      	adds	r3, r7, r1
 8000a08:	2200      	movs	r2, #0
 8000a0a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000a0c:	187b      	adds	r3, r7, r1
 8000a0e:	2201      	movs	r2, #1
 8000a10:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a12:	187a      	adds	r2, r7, r1
 8000a14:	23a0      	movs	r3, #160	@ 0xa0
 8000a16:	05db      	lsls	r3, r3, #23
 8000a18:	0011      	movs	r1, r2
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	f000 f9e6 	bl	8000dec <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000a20:	46c0      	nop			@ (mov r8, r8)
 8000a22:	46bd      	mov	sp, r7
 8000a24:	b00b      	add	sp, #44	@ 0x2c
 8000a26:	bd90      	pop	{r4, r7, pc}
 8000a28:	40004400 	.word	0x40004400
 8000a2c:	40021000 	.word	0x40021000

08000a30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a34:	46c0      	nop			@ (mov r8, r8)
 8000a36:	e7fd      	b.n	8000a34 <NMI_Handler+0x4>

08000a38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a3c:	46c0      	nop			@ (mov r8, r8)
 8000a3e:	e7fd      	b.n	8000a3c <HardFault_Handler+0x4>

08000a40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a44:	46c0      	nop			@ (mov r8, r8)
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a4e:	46c0      	nop			@ (mov r8, r8)
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}

08000a54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a58:	f000 f8d4 	bl	8000c04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a5c:	46c0      	nop			@ (mov r8, r8)
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
	...

08000a64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b086      	sub	sp, #24
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a6c:	4a14      	ldr	r2, [pc, #80]	@ (8000ac0 <_sbrk+0x5c>)
 8000a6e:	4b15      	ldr	r3, [pc, #84]	@ (8000ac4 <_sbrk+0x60>)
 8000a70:	1ad3      	subs	r3, r2, r3
 8000a72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a78:	4b13      	ldr	r3, [pc, #76]	@ (8000ac8 <_sbrk+0x64>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d102      	bne.n	8000a86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a80:	4b11      	ldr	r3, [pc, #68]	@ (8000ac8 <_sbrk+0x64>)
 8000a82:	4a12      	ldr	r2, [pc, #72]	@ (8000acc <_sbrk+0x68>)
 8000a84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a86:	4b10      	ldr	r3, [pc, #64]	@ (8000ac8 <_sbrk+0x64>)
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	18d3      	adds	r3, r2, r3
 8000a8e:	693a      	ldr	r2, [r7, #16]
 8000a90:	429a      	cmp	r2, r3
 8000a92:	d207      	bcs.n	8000aa4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a94:	f002 fc5c 	bl	8003350 <__errno>
 8000a98:	0003      	movs	r3, r0
 8000a9a:	220c      	movs	r2, #12
 8000a9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	425b      	negs	r3, r3
 8000aa2:	e009      	b.n	8000ab8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000aa4:	4b08      	ldr	r3, [pc, #32]	@ (8000ac8 <_sbrk+0x64>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aaa:	4b07      	ldr	r3, [pc, #28]	@ (8000ac8 <_sbrk+0x64>)
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	18d2      	adds	r2, r2, r3
 8000ab2:	4b05      	ldr	r3, [pc, #20]	@ (8000ac8 <_sbrk+0x64>)
 8000ab4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000ab6:	68fb      	ldr	r3, [r7, #12]
}
 8000ab8:	0018      	movs	r0, r3
 8000aba:	46bd      	mov	sp, r7
 8000abc:	b006      	add	sp, #24
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	20002000 	.word	0x20002000
 8000ac4:	00000400 	.word	0x00000400
 8000ac8:	20000160 	.word	0x20000160
 8000acc:	200002b0 	.word	0x200002b0

08000ad0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ad4:	46c0      	nop			@ (mov r8, r8)
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
	...

08000adc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000adc:	480d      	ldr	r0, [pc, #52]	@ (8000b14 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ade:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ae0:	f7ff fff6 	bl	8000ad0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ae4:	480c      	ldr	r0, [pc, #48]	@ (8000b18 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ae6:	490d      	ldr	r1, [pc, #52]	@ (8000b1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ae8:	4a0d      	ldr	r2, [pc, #52]	@ (8000b20 <LoopForever+0xe>)
  movs r3, #0
 8000aea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aec:	e002      	b.n	8000af4 <LoopCopyDataInit>

08000aee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000af0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000af2:	3304      	adds	r3, #4

08000af4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000af4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000af6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000af8:	d3f9      	bcc.n	8000aee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000afa:	4a0a      	ldr	r2, [pc, #40]	@ (8000b24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000afc:	4c0a      	ldr	r4, [pc, #40]	@ (8000b28 <LoopForever+0x16>)
  movs r3, #0
 8000afe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b00:	e001      	b.n	8000b06 <LoopFillZerobss>

08000b02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b04:	3204      	adds	r2, #4

08000b06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b08:	d3fb      	bcc.n	8000b02 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b0a:	f002 fc27 	bl	800335c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000b0e:	f7ff fb95 	bl	800023c <main>

08000b12 <LoopForever>:

LoopForever:
  b LoopForever
 8000b12:	e7fe      	b.n	8000b12 <LoopForever>
  ldr   r0, =_estack
 8000b14:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000b18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b1c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000b20:	08003e24 	.word	0x08003e24
  ldr r2, =_sbss
 8000b24:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000b28:	200002b0 	.word	0x200002b0

08000b2c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b2c:	e7fe      	b.n	8000b2c <ADC1_IRQHandler>
	...

08000b30 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b36:	1dfb      	adds	r3, r7, #7
 8000b38:	2200      	movs	r2, #0
 8000b3a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b3c:	4b0b      	ldr	r3, [pc, #44]	@ (8000b6c <HAL_Init+0x3c>)
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	4b0a      	ldr	r3, [pc, #40]	@ (8000b6c <HAL_Init+0x3c>)
 8000b42:	2180      	movs	r1, #128	@ 0x80
 8000b44:	0049      	lsls	r1, r1, #1
 8000b46:	430a      	orrs	r2, r1
 8000b48:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b4a:	2003      	movs	r0, #3
 8000b4c:	f000 f810 	bl	8000b70 <HAL_InitTick>
 8000b50:	1e03      	subs	r3, r0, #0
 8000b52:	d003      	beq.n	8000b5c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000b54:	1dfb      	adds	r3, r7, #7
 8000b56:	2201      	movs	r2, #1
 8000b58:	701a      	strb	r2, [r3, #0]
 8000b5a:	e001      	b.n	8000b60 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000b5c:	f7ff fe98 	bl	8000890 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b60:	1dfb      	adds	r3, r7, #7
 8000b62:	781b      	ldrb	r3, [r3, #0]
}
 8000b64:	0018      	movs	r0, r3
 8000b66:	46bd      	mov	sp, r7
 8000b68:	b002      	add	sp, #8
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40022000 	.word	0x40022000

08000b70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b70:	b590      	push	{r4, r7, lr}
 8000b72:	b085      	sub	sp, #20
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b78:	230f      	movs	r3, #15
 8000b7a:	18fb      	adds	r3, r7, r3
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000b80:	4b1d      	ldr	r3, [pc, #116]	@ (8000bf8 <HAL_InitTick+0x88>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d02b      	beq.n	8000be0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000b88:	4b1c      	ldr	r3, [pc, #112]	@ (8000bfc <HAL_InitTick+0x8c>)
 8000b8a:	681c      	ldr	r4, [r3, #0]
 8000b8c:	4b1a      	ldr	r3, [pc, #104]	@ (8000bf8 <HAL_InitTick+0x88>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	0019      	movs	r1, r3
 8000b92:	23fa      	movs	r3, #250	@ 0xfa
 8000b94:	0098      	lsls	r0, r3, #2
 8000b96:	f7ff fac5 	bl	8000124 <__udivsi3>
 8000b9a:	0003      	movs	r3, r0
 8000b9c:	0019      	movs	r1, r3
 8000b9e:	0020      	movs	r0, r4
 8000ba0:	f7ff fac0 	bl	8000124 <__udivsi3>
 8000ba4:	0003      	movs	r3, r0
 8000ba6:	0018      	movs	r0, r3
 8000ba8:	f000 f913 	bl	8000dd2 <HAL_SYSTICK_Config>
 8000bac:	1e03      	subs	r3, r0, #0
 8000bae:	d112      	bne.n	8000bd6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2b03      	cmp	r3, #3
 8000bb4:	d80a      	bhi.n	8000bcc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bb6:	6879      	ldr	r1, [r7, #4]
 8000bb8:	2301      	movs	r3, #1
 8000bba:	425b      	negs	r3, r3
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	f000 f8f2 	bl	8000da8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bc4:	4b0e      	ldr	r3, [pc, #56]	@ (8000c00 <HAL_InitTick+0x90>)
 8000bc6:	687a      	ldr	r2, [r7, #4]
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	e00d      	b.n	8000be8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000bcc:	230f      	movs	r3, #15
 8000bce:	18fb      	adds	r3, r7, r3
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	701a      	strb	r2, [r3, #0]
 8000bd4:	e008      	b.n	8000be8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bd6:	230f      	movs	r3, #15
 8000bd8:	18fb      	adds	r3, r7, r3
 8000bda:	2201      	movs	r2, #1
 8000bdc:	701a      	strb	r2, [r3, #0]
 8000bde:	e003      	b.n	8000be8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000be0:	230f      	movs	r3, #15
 8000be2:	18fb      	adds	r3, r7, r3
 8000be4:	2201      	movs	r2, #1
 8000be6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000be8:	230f      	movs	r3, #15
 8000bea:	18fb      	adds	r3, r7, r3
 8000bec:	781b      	ldrb	r3, [r3, #0]
}
 8000bee:	0018      	movs	r0, r3
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	b005      	add	sp, #20
 8000bf4:	bd90      	pop	{r4, r7, pc}
 8000bf6:	46c0      	nop			@ (mov r8, r8)
 8000bf8:	20000008 	.word	0x20000008
 8000bfc:	20000000 	.word	0x20000000
 8000c00:	20000004 	.word	0x20000004

08000c04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c08:	4b05      	ldr	r3, [pc, #20]	@ (8000c20 <HAL_IncTick+0x1c>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	001a      	movs	r2, r3
 8000c0e:	4b05      	ldr	r3, [pc, #20]	@ (8000c24 <HAL_IncTick+0x20>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	18d2      	adds	r2, r2, r3
 8000c14:	4b03      	ldr	r3, [pc, #12]	@ (8000c24 <HAL_IncTick+0x20>)
 8000c16:	601a      	str	r2, [r3, #0]
}
 8000c18:	46c0      	nop			@ (mov r8, r8)
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	46c0      	nop			@ (mov r8, r8)
 8000c20:	20000008 	.word	0x20000008
 8000c24:	20000164 	.word	0x20000164

08000c28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c2c:	4b02      	ldr	r3, [pc, #8]	@ (8000c38 <HAL_GetTick+0x10>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
}
 8000c30:	0018      	movs	r0, r3
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	46c0      	nop			@ (mov r8, r8)
 8000c38:	20000164 	.word	0x20000164

08000c3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c44:	f7ff fff0 	bl	8000c28 <HAL_GetTick>
 8000c48:	0003      	movs	r3, r0
 8000c4a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	3301      	adds	r3, #1
 8000c54:	d005      	beq.n	8000c62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c56:	4b0a      	ldr	r3, [pc, #40]	@ (8000c80 <HAL_Delay+0x44>)
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	001a      	movs	r2, r3
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	189b      	adds	r3, r3, r2
 8000c60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c62:	46c0      	nop			@ (mov r8, r8)
 8000c64:	f7ff ffe0 	bl	8000c28 <HAL_GetTick>
 8000c68:	0002      	movs	r2, r0
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	1ad3      	subs	r3, r2, r3
 8000c6e:	68fa      	ldr	r2, [r7, #12]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	d8f7      	bhi.n	8000c64 <HAL_Delay+0x28>
  {
  }
}
 8000c74:	46c0      	nop			@ (mov r8, r8)
 8000c76:	46c0      	nop			@ (mov r8, r8)
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	b004      	add	sp, #16
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	46c0      	nop			@ (mov r8, r8)
 8000c80:	20000008 	.word	0x20000008

08000c84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c84:	b590      	push	{r4, r7, lr}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	0002      	movs	r2, r0
 8000c8c:	6039      	str	r1, [r7, #0]
 8000c8e:	1dfb      	adds	r3, r7, #7
 8000c90:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c92:	1dfb      	adds	r3, r7, #7
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	2b7f      	cmp	r3, #127	@ 0x7f
 8000c98:	d828      	bhi.n	8000cec <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c9a:	4a2f      	ldr	r2, [pc, #188]	@ (8000d58 <__NVIC_SetPriority+0xd4>)
 8000c9c:	1dfb      	adds	r3, r7, #7
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	b25b      	sxtb	r3, r3
 8000ca2:	089b      	lsrs	r3, r3, #2
 8000ca4:	33c0      	adds	r3, #192	@ 0xc0
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	589b      	ldr	r3, [r3, r2]
 8000caa:	1dfa      	adds	r2, r7, #7
 8000cac:	7812      	ldrb	r2, [r2, #0]
 8000cae:	0011      	movs	r1, r2
 8000cb0:	2203      	movs	r2, #3
 8000cb2:	400a      	ands	r2, r1
 8000cb4:	00d2      	lsls	r2, r2, #3
 8000cb6:	21ff      	movs	r1, #255	@ 0xff
 8000cb8:	4091      	lsls	r1, r2
 8000cba:	000a      	movs	r2, r1
 8000cbc:	43d2      	mvns	r2, r2
 8000cbe:	401a      	ands	r2, r3
 8000cc0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	019b      	lsls	r3, r3, #6
 8000cc6:	22ff      	movs	r2, #255	@ 0xff
 8000cc8:	401a      	ands	r2, r3
 8000cca:	1dfb      	adds	r3, r7, #7
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	0018      	movs	r0, r3
 8000cd0:	2303      	movs	r3, #3
 8000cd2:	4003      	ands	r3, r0
 8000cd4:	00db      	lsls	r3, r3, #3
 8000cd6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cd8:	481f      	ldr	r0, [pc, #124]	@ (8000d58 <__NVIC_SetPriority+0xd4>)
 8000cda:	1dfb      	adds	r3, r7, #7
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	b25b      	sxtb	r3, r3
 8000ce0:	089b      	lsrs	r3, r3, #2
 8000ce2:	430a      	orrs	r2, r1
 8000ce4:	33c0      	adds	r3, #192	@ 0xc0
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000cea:	e031      	b.n	8000d50 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cec:	4a1b      	ldr	r2, [pc, #108]	@ (8000d5c <__NVIC_SetPriority+0xd8>)
 8000cee:	1dfb      	adds	r3, r7, #7
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	0019      	movs	r1, r3
 8000cf4:	230f      	movs	r3, #15
 8000cf6:	400b      	ands	r3, r1
 8000cf8:	3b08      	subs	r3, #8
 8000cfa:	089b      	lsrs	r3, r3, #2
 8000cfc:	3306      	adds	r3, #6
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	18d3      	adds	r3, r2, r3
 8000d02:	3304      	adds	r3, #4
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	1dfa      	adds	r2, r7, #7
 8000d08:	7812      	ldrb	r2, [r2, #0]
 8000d0a:	0011      	movs	r1, r2
 8000d0c:	2203      	movs	r2, #3
 8000d0e:	400a      	ands	r2, r1
 8000d10:	00d2      	lsls	r2, r2, #3
 8000d12:	21ff      	movs	r1, #255	@ 0xff
 8000d14:	4091      	lsls	r1, r2
 8000d16:	000a      	movs	r2, r1
 8000d18:	43d2      	mvns	r2, r2
 8000d1a:	401a      	ands	r2, r3
 8000d1c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	019b      	lsls	r3, r3, #6
 8000d22:	22ff      	movs	r2, #255	@ 0xff
 8000d24:	401a      	ands	r2, r3
 8000d26:	1dfb      	adds	r3, r7, #7
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	2303      	movs	r3, #3
 8000d2e:	4003      	ands	r3, r0
 8000d30:	00db      	lsls	r3, r3, #3
 8000d32:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d34:	4809      	ldr	r0, [pc, #36]	@ (8000d5c <__NVIC_SetPriority+0xd8>)
 8000d36:	1dfb      	adds	r3, r7, #7
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	001c      	movs	r4, r3
 8000d3c:	230f      	movs	r3, #15
 8000d3e:	4023      	ands	r3, r4
 8000d40:	3b08      	subs	r3, #8
 8000d42:	089b      	lsrs	r3, r3, #2
 8000d44:	430a      	orrs	r2, r1
 8000d46:	3306      	adds	r3, #6
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	18c3      	adds	r3, r0, r3
 8000d4c:	3304      	adds	r3, #4
 8000d4e:	601a      	str	r2, [r3, #0]
}
 8000d50:	46c0      	nop			@ (mov r8, r8)
 8000d52:	46bd      	mov	sp, r7
 8000d54:	b003      	add	sp, #12
 8000d56:	bd90      	pop	{r4, r7, pc}
 8000d58:	e000e100 	.word	0xe000e100
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	1e5a      	subs	r2, r3, #1
 8000d6c:	2380      	movs	r3, #128	@ 0x80
 8000d6e:	045b      	lsls	r3, r3, #17
 8000d70:	429a      	cmp	r2, r3
 8000d72:	d301      	bcc.n	8000d78 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d74:	2301      	movs	r3, #1
 8000d76:	e010      	b.n	8000d9a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d78:	4b0a      	ldr	r3, [pc, #40]	@ (8000da4 <SysTick_Config+0x44>)
 8000d7a:	687a      	ldr	r2, [r7, #4]
 8000d7c:	3a01      	subs	r2, #1
 8000d7e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d80:	2301      	movs	r3, #1
 8000d82:	425b      	negs	r3, r3
 8000d84:	2103      	movs	r1, #3
 8000d86:	0018      	movs	r0, r3
 8000d88:	f7ff ff7c 	bl	8000c84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d8c:	4b05      	ldr	r3, [pc, #20]	@ (8000da4 <SysTick_Config+0x44>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d92:	4b04      	ldr	r3, [pc, #16]	@ (8000da4 <SysTick_Config+0x44>)
 8000d94:	2207      	movs	r2, #7
 8000d96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d98:	2300      	movs	r3, #0
}
 8000d9a:	0018      	movs	r0, r3
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	b002      	add	sp, #8
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	46c0      	nop			@ (mov r8, r8)
 8000da4:	e000e010 	.word	0xe000e010

08000da8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60b9      	str	r1, [r7, #8]
 8000db0:	607a      	str	r2, [r7, #4]
 8000db2:	210f      	movs	r1, #15
 8000db4:	187b      	adds	r3, r7, r1
 8000db6:	1c02      	adds	r2, r0, #0
 8000db8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000dba:	68ba      	ldr	r2, [r7, #8]
 8000dbc:	187b      	adds	r3, r7, r1
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	b25b      	sxtb	r3, r3
 8000dc2:	0011      	movs	r1, r2
 8000dc4:	0018      	movs	r0, r3
 8000dc6:	f7ff ff5d 	bl	8000c84 <__NVIC_SetPriority>
}
 8000dca:	46c0      	nop			@ (mov r8, r8)
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	b004      	add	sp, #16
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b082      	sub	sp, #8
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	0018      	movs	r0, r3
 8000dde:	f7ff ffbf 	bl	8000d60 <SysTick_Config>
 8000de2:	0003      	movs	r3, r0
}
 8000de4:	0018      	movs	r0, r3
 8000de6:	46bd      	mov	sp, r7
 8000de8:	b002      	add	sp, #8
 8000dea:	bd80      	pop	{r7, pc}

08000dec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000df6:	2300      	movs	r3, #0
 8000df8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dfa:	e147      	b.n	800108c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	2101      	movs	r1, #1
 8000e02:	697a      	ldr	r2, [r7, #20]
 8000e04:	4091      	lsls	r1, r2
 8000e06:	000a      	movs	r2, r1
 8000e08:	4013      	ands	r3, r2
 8000e0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d100      	bne.n	8000e14 <HAL_GPIO_Init+0x28>
 8000e12:	e138      	b.n	8001086 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	2203      	movs	r2, #3
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d005      	beq.n	8000e2c <HAL_GPIO_Init+0x40>
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	2203      	movs	r2, #3
 8000e26:	4013      	ands	r3, r2
 8000e28:	2b02      	cmp	r3, #2
 8000e2a:	d130      	bne.n	8000e8e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	689b      	ldr	r3, [r3, #8]
 8000e30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	005b      	lsls	r3, r3, #1
 8000e36:	2203      	movs	r2, #3
 8000e38:	409a      	lsls	r2, r3
 8000e3a:	0013      	movs	r3, r2
 8000e3c:	43da      	mvns	r2, r3
 8000e3e:	693b      	ldr	r3, [r7, #16]
 8000e40:	4013      	ands	r3, r2
 8000e42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	68da      	ldr	r2, [r3, #12]
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	005b      	lsls	r3, r3, #1
 8000e4c:	409a      	lsls	r2, r3
 8000e4e:	0013      	movs	r3, r2
 8000e50:	693a      	ldr	r2, [r7, #16]
 8000e52:	4313      	orrs	r3, r2
 8000e54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	693a      	ldr	r2, [r7, #16]
 8000e5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e62:	2201      	movs	r2, #1
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	409a      	lsls	r2, r3
 8000e68:	0013      	movs	r3, r2
 8000e6a:	43da      	mvns	r2, r3
 8000e6c:	693b      	ldr	r3, [r7, #16]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	091b      	lsrs	r3, r3, #4
 8000e78:	2201      	movs	r2, #1
 8000e7a:	401a      	ands	r2, r3
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	409a      	lsls	r2, r3
 8000e80:	0013      	movs	r3, r2
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	2203      	movs	r2, #3
 8000e94:	4013      	ands	r3, r2
 8000e96:	2b03      	cmp	r3, #3
 8000e98:	d017      	beq.n	8000eca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	68db      	ldr	r3, [r3, #12]
 8000e9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	2203      	movs	r2, #3
 8000ea6:	409a      	lsls	r2, r3
 8000ea8:	0013      	movs	r3, r2
 8000eaa:	43da      	mvns	r2, r3
 8000eac:	693b      	ldr	r3, [r7, #16]
 8000eae:	4013      	ands	r3, r2
 8000eb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	689a      	ldr	r2, [r3, #8]
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	409a      	lsls	r2, r3
 8000ebc:	0013      	movs	r3, r2
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	2203      	movs	r2, #3
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	2b02      	cmp	r3, #2
 8000ed4:	d123      	bne.n	8000f1e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	08da      	lsrs	r2, r3, #3
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	3208      	adds	r2, #8
 8000ede:	0092      	lsls	r2, r2, #2
 8000ee0:	58d3      	ldr	r3, [r2, r3]
 8000ee2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	2207      	movs	r2, #7
 8000ee8:	4013      	ands	r3, r2
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	220f      	movs	r2, #15
 8000eee:	409a      	lsls	r2, r3
 8000ef0:	0013      	movs	r3, r2
 8000ef2:	43da      	mvns	r2, r3
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	691a      	ldr	r2, [r3, #16]
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	2107      	movs	r1, #7
 8000f02:	400b      	ands	r3, r1
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	409a      	lsls	r2, r3
 8000f08:	0013      	movs	r3, r2
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	08da      	lsrs	r2, r3, #3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	3208      	adds	r2, #8
 8000f18:	0092      	lsls	r2, r2, #2
 8000f1a:	6939      	ldr	r1, [r7, #16]
 8000f1c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	2203      	movs	r2, #3
 8000f2a:	409a      	lsls	r2, r3
 8000f2c:	0013      	movs	r3, r2
 8000f2e:	43da      	mvns	r2, r3
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	4013      	ands	r3, r2
 8000f34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	2203      	movs	r2, #3
 8000f3c:	401a      	ands	r2, r3
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	409a      	lsls	r2, r3
 8000f44:	0013      	movs	r3, r2
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685a      	ldr	r2, [r3, #4]
 8000f56:	23c0      	movs	r3, #192	@ 0xc0
 8000f58:	029b      	lsls	r3, r3, #10
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	d100      	bne.n	8000f60 <HAL_GPIO_Init+0x174>
 8000f5e:	e092      	b.n	8001086 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000f60:	4a50      	ldr	r2, [pc, #320]	@ (80010a4 <HAL_GPIO_Init+0x2b8>)
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	089b      	lsrs	r3, r3, #2
 8000f66:	3318      	adds	r3, #24
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	589b      	ldr	r3, [r3, r2]
 8000f6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	2203      	movs	r2, #3
 8000f72:	4013      	ands	r3, r2
 8000f74:	00db      	lsls	r3, r3, #3
 8000f76:	220f      	movs	r2, #15
 8000f78:	409a      	lsls	r2, r3
 8000f7a:	0013      	movs	r3, r2
 8000f7c:	43da      	mvns	r2, r3
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	4013      	ands	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000f84:	687a      	ldr	r2, [r7, #4]
 8000f86:	23a0      	movs	r3, #160	@ 0xa0
 8000f88:	05db      	lsls	r3, r3, #23
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	d013      	beq.n	8000fb6 <HAL_GPIO_Init+0x1ca>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a45      	ldr	r2, [pc, #276]	@ (80010a8 <HAL_GPIO_Init+0x2bc>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d00d      	beq.n	8000fb2 <HAL_GPIO_Init+0x1c6>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a44      	ldr	r2, [pc, #272]	@ (80010ac <HAL_GPIO_Init+0x2c0>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d007      	beq.n	8000fae <HAL_GPIO_Init+0x1c2>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a43      	ldr	r2, [pc, #268]	@ (80010b0 <HAL_GPIO_Init+0x2c4>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d101      	bne.n	8000faa <HAL_GPIO_Init+0x1be>
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	e006      	b.n	8000fb8 <HAL_GPIO_Init+0x1cc>
 8000faa:	2305      	movs	r3, #5
 8000fac:	e004      	b.n	8000fb8 <HAL_GPIO_Init+0x1cc>
 8000fae:	2302      	movs	r3, #2
 8000fb0:	e002      	b.n	8000fb8 <HAL_GPIO_Init+0x1cc>
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e000      	b.n	8000fb8 <HAL_GPIO_Init+0x1cc>
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	697a      	ldr	r2, [r7, #20]
 8000fba:	2103      	movs	r1, #3
 8000fbc:	400a      	ands	r2, r1
 8000fbe:	00d2      	lsls	r2, r2, #3
 8000fc0:	4093      	lsls	r3, r2
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000fc8:	4936      	ldr	r1, [pc, #216]	@ (80010a4 <HAL_GPIO_Init+0x2b8>)
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	089b      	lsrs	r3, r3, #2
 8000fce:	3318      	adds	r3, #24
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000fd6:	4b33      	ldr	r3, [pc, #204]	@ (80010a4 <HAL_GPIO_Init+0x2b8>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	43da      	mvns	r2, r3
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685a      	ldr	r2, [r3, #4]
 8000fea:	2380      	movs	r3, #128	@ 0x80
 8000fec:	035b      	lsls	r3, r3, #13
 8000fee:	4013      	ands	r3, r2
 8000ff0:	d003      	beq.n	8000ffa <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ffa:	4b2a      	ldr	r3, [pc, #168]	@ (80010a4 <HAL_GPIO_Init+0x2b8>)
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001000:	4b28      	ldr	r3, [pc, #160]	@ (80010a4 <HAL_GPIO_Init+0x2b8>)
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	43da      	mvns	r2, r3
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	4013      	ands	r3, r2
 800100e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685a      	ldr	r2, [r3, #4]
 8001014:	2380      	movs	r3, #128	@ 0x80
 8001016:	039b      	lsls	r3, r3, #14
 8001018:	4013      	ands	r3, r2
 800101a:	d003      	beq.n	8001024 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	4313      	orrs	r3, r2
 8001022:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001024:	4b1f      	ldr	r3, [pc, #124]	@ (80010a4 <HAL_GPIO_Init+0x2b8>)
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800102a:	4a1e      	ldr	r2, [pc, #120]	@ (80010a4 <HAL_GPIO_Init+0x2b8>)
 800102c:	2384      	movs	r3, #132	@ 0x84
 800102e:	58d3      	ldr	r3, [r2, r3]
 8001030:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	43da      	mvns	r2, r3
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	4013      	ands	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685a      	ldr	r2, [r3, #4]
 8001040:	2380      	movs	r3, #128	@ 0x80
 8001042:	029b      	lsls	r3, r3, #10
 8001044:	4013      	ands	r3, r2
 8001046:	d003      	beq.n	8001050 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	4313      	orrs	r3, r2
 800104e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001050:	4914      	ldr	r1, [pc, #80]	@ (80010a4 <HAL_GPIO_Init+0x2b8>)
 8001052:	2284      	movs	r2, #132	@ 0x84
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001058:	4a12      	ldr	r2, [pc, #72]	@ (80010a4 <HAL_GPIO_Init+0x2b8>)
 800105a:	2380      	movs	r3, #128	@ 0x80
 800105c:	58d3      	ldr	r3, [r2, r3]
 800105e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	43da      	mvns	r2, r3
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	4013      	ands	r3, r2
 8001068:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685a      	ldr	r2, [r3, #4]
 800106e:	2380      	movs	r3, #128	@ 0x80
 8001070:	025b      	lsls	r3, r3, #9
 8001072:	4013      	ands	r3, r2
 8001074:	d003      	beq.n	800107e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	4313      	orrs	r3, r2
 800107c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800107e:	4909      	ldr	r1, [pc, #36]	@ (80010a4 <HAL_GPIO_Init+0x2b8>)
 8001080:	2280      	movs	r2, #128	@ 0x80
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	3301      	adds	r3, #1
 800108a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	40da      	lsrs	r2, r3
 8001094:	1e13      	subs	r3, r2, #0
 8001096:	d000      	beq.n	800109a <HAL_GPIO_Init+0x2ae>
 8001098:	e6b0      	b.n	8000dfc <HAL_GPIO_Init+0x10>
  }
}
 800109a:	46c0      	nop			@ (mov r8, r8)
 800109c:	46c0      	nop			@ (mov r8, r8)
 800109e:	46bd      	mov	sp, r7
 80010a0:	b006      	add	sp, #24
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	40021800 	.word	0x40021800
 80010a8:	50000400 	.word	0x50000400
 80010ac:	50000800 	.word	0x50000800
 80010b0:	50000c00 	.word	0x50000c00

080010b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	0008      	movs	r0, r1
 80010be:	0011      	movs	r1, r2
 80010c0:	1cbb      	adds	r3, r7, #2
 80010c2:	1c02      	adds	r2, r0, #0
 80010c4:	801a      	strh	r2, [r3, #0]
 80010c6:	1c7b      	adds	r3, r7, #1
 80010c8:	1c0a      	adds	r2, r1, #0
 80010ca:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010cc:	1c7b      	adds	r3, r7, #1
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d004      	beq.n	80010de <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010d4:	1cbb      	adds	r3, r7, #2
 80010d6:	881a      	ldrh	r2, [r3, #0]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010dc:	e003      	b.n	80010e6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010de:	1cbb      	adds	r3, r7, #2
 80010e0:	881a      	ldrh	r2, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80010e6:	46c0      	nop			@ (mov r8, r8)
 80010e8:	46bd      	mov	sp, r7
 80010ea:	b002      	add	sp, #8
 80010ec:	bd80      	pop	{r7, pc}
	...

080010f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d101      	bne.n	8001102 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e08f      	b.n	8001222 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2241      	movs	r2, #65	@ 0x41
 8001106:	5c9b      	ldrb	r3, [r3, r2]
 8001108:	b2db      	uxtb	r3, r3
 800110a:	2b00      	cmp	r3, #0
 800110c:	d107      	bne.n	800111e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2240      	movs	r2, #64	@ 0x40
 8001112:	2100      	movs	r1, #0
 8001114:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	0018      	movs	r0, r3
 800111a:	f7ff fbdd 	bl	80008d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2241      	movs	r2, #65	@ 0x41
 8001122:	2124      	movs	r1, #36	@ 0x24
 8001124:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2101      	movs	r1, #1
 8001132:	438a      	bics	r2, r1
 8001134:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	685a      	ldr	r2, [r3, #4]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	493b      	ldr	r1, [pc, #236]	@ (800122c <HAL_I2C_Init+0x13c>)
 8001140:	400a      	ands	r2, r1
 8001142:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	689a      	ldr	r2, [r3, #8]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4938      	ldr	r1, [pc, #224]	@ (8001230 <HAL_I2C_Init+0x140>)
 8001150:	400a      	ands	r2, r1
 8001152:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	2b01      	cmp	r3, #1
 800115a:	d108      	bne.n	800116e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	689a      	ldr	r2, [r3, #8]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2180      	movs	r1, #128	@ 0x80
 8001166:	0209      	lsls	r1, r1, #8
 8001168:	430a      	orrs	r2, r1
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	e007      	b.n	800117e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	689a      	ldr	r2, [r3, #8]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	2184      	movs	r1, #132	@ 0x84
 8001178:	0209      	lsls	r1, r1, #8
 800117a:	430a      	orrs	r2, r1
 800117c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	68db      	ldr	r3, [r3, #12]
 8001182:	2b02      	cmp	r3, #2
 8001184:	d109      	bne.n	800119a <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	685a      	ldr	r2, [r3, #4]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2180      	movs	r1, #128	@ 0x80
 8001192:	0109      	lsls	r1, r1, #4
 8001194:	430a      	orrs	r2, r1
 8001196:	605a      	str	r2, [r3, #4]
 8001198:	e007      	b.n	80011aa <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	685a      	ldr	r2, [r3, #4]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4923      	ldr	r1, [pc, #140]	@ (8001234 <HAL_I2C_Init+0x144>)
 80011a6:	400a      	ands	r2, r1
 80011a8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	685a      	ldr	r2, [r3, #4]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4920      	ldr	r1, [pc, #128]	@ (8001238 <HAL_I2C_Init+0x148>)
 80011b6:	430a      	orrs	r2, r1
 80011b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	68da      	ldr	r2, [r3, #12]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	491a      	ldr	r1, [pc, #104]	@ (8001230 <HAL_I2C_Init+0x140>)
 80011c6:	400a      	ands	r2, r1
 80011c8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	691a      	ldr	r2, [r3, #16]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	695b      	ldr	r3, [r3, #20]
 80011d2:	431a      	orrs	r2, r3
 80011d4:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	699b      	ldr	r3, [r3, #24]
 80011da:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	430a      	orrs	r2, r1
 80011e2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	69d9      	ldr	r1, [r3, #28]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6a1a      	ldr	r2, [r3, #32]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	430a      	orrs	r2, r1
 80011f2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	2101      	movs	r1, #1
 8001200:	430a      	orrs	r2, r1
 8001202:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2200      	movs	r2, #0
 8001208:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2241      	movs	r2, #65	@ 0x41
 800120e:	2120      	movs	r1, #32
 8001210:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2200      	movs	r2, #0
 8001216:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2242      	movs	r2, #66	@ 0x42
 800121c:	2100      	movs	r1, #0
 800121e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001220:	2300      	movs	r3, #0
}
 8001222:	0018      	movs	r0, r3
 8001224:	46bd      	mov	sp, r7
 8001226:	b002      	add	sp, #8
 8001228:	bd80      	pop	{r7, pc}
 800122a:	46c0      	nop			@ (mov r8, r8)
 800122c:	f0ffffff 	.word	0xf0ffffff
 8001230:	ffff7fff 	.word	0xffff7fff
 8001234:	fffff7ff 	.word	0xfffff7ff
 8001238:	02008000 	.word	0x02008000

0800123c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800123c:	b590      	push	{r4, r7, lr}
 800123e:	b089      	sub	sp, #36	@ 0x24
 8001240:	af02      	add	r7, sp, #8
 8001242:	60f8      	str	r0, [r7, #12]
 8001244:	0008      	movs	r0, r1
 8001246:	607a      	str	r2, [r7, #4]
 8001248:	0019      	movs	r1, r3
 800124a:	230a      	movs	r3, #10
 800124c:	18fb      	adds	r3, r7, r3
 800124e:	1c02      	adds	r2, r0, #0
 8001250:	801a      	strh	r2, [r3, #0]
 8001252:	2308      	movs	r3, #8
 8001254:	18fb      	adds	r3, r7, r3
 8001256:	1c0a      	adds	r2, r1, #0
 8001258:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	2241      	movs	r2, #65	@ 0x41
 800125e:	5c9b      	ldrb	r3, [r3, r2]
 8001260:	b2db      	uxtb	r3, r3
 8001262:	2b20      	cmp	r3, #32
 8001264:	d000      	beq.n	8001268 <HAL_I2C_Master_Transmit+0x2c>
 8001266:	e10a      	b.n	800147e <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	2240      	movs	r2, #64	@ 0x40
 800126c:	5c9b      	ldrb	r3, [r3, r2]
 800126e:	2b01      	cmp	r3, #1
 8001270:	d101      	bne.n	8001276 <HAL_I2C_Master_Transmit+0x3a>
 8001272:	2302      	movs	r3, #2
 8001274:	e104      	b.n	8001480 <HAL_I2C_Master_Transmit+0x244>
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	2240      	movs	r2, #64	@ 0x40
 800127a:	2101      	movs	r1, #1
 800127c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800127e:	f7ff fcd3 	bl	8000c28 <HAL_GetTick>
 8001282:	0003      	movs	r3, r0
 8001284:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001286:	2380      	movs	r3, #128	@ 0x80
 8001288:	0219      	lsls	r1, r3, #8
 800128a:	68f8      	ldr	r0, [r7, #12]
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	9300      	str	r3, [sp, #0]
 8001290:	2319      	movs	r3, #25
 8001292:	2201      	movs	r2, #1
 8001294:	f000 fa26 	bl	80016e4 <I2C_WaitOnFlagUntilTimeout>
 8001298:	1e03      	subs	r3, r0, #0
 800129a:	d001      	beq.n	80012a0 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 800129c:	2301      	movs	r3, #1
 800129e:	e0ef      	b.n	8001480 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	2241      	movs	r2, #65	@ 0x41
 80012a4:	2121      	movs	r1, #33	@ 0x21
 80012a6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	2242      	movs	r2, #66	@ 0x42
 80012ac:	2110      	movs	r1, #16
 80012ae:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	2200      	movs	r2, #0
 80012b4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	687a      	ldr	r2, [r7, #4]
 80012ba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	2208      	movs	r2, #8
 80012c0:	18ba      	adds	r2, r7, r2
 80012c2:	8812      	ldrh	r2, [r2, #0]
 80012c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	2200      	movs	r2, #0
 80012ca:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	2bff      	cmp	r3, #255	@ 0xff
 80012d4:	d906      	bls.n	80012e4 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	22ff      	movs	r2, #255	@ 0xff
 80012da:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80012dc:	2380      	movs	r3, #128	@ 0x80
 80012de:	045b      	lsls	r3, r3, #17
 80012e0:	617b      	str	r3, [r7, #20]
 80012e2:	e007      	b.n	80012f4 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80012e8:	b29a      	uxth	r2, r3
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80012ee:	2380      	movs	r3, #128	@ 0x80
 80012f0:	049b      	lsls	r3, r3, #18
 80012f2:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d027      	beq.n	800134c <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001300:	781a      	ldrb	r2, [r3, #0]
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800130c:	1c5a      	adds	r2, r3, #1
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001316:	b29b      	uxth	r3, r3
 8001318:	3b01      	subs	r3, #1
 800131a:	b29a      	uxth	r2, r3
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001324:	3b01      	subs	r3, #1
 8001326:	b29a      	uxth	r2, r3
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001330:	b2db      	uxtb	r3, r3
 8001332:	3301      	adds	r3, #1
 8001334:	b2da      	uxtb	r2, r3
 8001336:	697c      	ldr	r4, [r7, #20]
 8001338:	230a      	movs	r3, #10
 800133a:	18fb      	adds	r3, r7, r3
 800133c:	8819      	ldrh	r1, [r3, #0]
 800133e:	68f8      	ldr	r0, [r7, #12]
 8001340:	4b51      	ldr	r3, [pc, #324]	@ (8001488 <HAL_I2C_Master_Transmit+0x24c>)
 8001342:	9300      	str	r3, [sp, #0]
 8001344:	0023      	movs	r3, r4
 8001346:	f000 fc45 	bl	8001bd4 <I2C_TransferConfig>
 800134a:	e06f      	b.n	800142c <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001350:	b2da      	uxtb	r2, r3
 8001352:	697c      	ldr	r4, [r7, #20]
 8001354:	230a      	movs	r3, #10
 8001356:	18fb      	adds	r3, r7, r3
 8001358:	8819      	ldrh	r1, [r3, #0]
 800135a:	68f8      	ldr	r0, [r7, #12]
 800135c:	4b4a      	ldr	r3, [pc, #296]	@ (8001488 <HAL_I2C_Master_Transmit+0x24c>)
 800135e:	9300      	str	r3, [sp, #0]
 8001360:	0023      	movs	r3, r4
 8001362:	f000 fc37 	bl	8001bd4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001366:	e061      	b.n	800142c <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001368:	693a      	ldr	r2, [r7, #16]
 800136a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	0018      	movs	r0, r3
 8001370:	f000 fa10 	bl	8001794 <I2C_WaitOnTXISFlagUntilTimeout>
 8001374:	1e03      	subs	r3, r0, #0
 8001376:	d001      	beq.n	800137c <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	e081      	b.n	8001480 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001380:	781a      	ldrb	r2, [r3, #0]
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800138c:	1c5a      	adds	r2, r3, #1
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001396:	b29b      	uxth	r3, r3
 8001398:	3b01      	subs	r3, #1
 800139a:	b29a      	uxth	r2, r3
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013a4:	3b01      	subs	r3, #1
 80013a6:	b29a      	uxth	r2, r3
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d03a      	beq.n	800142c <HAL_I2C_Master_Transmit+0x1f0>
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d136      	bne.n	800142c <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80013be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80013c0:	68f8      	ldr	r0, [r7, #12]
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	9300      	str	r3, [sp, #0]
 80013c6:	0013      	movs	r3, r2
 80013c8:	2200      	movs	r2, #0
 80013ca:	2180      	movs	r1, #128	@ 0x80
 80013cc:	f000 f98a 	bl	80016e4 <I2C_WaitOnFlagUntilTimeout>
 80013d0:	1e03      	subs	r3, r0, #0
 80013d2:	d001      	beq.n	80013d8 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	e053      	b.n	8001480 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013dc:	b29b      	uxth	r3, r3
 80013de:	2bff      	cmp	r3, #255	@ 0xff
 80013e0:	d911      	bls.n	8001406 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	22ff      	movs	r2, #255	@ 0xff
 80013e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013ec:	b2da      	uxtb	r2, r3
 80013ee:	2380      	movs	r3, #128	@ 0x80
 80013f0:	045c      	lsls	r4, r3, #17
 80013f2:	230a      	movs	r3, #10
 80013f4:	18fb      	adds	r3, r7, r3
 80013f6:	8819      	ldrh	r1, [r3, #0]
 80013f8:	68f8      	ldr	r0, [r7, #12]
 80013fa:	2300      	movs	r3, #0
 80013fc:	9300      	str	r3, [sp, #0]
 80013fe:	0023      	movs	r3, r4
 8001400:	f000 fbe8 	bl	8001bd4 <I2C_TransferConfig>
 8001404:	e012      	b.n	800142c <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800140a:	b29a      	uxth	r2, r3
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001414:	b2da      	uxtb	r2, r3
 8001416:	2380      	movs	r3, #128	@ 0x80
 8001418:	049c      	lsls	r4, r3, #18
 800141a:	230a      	movs	r3, #10
 800141c:	18fb      	adds	r3, r7, r3
 800141e:	8819      	ldrh	r1, [r3, #0]
 8001420:	68f8      	ldr	r0, [r7, #12]
 8001422:	2300      	movs	r3, #0
 8001424:	9300      	str	r3, [sp, #0]
 8001426:	0023      	movs	r3, r4
 8001428:	f000 fbd4 	bl	8001bd4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001430:	b29b      	uxth	r3, r3
 8001432:	2b00      	cmp	r3, #0
 8001434:	d198      	bne.n	8001368 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	0018      	movs	r0, r3
 800143e:	f000 f9ef 	bl	8001820 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001442:	1e03      	subs	r3, r0, #0
 8001444:	d001      	beq.n	800144a <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e01a      	b.n	8001480 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	2220      	movs	r2, #32
 8001450:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	685a      	ldr	r2, [r3, #4]
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	490b      	ldr	r1, [pc, #44]	@ (800148c <HAL_I2C_Master_Transmit+0x250>)
 800145e:	400a      	ands	r2, r1
 8001460:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	2241      	movs	r2, #65	@ 0x41
 8001466:	2120      	movs	r1, #32
 8001468:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	2242      	movs	r2, #66	@ 0x42
 800146e:	2100      	movs	r1, #0
 8001470:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	2240      	movs	r2, #64	@ 0x40
 8001476:	2100      	movs	r1, #0
 8001478:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800147a:	2300      	movs	r3, #0
 800147c:	e000      	b.n	8001480 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 800147e:	2302      	movs	r3, #2
  }
}
 8001480:	0018      	movs	r0, r3
 8001482:	46bd      	mov	sp, r7
 8001484:	b007      	add	sp, #28
 8001486:	bd90      	pop	{r4, r7, pc}
 8001488:	80002000 	.word	0x80002000
 800148c:	fe00e800 	.word	0xfe00e800

08001490 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001490:	b590      	push	{r4, r7, lr}
 8001492:	b089      	sub	sp, #36	@ 0x24
 8001494:	af02      	add	r7, sp, #8
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	0008      	movs	r0, r1
 800149a:	607a      	str	r2, [r7, #4]
 800149c:	0019      	movs	r1, r3
 800149e:	230a      	movs	r3, #10
 80014a0:	18fb      	adds	r3, r7, r3
 80014a2:	1c02      	adds	r2, r0, #0
 80014a4:	801a      	strh	r2, [r3, #0]
 80014a6:	2308      	movs	r3, #8
 80014a8:	18fb      	adds	r3, r7, r3
 80014aa:	1c0a      	adds	r2, r1, #0
 80014ac:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	2241      	movs	r2, #65	@ 0x41
 80014b2:	5c9b      	ldrb	r3, [r3, r2]
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	2b20      	cmp	r3, #32
 80014b8:	d000      	beq.n	80014bc <HAL_I2C_Master_Receive+0x2c>
 80014ba:	e0e8      	b.n	800168e <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	2240      	movs	r2, #64	@ 0x40
 80014c0:	5c9b      	ldrb	r3, [r3, r2]
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d101      	bne.n	80014ca <HAL_I2C_Master_Receive+0x3a>
 80014c6:	2302      	movs	r3, #2
 80014c8:	e0e2      	b.n	8001690 <HAL_I2C_Master_Receive+0x200>
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	2240      	movs	r2, #64	@ 0x40
 80014ce:	2101      	movs	r1, #1
 80014d0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80014d2:	f7ff fba9 	bl	8000c28 <HAL_GetTick>
 80014d6:	0003      	movs	r3, r0
 80014d8:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80014da:	2380      	movs	r3, #128	@ 0x80
 80014dc:	0219      	lsls	r1, r3, #8
 80014de:	68f8      	ldr	r0, [r7, #12]
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	9300      	str	r3, [sp, #0]
 80014e4:	2319      	movs	r3, #25
 80014e6:	2201      	movs	r2, #1
 80014e8:	f000 f8fc 	bl	80016e4 <I2C_WaitOnFlagUntilTimeout>
 80014ec:	1e03      	subs	r3, r0, #0
 80014ee:	d001      	beq.n	80014f4 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	e0cd      	b.n	8001690 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	2241      	movs	r2, #65	@ 0x41
 80014f8:	2122      	movs	r1, #34	@ 0x22
 80014fa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	2242      	movs	r2, #66	@ 0x42
 8001500:	2110      	movs	r1, #16
 8001502:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	2200      	movs	r2, #0
 8001508:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	2208      	movs	r2, #8
 8001514:	18ba      	adds	r2, r7, r2
 8001516:	8812      	ldrh	r2, [r2, #0]
 8001518:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	2200      	movs	r2, #0
 800151e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001524:	b29b      	uxth	r3, r3
 8001526:	2bff      	cmp	r3, #255	@ 0xff
 8001528:	d911      	bls.n	800154e <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	22ff      	movs	r2, #255	@ 0xff
 800152e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001534:	b2da      	uxtb	r2, r3
 8001536:	2380      	movs	r3, #128	@ 0x80
 8001538:	045c      	lsls	r4, r3, #17
 800153a:	230a      	movs	r3, #10
 800153c:	18fb      	adds	r3, r7, r3
 800153e:	8819      	ldrh	r1, [r3, #0]
 8001540:	68f8      	ldr	r0, [r7, #12]
 8001542:	4b55      	ldr	r3, [pc, #340]	@ (8001698 <HAL_I2C_Master_Receive+0x208>)
 8001544:	9300      	str	r3, [sp, #0]
 8001546:	0023      	movs	r3, r4
 8001548:	f000 fb44 	bl	8001bd4 <I2C_TransferConfig>
 800154c:	e076      	b.n	800163c <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001552:	b29a      	uxth	r2, r3
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800155c:	b2da      	uxtb	r2, r3
 800155e:	2380      	movs	r3, #128	@ 0x80
 8001560:	049c      	lsls	r4, r3, #18
 8001562:	230a      	movs	r3, #10
 8001564:	18fb      	adds	r3, r7, r3
 8001566:	8819      	ldrh	r1, [r3, #0]
 8001568:	68f8      	ldr	r0, [r7, #12]
 800156a:	4b4b      	ldr	r3, [pc, #300]	@ (8001698 <HAL_I2C_Master_Receive+0x208>)
 800156c:	9300      	str	r3, [sp, #0]
 800156e:	0023      	movs	r3, r4
 8001570:	f000 fb30 	bl	8001bd4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001574:	e062      	b.n	800163c <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001576:	697a      	ldr	r2, [r7, #20]
 8001578:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	0018      	movs	r0, r3
 800157e:	f000 f993 	bl	80018a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001582:	1e03      	subs	r3, r0, #0
 8001584:	d001      	beq.n	800158a <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e082      	b.n	8001690 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001594:	b2d2      	uxtb	r2, r2
 8001596:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800159c:	1c5a      	adds	r2, r3, #1
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015a6:	3b01      	subs	r3, #1
 80015a8:	b29a      	uxth	r2, r3
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	3b01      	subs	r3, #1
 80015b6:	b29a      	uxth	r2, r3
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015c0:	b29b      	uxth	r3, r3
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d03a      	beq.n	800163c <HAL_I2C_Master_Receive+0x1ac>
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d136      	bne.n	800163c <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80015ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80015d0:	68f8      	ldr	r0, [r7, #12]
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	9300      	str	r3, [sp, #0]
 80015d6:	0013      	movs	r3, r2
 80015d8:	2200      	movs	r2, #0
 80015da:	2180      	movs	r1, #128	@ 0x80
 80015dc:	f000 f882 	bl	80016e4 <I2C_WaitOnFlagUntilTimeout>
 80015e0:	1e03      	subs	r3, r0, #0
 80015e2:	d001      	beq.n	80015e8 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e053      	b.n	8001690 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	2bff      	cmp	r3, #255	@ 0xff
 80015f0:	d911      	bls.n	8001616 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	22ff      	movs	r2, #255	@ 0xff
 80015f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015fc:	b2da      	uxtb	r2, r3
 80015fe:	2380      	movs	r3, #128	@ 0x80
 8001600:	045c      	lsls	r4, r3, #17
 8001602:	230a      	movs	r3, #10
 8001604:	18fb      	adds	r3, r7, r3
 8001606:	8819      	ldrh	r1, [r3, #0]
 8001608:	68f8      	ldr	r0, [r7, #12]
 800160a:	2300      	movs	r3, #0
 800160c:	9300      	str	r3, [sp, #0]
 800160e:	0023      	movs	r3, r4
 8001610:	f000 fae0 	bl	8001bd4 <I2C_TransferConfig>
 8001614:	e012      	b.n	800163c <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800161a:	b29a      	uxth	r2, r3
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001624:	b2da      	uxtb	r2, r3
 8001626:	2380      	movs	r3, #128	@ 0x80
 8001628:	049c      	lsls	r4, r3, #18
 800162a:	230a      	movs	r3, #10
 800162c:	18fb      	adds	r3, r7, r3
 800162e:	8819      	ldrh	r1, [r3, #0]
 8001630:	68f8      	ldr	r0, [r7, #12]
 8001632:	2300      	movs	r3, #0
 8001634:	9300      	str	r3, [sp, #0]
 8001636:	0023      	movs	r3, r4
 8001638:	f000 facc 	bl	8001bd4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001640:	b29b      	uxth	r3, r3
 8001642:	2b00      	cmp	r3, #0
 8001644:	d197      	bne.n	8001576 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001646:	697a      	ldr	r2, [r7, #20]
 8001648:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	0018      	movs	r0, r3
 800164e:	f000 f8e7 	bl	8001820 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001652:	1e03      	subs	r3, r0, #0
 8001654:	d001      	beq.n	800165a <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e01a      	b.n	8001690 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	2220      	movs	r2, #32
 8001660:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	685a      	ldr	r2, [r3, #4]
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	490b      	ldr	r1, [pc, #44]	@ (800169c <HAL_I2C_Master_Receive+0x20c>)
 800166e:	400a      	ands	r2, r1
 8001670:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	2241      	movs	r2, #65	@ 0x41
 8001676:	2120      	movs	r1, #32
 8001678:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	2242      	movs	r2, #66	@ 0x42
 800167e:	2100      	movs	r1, #0
 8001680:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	2240      	movs	r2, #64	@ 0x40
 8001686:	2100      	movs	r1, #0
 8001688:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800168a:	2300      	movs	r3, #0
 800168c:	e000      	b.n	8001690 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 800168e:	2302      	movs	r3, #2
  }
}
 8001690:	0018      	movs	r0, r3
 8001692:	46bd      	mov	sp, r7
 8001694:	b007      	add	sp, #28
 8001696:	bd90      	pop	{r4, r7, pc}
 8001698:	80002400 	.word	0x80002400
 800169c:	fe00e800 	.word	0xfe00e800

080016a0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	699b      	ldr	r3, [r3, #24]
 80016ae:	2202      	movs	r2, #2
 80016b0:	4013      	ands	r3, r2
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d103      	bne.n	80016be <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2200      	movs	r2, #0
 80016bc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	699b      	ldr	r3, [r3, #24]
 80016c4:	2201      	movs	r2, #1
 80016c6:	4013      	ands	r3, r2
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d007      	beq.n	80016dc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	699a      	ldr	r2, [r3, #24]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2101      	movs	r1, #1
 80016d8:	430a      	orrs	r2, r1
 80016da:	619a      	str	r2, [r3, #24]
  }
}
 80016dc:	46c0      	nop			@ (mov r8, r8)
 80016de:	46bd      	mov	sp, r7
 80016e0:	b002      	add	sp, #8
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	603b      	str	r3, [r7, #0]
 80016f0:	1dfb      	adds	r3, r7, #7
 80016f2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80016f4:	e03a      	b.n	800176c <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	6839      	ldr	r1, [r7, #0]
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	0018      	movs	r0, r3
 80016fe:	f000 f971 	bl	80019e4 <I2C_IsErrorOccurred>
 8001702:	1e03      	subs	r3, r0, #0
 8001704:	d001      	beq.n	800170a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e040      	b.n	800178c <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	3301      	adds	r3, #1
 800170e:	d02d      	beq.n	800176c <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001710:	f7ff fa8a 	bl	8000c28 <HAL_GetTick>
 8001714:	0002      	movs	r2, r0
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	683a      	ldr	r2, [r7, #0]
 800171c:	429a      	cmp	r2, r3
 800171e:	d302      	bcc.n	8001726 <I2C_WaitOnFlagUntilTimeout+0x42>
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d122      	bne.n	800176c <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	699b      	ldr	r3, [r3, #24]
 800172c:	68ba      	ldr	r2, [r7, #8]
 800172e:	4013      	ands	r3, r2
 8001730:	68ba      	ldr	r2, [r7, #8]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	425a      	negs	r2, r3
 8001736:	4153      	adcs	r3, r2
 8001738:	b2db      	uxtb	r3, r3
 800173a:	001a      	movs	r2, r3
 800173c:	1dfb      	adds	r3, r7, #7
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	429a      	cmp	r2, r3
 8001742:	d113      	bne.n	800176c <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001748:	2220      	movs	r2, #32
 800174a:	431a      	orrs	r2, r3
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	2241      	movs	r2, #65	@ 0x41
 8001754:	2120      	movs	r1, #32
 8001756:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	2242      	movs	r2, #66	@ 0x42
 800175c:	2100      	movs	r1, #0
 800175e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	2240      	movs	r2, #64	@ 0x40
 8001764:	2100      	movs	r1, #0
 8001766:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e00f      	b.n	800178c <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	699b      	ldr	r3, [r3, #24]
 8001772:	68ba      	ldr	r2, [r7, #8]
 8001774:	4013      	ands	r3, r2
 8001776:	68ba      	ldr	r2, [r7, #8]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	425a      	negs	r2, r3
 800177c:	4153      	adcs	r3, r2
 800177e:	b2db      	uxtb	r3, r3
 8001780:	001a      	movs	r2, r3
 8001782:	1dfb      	adds	r3, r7, #7
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	429a      	cmp	r2, r3
 8001788:	d0b5      	beq.n	80016f6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800178a:	2300      	movs	r3, #0
}
 800178c:	0018      	movs	r0, r3
 800178e:	46bd      	mov	sp, r7
 8001790:	b004      	add	sp, #16
 8001792:	bd80      	pop	{r7, pc}

08001794 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80017a0:	e032      	b.n	8001808 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	68b9      	ldr	r1, [r7, #8]
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	0018      	movs	r0, r3
 80017aa:	f000 f91b 	bl	80019e4 <I2C_IsErrorOccurred>
 80017ae:	1e03      	subs	r3, r0, #0
 80017b0:	d001      	beq.n	80017b6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e030      	b.n	8001818 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	3301      	adds	r3, #1
 80017ba:	d025      	beq.n	8001808 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017bc:	f7ff fa34 	bl	8000c28 <HAL_GetTick>
 80017c0:	0002      	movs	r2, r0
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	68ba      	ldr	r2, [r7, #8]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d302      	bcc.n	80017d2 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d11a      	bne.n	8001808 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	699b      	ldr	r3, [r3, #24]
 80017d8:	2202      	movs	r2, #2
 80017da:	4013      	ands	r3, r2
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d013      	beq.n	8001808 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017e4:	2220      	movs	r2, #32
 80017e6:	431a      	orrs	r2, r3
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2241      	movs	r2, #65	@ 0x41
 80017f0:	2120      	movs	r1, #32
 80017f2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2242      	movs	r2, #66	@ 0x42
 80017f8:	2100      	movs	r1, #0
 80017fa:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	2240      	movs	r2, #64	@ 0x40
 8001800:	2100      	movs	r1, #0
 8001802:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e007      	b.n	8001818 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	699b      	ldr	r3, [r3, #24]
 800180e:	2202      	movs	r2, #2
 8001810:	4013      	ands	r3, r2
 8001812:	2b02      	cmp	r3, #2
 8001814:	d1c5      	bne.n	80017a2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001816:	2300      	movs	r3, #0
}
 8001818:	0018      	movs	r0, r3
 800181a:	46bd      	mov	sp, r7
 800181c:	b004      	add	sp, #16
 800181e:	bd80      	pop	{r7, pc}

08001820 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	60b9      	str	r1, [r7, #8]
 800182a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800182c:	e02f      	b.n	800188e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	68b9      	ldr	r1, [r7, #8]
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	0018      	movs	r0, r3
 8001836:	f000 f8d5 	bl	80019e4 <I2C_IsErrorOccurred>
 800183a:	1e03      	subs	r3, r0, #0
 800183c:	d001      	beq.n	8001842 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e02d      	b.n	800189e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001842:	f7ff f9f1 	bl	8000c28 <HAL_GetTick>
 8001846:	0002      	movs	r2, r0
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	68ba      	ldr	r2, [r7, #8]
 800184e:	429a      	cmp	r2, r3
 8001850:	d302      	bcc.n	8001858 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d11a      	bne.n	800188e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	699b      	ldr	r3, [r3, #24]
 800185e:	2220      	movs	r2, #32
 8001860:	4013      	ands	r3, r2
 8001862:	2b20      	cmp	r3, #32
 8001864:	d013      	beq.n	800188e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800186a:	2220      	movs	r2, #32
 800186c:	431a      	orrs	r2, r3
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2241      	movs	r2, #65	@ 0x41
 8001876:	2120      	movs	r1, #32
 8001878:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2242      	movs	r2, #66	@ 0x42
 800187e:	2100      	movs	r1, #0
 8001880:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	2240      	movs	r2, #64	@ 0x40
 8001886:	2100      	movs	r1, #0
 8001888:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e007      	b.n	800189e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	2220      	movs	r2, #32
 8001896:	4013      	ands	r3, r2
 8001898:	2b20      	cmp	r3, #32
 800189a:	d1c8      	bne.n	800182e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800189c:	2300      	movs	r3, #0
}
 800189e:	0018      	movs	r0, r3
 80018a0:	46bd      	mov	sp, r7
 80018a2:	b004      	add	sp, #16
 80018a4:	bd80      	pop	{r7, pc}
	...

080018a8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b086      	sub	sp, #24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018b4:	2317      	movs	r3, #23
 80018b6:	18fb      	adds	r3, r7, r3
 80018b8:	2200      	movs	r2, #0
 80018ba:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80018bc:	e07b      	b.n	80019b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	68b9      	ldr	r1, [r7, #8]
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	0018      	movs	r0, r3
 80018c6:	f000 f88d 	bl	80019e4 <I2C_IsErrorOccurred>
 80018ca:	1e03      	subs	r3, r0, #0
 80018cc:	d003      	beq.n	80018d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 80018ce:	2317      	movs	r3, #23
 80018d0:	18fb      	adds	r3, r7, r3
 80018d2:	2201      	movs	r2, #1
 80018d4:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	699b      	ldr	r3, [r3, #24]
 80018dc:	2220      	movs	r2, #32
 80018de:	4013      	ands	r3, r2
 80018e0:	2b20      	cmp	r3, #32
 80018e2:	d140      	bne.n	8001966 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 80018e4:	2117      	movs	r1, #23
 80018e6:	187b      	adds	r3, r7, r1
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d13b      	bne.n	8001966 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	2204      	movs	r2, #4
 80018f6:	4013      	ands	r3, r2
 80018f8:	2b04      	cmp	r3, #4
 80018fa:	d106      	bne.n	800190a <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001900:	2b00      	cmp	r3, #0
 8001902:	d002      	beq.n	800190a <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8001904:	187b      	adds	r3, r7, r1
 8001906:	2200      	movs	r2, #0
 8001908:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	2210      	movs	r2, #16
 8001912:	4013      	ands	r3, r2
 8001914:	2b10      	cmp	r3, #16
 8001916:	d123      	bne.n	8001960 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2210      	movs	r2, #16
 800191e:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2204      	movs	r2, #4
 8001924:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2220      	movs	r2, #32
 800192c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	685a      	ldr	r2, [r3, #4]
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4929      	ldr	r1, [pc, #164]	@ (80019e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 800193a:	400a      	ands	r2, r1
 800193c:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	2241      	movs	r2, #65	@ 0x41
 8001942:	2120      	movs	r1, #32
 8001944:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2242      	movs	r2, #66	@ 0x42
 800194a:	2100      	movs	r1, #0
 800194c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	2240      	movs	r2, #64	@ 0x40
 8001952:	2100      	movs	r1, #0
 8001954:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8001956:	2317      	movs	r3, #23
 8001958:	18fb      	adds	r3, r7, r3
 800195a:	2201      	movs	r2, #1
 800195c:	701a      	strb	r2, [r3, #0]
 800195e:	e002      	b.n	8001966 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2200      	movs	r2, #0
 8001964:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8001966:	f7ff f95f 	bl	8000c28 <HAL_GetTick>
 800196a:	0002      	movs	r2, r0
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	68ba      	ldr	r2, [r7, #8]
 8001972:	429a      	cmp	r2, r3
 8001974:	d302      	bcc.n	800197c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d11c      	bne.n	80019b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 800197c:	2017      	movs	r0, #23
 800197e:	183b      	adds	r3, r7, r0
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d117      	bne.n	80019b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	2204      	movs	r2, #4
 800198e:	4013      	ands	r3, r2
 8001990:	2b04      	cmp	r3, #4
 8001992:	d010      	beq.n	80019b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001998:	2220      	movs	r2, #32
 800199a:	431a      	orrs	r2, r3
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2241      	movs	r2, #65	@ 0x41
 80019a4:	2120      	movs	r1, #32
 80019a6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	2240      	movs	r2, #64	@ 0x40
 80019ac:	2100      	movs	r1, #0
 80019ae:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 80019b0:	183b      	adds	r3, r7, r0
 80019b2:	2201      	movs	r2, #1
 80019b4:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	699b      	ldr	r3, [r3, #24]
 80019bc:	2204      	movs	r2, #4
 80019be:	4013      	ands	r3, r2
 80019c0:	2b04      	cmp	r3, #4
 80019c2:	d005      	beq.n	80019d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 80019c4:	2317      	movs	r3, #23
 80019c6:	18fb      	adds	r3, r7, r3
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d100      	bne.n	80019d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 80019ce:	e776      	b.n	80018be <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 80019d0:	2317      	movs	r3, #23
 80019d2:	18fb      	adds	r3, r7, r3
 80019d4:	781b      	ldrb	r3, [r3, #0]
}
 80019d6:	0018      	movs	r0, r3
 80019d8:	46bd      	mov	sp, r7
 80019da:	b006      	add	sp, #24
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	46c0      	nop			@ (mov r8, r8)
 80019e0:	fe00e800 	.word	0xfe00e800

080019e4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b08a      	sub	sp, #40	@ 0x28
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	60b9      	str	r1, [r7, #8]
 80019ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019f0:	2327      	movs	r3, #39	@ 0x27
 80019f2:	18fb      	adds	r3, r7, r3
 80019f4:	2200      	movs	r2, #0
 80019f6:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	699b      	ldr	r3, [r3, #24]
 80019fe:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001a00:	2300      	movs	r3, #0
 8001a02:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	2210      	movs	r2, #16
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	d100      	bne.n	8001a12 <I2C_IsErrorOccurred+0x2e>
 8001a10:	e079      	b.n	8001b06 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2210      	movs	r2, #16
 8001a18:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001a1a:	e057      	b.n	8001acc <I2C_IsErrorOccurred+0xe8>
 8001a1c:	2227      	movs	r2, #39	@ 0x27
 8001a1e:	18bb      	adds	r3, r7, r2
 8001a20:	18ba      	adds	r2, r7, r2
 8001a22:	7812      	ldrb	r2, [r2, #0]
 8001a24:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	3301      	adds	r3, #1
 8001a2a:	d04f      	beq.n	8001acc <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001a2c:	f7ff f8fc 	bl	8000c28 <HAL_GetTick>
 8001a30:	0002      	movs	r2, r0
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	68ba      	ldr	r2, [r7, #8]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d302      	bcc.n	8001a42 <I2C_IsErrorOccurred+0x5e>
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d144      	bne.n	8001acc <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	685a      	ldr	r2, [r3, #4]
 8001a48:	2380      	movs	r3, #128	@ 0x80
 8001a4a:	01db      	lsls	r3, r3, #7
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001a50:	2013      	movs	r0, #19
 8001a52:	183b      	adds	r3, r7, r0
 8001a54:	68fa      	ldr	r2, [r7, #12]
 8001a56:	2142      	movs	r1, #66	@ 0x42
 8001a58:	5c52      	ldrb	r2, [r2, r1]
 8001a5a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	699a      	ldr	r2, [r3, #24]
 8001a62:	2380      	movs	r3, #128	@ 0x80
 8001a64:	021b      	lsls	r3, r3, #8
 8001a66:	401a      	ands	r2, r3
 8001a68:	2380      	movs	r3, #128	@ 0x80
 8001a6a:	021b      	lsls	r3, r3, #8
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d126      	bne.n	8001abe <I2C_IsErrorOccurred+0xda>
 8001a70:	697a      	ldr	r2, [r7, #20]
 8001a72:	2380      	movs	r3, #128	@ 0x80
 8001a74:	01db      	lsls	r3, r3, #7
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d021      	beq.n	8001abe <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8001a7a:	183b      	adds	r3, r7, r0
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	2b20      	cmp	r3, #32
 8001a80:	d01d      	beq.n	8001abe <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	685a      	ldr	r2, [r3, #4]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2180      	movs	r1, #128	@ 0x80
 8001a8e:	01c9      	lsls	r1, r1, #7
 8001a90:	430a      	orrs	r2, r1
 8001a92:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001a94:	f7ff f8c8 	bl	8000c28 <HAL_GetTick>
 8001a98:	0003      	movs	r3, r0
 8001a9a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a9c:	e00f      	b.n	8001abe <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001a9e:	f7ff f8c3 	bl	8000c28 <HAL_GetTick>
 8001aa2:	0002      	movs	r2, r0
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	2b19      	cmp	r3, #25
 8001aaa:	d908      	bls.n	8001abe <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001aac:	6a3b      	ldr	r3, [r7, #32]
 8001aae:	2220      	movs	r2, #32
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001ab4:	2327      	movs	r3, #39	@ 0x27
 8001ab6:	18fb      	adds	r3, r7, r3
 8001ab8:	2201      	movs	r2, #1
 8001aba:	701a      	strb	r2, [r3, #0]

              break;
 8001abc:	e006      	b.n	8001acc <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	2220      	movs	r2, #32
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	2b20      	cmp	r3, #32
 8001aca:	d1e8      	bne.n	8001a9e <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	699b      	ldr	r3, [r3, #24]
 8001ad2:	2220      	movs	r2, #32
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	2b20      	cmp	r3, #32
 8001ad8:	d004      	beq.n	8001ae4 <I2C_IsErrorOccurred+0x100>
 8001ada:	2327      	movs	r3, #39	@ 0x27
 8001adc:	18fb      	adds	r3, r7, r3
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d09b      	beq.n	8001a1c <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001ae4:	2327      	movs	r3, #39	@ 0x27
 8001ae6:	18fb      	adds	r3, r7, r3
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d103      	bne.n	8001af6 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2220      	movs	r2, #32
 8001af4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001af6:	6a3b      	ldr	r3, [r7, #32]
 8001af8:	2204      	movs	r2, #4
 8001afa:	4313      	orrs	r3, r2
 8001afc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001afe:	2327      	movs	r3, #39	@ 0x27
 8001b00:	18fb      	adds	r3, r7, r3
 8001b02:	2201      	movs	r2, #1
 8001b04:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	2380      	movs	r3, #128	@ 0x80
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	4013      	ands	r3, r2
 8001b16:	d00c      	beq.n	8001b32 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001b18:	6a3b      	ldr	r3, [r7, #32]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2280      	movs	r2, #128	@ 0x80
 8001b26:	0052      	lsls	r2, r2, #1
 8001b28:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001b2a:	2327      	movs	r3, #39	@ 0x27
 8001b2c:	18fb      	adds	r3, r7, r3
 8001b2e:	2201      	movs	r2, #1
 8001b30:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	2380      	movs	r3, #128	@ 0x80
 8001b36:	00db      	lsls	r3, r3, #3
 8001b38:	4013      	ands	r3, r2
 8001b3a:	d00c      	beq.n	8001b56 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001b3c:	6a3b      	ldr	r3, [r7, #32]
 8001b3e:	2208      	movs	r2, #8
 8001b40:	4313      	orrs	r3, r2
 8001b42:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2280      	movs	r2, #128	@ 0x80
 8001b4a:	00d2      	lsls	r2, r2, #3
 8001b4c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001b4e:	2327      	movs	r3, #39	@ 0x27
 8001b50:	18fb      	adds	r3, r7, r3
 8001b52:	2201      	movs	r2, #1
 8001b54:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	2380      	movs	r3, #128	@ 0x80
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	d00c      	beq.n	8001b7a <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001b60:	6a3b      	ldr	r3, [r7, #32]
 8001b62:	2202      	movs	r2, #2
 8001b64:	4313      	orrs	r3, r2
 8001b66:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2280      	movs	r2, #128	@ 0x80
 8001b6e:	0092      	lsls	r2, r2, #2
 8001b70:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001b72:	2327      	movs	r3, #39	@ 0x27
 8001b74:	18fb      	adds	r3, r7, r3
 8001b76:	2201      	movs	r2, #1
 8001b78:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8001b7a:	2327      	movs	r3, #39	@ 0x27
 8001b7c:	18fb      	adds	r3, r7, r3
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d01d      	beq.n	8001bc0 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	0018      	movs	r0, r3
 8001b88:	f7ff fd8a 	bl	80016a0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	685a      	ldr	r2, [r3, #4]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	490e      	ldr	r1, [pc, #56]	@ (8001bd0 <I2C_IsErrorOccurred+0x1ec>)
 8001b98:	400a      	ands	r2, r1
 8001b9a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001ba0:	6a3b      	ldr	r3, [r7, #32]
 8001ba2:	431a      	orrs	r2, r3
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2241      	movs	r2, #65	@ 0x41
 8001bac:	2120      	movs	r1, #32
 8001bae:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2242      	movs	r2, #66	@ 0x42
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2240      	movs	r2, #64	@ 0x40
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8001bc0:	2327      	movs	r3, #39	@ 0x27
 8001bc2:	18fb      	adds	r3, r7, r3
 8001bc4:	781b      	ldrb	r3, [r3, #0]
}
 8001bc6:	0018      	movs	r0, r3
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	b00a      	add	sp, #40	@ 0x28
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	46c0      	nop			@ (mov r8, r8)
 8001bd0:	fe00e800 	.word	0xfe00e800

08001bd4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001bd4:	b590      	push	{r4, r7, lr}
 8001bd6:	b087      	sub	sp, #28
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	0008      	movs	r0, r1
 8001bde:	0011      	movs	r1, r2
 8001be0:	607b      	str	r3, [r7, #4]
 8001be2:	240a      	movs	r4, #10
 8001be4:	193b      	adds	r3, r7, r4
 8001be6:	1c02      	adds	r2, r0, #0
 8001be8:	801a      	strh	r2, [r3, #0]
 8001bea:	2009      	movs	r0, #9
 8001bec:	183b      	adds	r3, r7, r0
 8001bee:	1c0a      	adds	r2, r1, #0
 8001bf0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001bf2:	193b      	adds	r3, r7, r4
 8001bf4:	881b      	ldrh	r3, [r3, #0]
 8001bf6:	059b      	lsls	r3, r3, #22
 8001bf8:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001bfa:	183b      	adds	r3, r7, r0
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	0419      	lsls	r1, r3, #16
 8001c00:	23ff      	movs	r3, #255	@ 0xff
 8001c02:	041b      	lsls	r3, r3, #16
 8001c04:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001c06:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001c0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	085b      	lsrs	r3, r3, #1
 8001c14:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001c1e:	0d51      	lsrs	r1, r2, #21
 8001c20:	2280      	movs	r2, #128	@ 0x80
 8001c22:	00d2      	lsls	r2, r2, #3
 8001c24:	400a      	ands	r2, r1
 8001c26:	4907      	ldr	r1, [pc, #28]	@ (8001c44 <I2C_TransferConfig+0x70>)
 8001c28:	430a      	orrs	r2, r1
 8001c2a:	43d2      	mvns	r2, r2
 8001c2c:	401a      	ands	r2, r3
 8001c2e:	0011      	movs	r1, r2
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	697a      	ldr	r2, [r7, #20]
 8001c36:	430a      	orrs	r2, r1
 8001c38:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001c3a:	46c0      	nop			@ (mov r8, r8)
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	b007      	add	sp, #28
 8001c40:	bd90      	pop	{r4, r7, pc}
 8001c42:	46c0      	nop			@ (mov r8, r8)
 8001c44:	03ff63ff 	.word	0x03ff63ff

08001c48 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2241      	movs	r2, #65	@ 0x41
 8001c56:	5c9b      	ldrb	r3, [r3, r2]
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	2b20      	cmp	r3, #32
 8001c5c:	d138      	bne.n	8001cd0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2240      	movs	r2, #64	@ 0x40
 8001c62:	5c9b      	ldrb	r3, [r3, r2]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d101      	bne.n	8001c6c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001c68:	2302      	movs	r3, #2
 8001c6a:	e032      	b.n	8001cd2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2240      	movs	r2, #64	@ 0x40
 8001c70:	2101      	movs	r1, #1
 8001c72:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2241      	movs	r2, #65	@ 0x41
 8001c78:	2124      	movs	r1, #36	@ 0x24
 8001c7a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2101      	movs	r1, #1
 8001c88:	438a      	bics	r2, r1
 8001c8a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4911      	ldr	r1, [pc, #68]	@ (8001cdc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001c98:	400a      	ands	r2, r1
 8001c9a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	6819      	ldr	r1, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	683a      	ldr	r2, [r7, #0]
 8001ca8:	430a      	orrs	r2, r1
 8001caa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2101      	movs	r1, #1
 8001cb8:	430a      	orrs	r2, r1
 8001cba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2241      	movs	r2, #65	@ 0x41
 8001cc0:	2120      	movs	r1, #32
 8001cc2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2240      	movs	r2, #64	@ 0x40
 8001cc8:	2100      	movs	r1, #0
 8001cca:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	e000      	b.n	8001cd2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001cd0:	2302      	movs	r3, #2
  }
}
 8001cd2:	0018      	movs	r0, r3
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	b002      	add	sp, #8
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	46c0      	nop			@ (mov r8, r8)
 8001cdc:	ffffefff 	.word	0xffffefff

08001ce0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2241      	movs	r2, #65	@ 0x41
 8001cee:	5c9b      	ldrb	r3, [r3, r2]
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	2b20      	cmp	r3, #32
 8001cf4:	d139      	bne.n	8001d6a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2240      	movs	r2, #64	@ 0x40
 8001cfa:	5c9b      	ldrb	r3, [r3, r2]
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d101      	bne.n	8001d04 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001d00:	2302      	movs	r3, #2
 8001d02:	e033      	b.n	8001d6c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2240      	movs	r2, #64	@ 0x40
 8001d08:	2101      	movs	r1, #1
 8001d0a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2241      	movs	r2, #65	@ 0x41
 8001d10:	2124      	movs	r1, #36	@ 0x24
 8001d12:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2101      	movs	r1, #1
 8001d20:	438a      	bics	r2, r1
 8001d22:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	4a11      	ldr	r2, [pc, #68]	@ (8001d74 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001d30:	4013      	ands	r3, r2
 8001d32:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	021b      	lsls	r3, r3, #8
 8001d38:	68fa      	ldr	r2, [r7, #12]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	68fa      	ldr	r2, [r7, #12]
 8001d44:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2101      	movs	r1, #1
 8001d52:	430a      	orrs	r2, r1
 8001d54:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2241      	movs	r2, #65	@ 0x41
 8001d5a:	2120      	movs	r1, #32
 8001d5c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2240      	movs	r2, #64	@ 0x40
 8001d62:	2100      	movs	r1, #0
 8001d64:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001d66:	2300      	movs	r3, #0
 8001d68:	e000      	b.n	8001d6c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001d6a:	2302      	movs	r3, #2
  }
}
 8001d6c:	0018      	movs	r0, r3
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	b004      	add	sp, #16
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	fffff0ff 	.word	0xfffff0ff

08001d78 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001d80:	4b19      	ldr	r3, [pc, #100]	@ (8001de8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a19      	ldr	r2, [pc, #100]	@ (8001dec <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001d86:	4013      	ands	r3, r2
 8001d88:	0019      	movs	r1, r3
 8001d8a:	4b17      	ldr	r3, [pc, #92]	@ (8001de8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	2380      	movs	r3, #128	@ 0x80
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d11f      	bne.n	8001ddc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001d9c:	4b14      	ldr	r3, [pc, #80]	@ (8001df0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	0013      	movs	r3, r2
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	189b      	adds	r3, r3, r2
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	4912      	ldr	r1, [pc, #72]	@ (8001df4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001daa:	0018      	movs	r0, r3
 8001dac:	f7fe f9ba 	bl	8000124 <__udivsi3>
 8001db0:	0003      	movs	r3, r0
 8001db2:	3301      	adds	r3, #1
 8001db4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001db6:	e008      	b.n	8001dca <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d003      	beq.n	8001dc6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	3b01      	subs	r3, #1
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	e001      	b.n	8001dca <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e009      	b.n	8001dde <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001dca:	4b07      	ldr	r3, [pc, #28]	@ (8001de8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001dcc:	695a      	ldr	r2, [r3, #20]
 8001dce:	2380      	movs	r3, #128	@ 0x80
 8001dd0:	00db      	lsls	r3, r3, #3
 8001dd2:	401a      	ands	r2, r3
 8001dd4:	2380      	movs	r3, #128	@ 0x80
 8001dd6:	00db      	lsls	r3, r3, #3
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d0ed      	beq.n	8001db8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	0018      	movs	r0, r3
 8001de0:	46bd      	mov	sp, r7
 8001de2:	b004      	add	sp, #16
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	46c0      	nop			@ (mov r8, r8)
 8001de8:	40007000 	.word	0x40007000
 8001dec:	fffff9ff 	.word	0xfffff9ff
 8001df0:	20000000 	.word	0x20000000
 8001df4:	000f4240 	.word	0x000f4240

08001df8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001dfc:	4b03      	ldr	r3, [pc, #12]	@ (8001e0c <LL_RCC_GetAPB1Prescaler+0x14>)
 8001dfe:	689a      	ldr	r2, [r3, #8]
 8001e00:	23e0      	movs	r3, #224	@ 0xe0
 8001e02:	01db      	lsls	r3, r3, #7
 8001e04:	4013      	ands	r3, r2
}
 8001e06:	0018      	movs	r0, r3
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40021000 	.word	0x40021000

08001e10 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b088      	sub	sp, #32
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d101      	bne.n	8001e22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e2f3      	b.n	800240a <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2201      	movs	r2, #1
 8001e28:	4013      	ands	r3, r2
 8001e2a:	d100      	bne.n	8001e2e <HAL_RCC_OscConfig+0x1e>
 8001e2c:	e07c      	b.n	8001f28 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e2e:	4bc3      	ldr	r3, [pc, #780]	@ (800213c <HAL_RCC_OscConfig+0x32c>)
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	2238      	movs	r2, #56	@ 0x38
 8001e34:	4013      	ands	r3, r2
 8001e36:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e38:	4bc0      	ldr	r3, [pc, #768]	@ (800213c <HAL_RCC_OscConfig+0x32c>)
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	2203      	movs	r2, #3
 8001e3e:	4013      	ands	r3, r2
 8001e40:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	2b10      	cmp	r3, #16
 8001e46:	d102      	bne.n	8001e4e <HAL_RCC_OscConfig+0x3e>
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	2b03      	cmp	r3, #3
 8001e4c:	d002      	beq.n	8001e54 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	2b08      	cmp	r3, #8
 8001e52:	d10b      	bne.n	8001e6c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e54:	4bb9      	ldr	r3, [pc, #740]	@ (800213c <HAL_RCC_OscConfig+0x32c>)
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	2380      	movs	r3, #128	@ 0x80
 8001e5a:	029b      	lsls	r3, r3, #10
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	d062      	beq.n	8001f26 <HAL_RCC_OscConfig+0x116>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d15e      	bne.n	8001f26 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e2ce      	b.n	800240a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685a      	ldr	r2, [r3, #4]
 8001e70:	2380      	movs	r3, #128	@ 0x80
 8001e72:	025b      	lsls	r3, r3, #9
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d107      	bne.n	8001e88 <HAL_RCC_OscConfig+0x78>
 8001e78:	4bb0      	ldr	r3, [pc, #704]	@ (800213c <HAL_RCC_OscConfig+0x32c>)
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	4baf      	ldr	r3, [pc, #700]	@ (800213c <HAL_RCC_OscConfig+0x32c>)
 8001e7e:	2180      	movs	r1, #128	@ 0x80
 8001e80:	0249      	lsls	r1, r1, #9
 8001e82:	430a      	orrs	r2, r1
 8001e84:	601a      	str	r2, [r3, #0]
 8001e86:	e020      	b.n	8001eca <HAL_RCC_OscConfig+0xba>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685a      	ldr	r2, [r3, #4]
 8001e8c:	23a0      	movs	r3, #160	@ 0xa0
 8001e8e:	02db      	lsls	r3, r3, #11
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d10e      	bne.n	8001eb2 <HAL_RCC_OscConfig+0xa2>
 8001e94:	4ba9      	ldr	r3, [pc, #676]	@ (800213c <HAL_RCC_OscConfig+0x32c>)
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	4ba8      	ldr	r3, [pc, #672]	@ (800213c <HAL_RCC_OscConfig+0x32c>)
 8001e9a:	2180      	movs	r1, #128	@ 0x80
 8001e9c:	02c9      	lsls	r1, r1, #11
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	601a      	str	r2, [r3, #0]
 8001ea2:	4ba6      	ldr	r3, [pc, #664]	@ (800213c <HAL_RCC_OscConfig+0x32c>)
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	4ba5      	ldr	r3, [pc, #660]	@ (800213c <HAL_RCC_OscConfig+0x32c>)
 8001ea8:	2180      	movs	r1, #128	@ 0x80
 8001eaa:	0249      	lsls	r1, r1, #9
 8001eac:	430a      	orrs	r2, r1
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	e00b      	b.n	8001eca <HAL_RCC_OscConfig+0xba>
 8001eb2:	4ba2      	ldr	r3, [pc, #648]	@ (800213c <HAL_RCC_OscConfig+0x32c>)
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	4ba1      	ldr	r3, [pc, #644]	@ (800213c <HAL_RCC_OscConfig+0x32c>)
 8001eb8:	49a1      	ldr	r1, [pc, #644]	@ (8002140 <HAL_RCC_OscConfig+0x330>)
 8001eba:	400a      	ands	r2, r1
 8001ebc:	601a      	str	r2, [r3, #0]
 8001ebe:	4b9f      	ldr	r3, [pc, #636]	@ (800213c <HAL_RCC_OscConfig+0x32c>)
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	4b9e      	ldr	r3, [pc, #632]	@ (800213c <HAL_RCC_OscConfig+0x32c>)
 8001ec4:	499f      	ldr	r1, [pc, #636]	@ (8002144 <HAL_RCC_OscConfig+0x334>)
 8001ec6:	400a      	ands	r2, r1
 8001ec8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d014      	beq.n	8001efc <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed2:	f7fe fea9 	bl	8000c28 <HAL_GetTick>
 8001ed6:	0003      	movs	r3, r0
 8001ed8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001eda:	e008      	b.n	8001eee <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001edc:	f7fe fea4 	bl	8000c28 <HAL_GetTick>
 8001ee0:	0002      	movs	r2, r0
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b64      	cmp	r3, #100	@ 0x64
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e28d      	b.n	800240a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001eee:	4b93      	ldr	r3, [pc, #588]	@ (800213c <HAL_RCC_OscConfig+0x32c>)
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	2380      	movs	r3, #128	@ 0x80
 8001ef4:	029b      	lsls	r3, r3, #10
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	d0f0      	beq.n	8001edc <HAL_RCC_OscConfig+0xcc>
 8001efa:	e015      	b.n	8001f28 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001efc:	f7fe fe94 	bl	8000c28 <HAL_GetTick>
 8001f00:	0003      	movs	r3, r0
 8001f02:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f04:	e008      	b.n	8001f18 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f06:	f7fe fe8f 	bl	8000c28 <HAL_GetTick>
 8001f0a:	0002      	movs	r2, r0
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	2b64      	cmp	r3, #100	@ 0x64
 8001f12:	d901      	bls.n	8001f18 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e278      	b.n	800240a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f18:	4b88      	ldr	r3, [pc, #544]	@ (800213c <HAL_RCC_OscConfig+0x32c>)
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	2380      	movs	r3, #128	@ 0x80
 8001f1e:	029b      	lsls	r3, r3, #10
 8001f20:	4013      	ands	r3, r2
 8001f22:	d1f0      	bne.n	8001f06 <HAL_RCC_OscConfig+0xf6>
 8001f24:	e000      	b.n	8001f28 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f26:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2202      	movs	r2, #2
 8001f2e:	4013      	ands	r3, r2
 8001f30:	d100      	bne.n	8001f34 <HAL_RCC_OscConfig+0x124>
 8001f32:	e099      	b.n	8002068 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f34:	4b81      	ldr	r3, [pc, #516]	@ (800213c <HAL_RCC_OscConfig+0x32c>)
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	2238      	movs	r2, #56	@ 0x38
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f3e:	4b7f      	ldr	r3, [pc, #508]	@ (800213c <HAL_RCC_OscConfig+0x32c>)
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	2203      	movs	r2, #3
 8001f44:	4013      	ands	r3, r2
 8001f46:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	2b10      	cmp	r3, #16
 8001f4c:	d102      	bne.n	8001f54 <HAL_RCC_OscConfig+0x144>
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d002      	beq.n	8001f5a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d135      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f5a:	4b78      	ldr	r3, [pc, #480]	@ (800213c <HAL_RCC_OscConfig+0x32c>)
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	2380      	movs	r3, #128	@ 0x80
 8001f60:	00db      	lsls	r3, r3, #3
 8001f62:	4013      	ands	r3, r2
 8001f64:	d005      	beq.n	8001f72 <HAL_RCC_OscConfig+0x162>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d101      	bne.n	8001f72 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e24b      	b.n	800240a <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f72:	4b72      	ldr	r3, [pc, #456]	@ (800213c <HAL_RCC_OscConfig+0x32c>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	4a74      	ldr	r2, [pc, #464]	@ (8002148 <HAL_RCC_OscConfig+0x338>)
 8001f78:	4013      	ands	r3, r2
 8001f7a:	0019      	movs	r1, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	695b      	ldr	r3, [r3, #20]
 8001f80:	021a      	lsls	r2, r3, #8
 8001f82:	4b6e      	ldr	r3, [pc, #440]	@ (800213c <HAL_RCC_OscConfig+0x32c>)
 8001f84:	430a      	orrs	r2, r1
 8001f86:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d112      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001f8e:	4b6b      	ldr	r3, [pc, #428]	@ (800213c <HAL_RCC_OscConfig+0x32c>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a6e      	ldr	r2, [pc, #440]	@ (800214c <HAL_RCC_OscConfig+0x33c>)
 8001f94:	4013      	ands	r3, r2
 8001f96:	0019      	movs	r1, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	691a      	ldr	r2, [r3, #16]
 8001f9c:	4b67      	ldr	r3, [pc, #412]	@ (800213c <HAL_RCC_OscConfig+0x32c>)
 8001f9e:	430a      	orrs	r2, r1
 8001fa0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001fa2:	4b66      	ldr	r3, [pc, #408]	@ (800213c <HAL_RCC_OscConfig+0x32c>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	0adb      	lsrs	r3, r3, #11
 8001fa8:	2207      	movs	r2, #7
 8001faa:	4013      	ands	r3, r2
 8001fac:	4a68      	ldr	r2, [pc, #416]	@ (8002150 <HAL_RCC_OscConfig+0x340>)
 8001fae:	40da      	lsrs	r2, r3
 8001fb0:	4b68      	ldr	r3, [pc, #416]	@ (8002154 <HAL_RCC_OscConfig+0x344>)
 8001fb2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001fb4:	4b68      	ldr	r3, [pc, #416]	@ (8002158 <HAL_RCC_OscConfig+0x348>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	0018      	movs	r0, r3
 8001fba:	f7fe fdd9 	bl	8000b70 <HAL_InitTick>
 8001fbe:	1e03      	subs	r3, r0, #0
 8001fc0:	d051      	beq.n	8002066 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e221      	b.n	800240a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d030      	beq.n	8002030 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001fce:	4b5b      	ldr	r3, [pc, #364]	@ (800213c <HAL_RCC_OscConfig+0x32c>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a5e      	ldr	r2, [pc, #376]	@ (800214c <HAL_RCC_OscConfig+0x33c>)
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	0019      	movs	r1, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	691a      	ldr	r2, [r3, #16]
 8001fdc:	4b57      	ldr	r3, [pc, #348]	@ (800213c <HAL_RCC_OscConfig+0x32c>)
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001fe2:	4b56      	ldr	r3, [pc, #344]	@ (800213c <HAL_RCC_OscConfig+0x32c>)
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	4b55      	ldr	r3, [pc, #340]	@ (800213c <HAL_RCC_OscConfig+0x32c>)
 8001fe8:	2180      	movs	r1, #128	@ 0x80
 8001fea:	0049      	lsls	r1, r1, #1
 8001fec:	430a      	orrs	r2, r1
 8001fee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff0:	f7fe fe1a 	bl	8000c28 <HAL_GetTick>
 8001ff4:	0003      	movs	r3, r0
 8001ff6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ff8:	e008      	b.n	800200c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ffa:	f7fe fe15 	bl	8000c28 <HAL_GetTick>
 8001ffe:	0002      	movs	r2, r0
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	2b02      	cmp	r3, #2
 8002006:	d901      	bls.n	800200c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e1fe      	b.n	800240a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800200c:	4b4b      	ldr	r3, [pc, #300]	@ (800213c <HAL_RCC_OscConfig+0x32c>)
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	2380      	movs	r3, #128	@ 0x80
 8002012:	00db      	lsls	r3, r3, #3
 8002014:	4013      	ands	r3, r2
 8002016:	d0f0      	beq.n	8001ffa <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002018:	4b48      	ldr	r3, [pc, #288]	@ (800213c <HAL_RCC_OscConfig+0x32c>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	4a4a      	ldr	r2, [pc, #296]	@ (8002148 <HAL_RCC_OscConfig+0x338>)
 800201e:	4013      	ands	r3, r2
 8002020:	0019      	movs	r1, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	695b      	ldr	r3, [r3, #20]
 8002026:	021a      	lsls	r2, r3, #8
 8002028:	4b44      	ldr	r3, [pc, #272]	@ (800213c <HAL_RCC_OscConfig+0x32c>)
 800202a:	430a      	orrs	r2, r1
 800202c:	605a      	str	r2, [r3, #4]
 800202e:	e01b      	b.n	8002068 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002030:	4b42      	ldr	r3, [pc, #264]	@ (800213c <HAL_RCC_OscConfig+0x32c>)
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	4b41      	ldr	r3, [pc, #260]	@ (800213c <HAL_RCC_OscConfig+0x32c>)
 8002036:	4949      	ldr	r1, [pc, #292]	@ (800215c <HAL_RCC_OscConfig+0x34c>)
 8002038:	400a      	ands	r2, r1
 800203a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800203c:	f7fe fdf4 	bl	8000c28 <HAL_GetTick>
 8002040:	0003      	movs	r3, r0
 8002042:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002044:	e008      	b.n	8002058 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002046:	f7fe fdef 	bl	8000c28 <HAL_GetTick>
 800204a:	0002      	movs	r2, r0
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	2b02      	cmp	r3, #2
 8002052:	d901      	bls.n	8002058 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e1d8      	b.n	800240a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002058:	4b38      	ldr	r3, [pc, #224]	@ (800213c <HAL_RCC_OscConfig+0x32c>)
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	2380      	movs	r3, #128	@ 0x80
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	4013      	ands	r3, r2
 8002062:	d1f0      	bne.n	8002046 <HAL_RCC_OscConfig+0x236>
 8002064:	e000      	b.n	8002068 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002066:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2208      	movs	r2, #8
 800206e:	4013      	ands	r3, r2
 8002070:	d047      	beq.n	8002102 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002072:	4b32      	ldr	r3, [pc, #200]	@ (800213c <HAL_RCC_OscConfig+0x32c>)
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	2238      	movs	r2, #56	@ 0x38
 8002078:	4013      	ands	r3, r2
 800207a:	2b18      	cmp	r3, #24
 800207c:	d10a      	bne.n	8002094 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800207e:	4b2f      	ldr	r3, [pc, #188]	@ (800213c <HAL_RCC_OscConfig+0x32c>)
 8002080:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002082:	2202      	movs	r2, #2
 8002084:	4013      	ands	r3, r2
 8002086:	d03c      	beq.n	8002102 <HAL_RCC_OscConfig+0x2f2>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d138      	bne.n	8002102 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e1ba      	b.n	800240a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d019      	beq.n	80020d0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800209c:	4b27      	ldr	r3, [pc, #156]	@ (800213c <HAL_RCC_OscConfig+0x32c>)
 800209e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80020a0:	4b26      	ldr	r3, [pc, #152]	@ (800213c <HAL_RCC_OscConfig+0x32c>)
 80020a2:	2101      	movs	r1, #1
 80020a4:	430a      	orrs	r2, r1
 80020a6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a8:	f7fe fdbe 	bl	8000c28 <HAL_GetTick>
 80020ac:	0003      	movs	r3, r0
 80020ae:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020b0:	e008      	b.n	80020c4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020b2:	f7fe fdb9 	bl	8000c28 <HAL_GetTick>
 80020b6:	0002      	movs	r2, r0
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d901      	bls.n	80020c4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e1a2      	b.n	800240a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020c4:	4b1d      	ldr	r3, [pc, #116]	@ (800213c <HAL_RCC_OscConfig+0x32c>)
 80020c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020c8:	2202      	movs	r2, #2
 80020ca:	4013      	ands	r3, r2
 80020cc:	d0f1      	beq.n	80020b2 <HAL_RCC_OscConfig+0x2a2>
 80020ce:	e018      	b.n	8002102 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80020d0:	4b1a      	ldr	r3, [pc, #104]	@ (800213c <HAL_RCC_OscConfig+0x32c>)
 80020d2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80020d4:	4b19      	ldr	r3, [pc, #100]	@ (800213c <HAL_RCC_OscConfig+0x32c>)
 80020d6:	2101      	movs	r1, #1
 80020d8:	438a      	bics	r2, r1
 80020da:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020dc:	f7fe fda4 	bl	8000c28 <HAL_GetTick>
 80020e0:	0003      	movs	r3, r0
 80020e2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020e4:	e008      	b.n	80020f8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020e6:	f7fe fd9f 	bl	8000c28 <HAL_GetTick>
 80020ea:	0002      	movs	r2, r0
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d901      	bls.n	80020f8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	e188      	b.n	800240a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020f8:	4b10      	ldr	r3, [pc, #64]	@ (800213c <HAL_RCC_OscConfig+0x32c>)
 80020fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020fc:	2202      	movs	r2, #2
 80020fe:	4013      	ands	r3, r2
 8002100:	d1f1      	bne.n	80020e6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2204      	movs	r2, #4
 8002108:	4013      	ands	r3, r2
 800210a:	d100      	bne.n	800210e <HAL_RCC_OscConfig+0x2fe>
 800210c:	e0c6      	b.n	800229c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800210e:	231f      	movs	r3, #31
 8002110:	18fb      	adds	r3, r7, r3
 8002112:	2200      	movs	r2, #0
 8002114:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002116:	4b09      	ldr	r3, [pc, #36]	@ (800213c <HAL_RCC_OscConfig+0x32c>)
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	2238      	movs	r2, #56	@ 0x38
 800211c:	4013      	ands	r3, r2
 800211e:	2b20      	cmp	r3, #32
 8002120:	d11e      	bne.n	8002160 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002122:	4b06      	ldr	r3, [pc, #24]	@ (800213c <HAL_RCC_OscConfig+0x32c>)
 8002124:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002126:	2202      	movs	r2, #2
 8002128:	4013      	ands	r3, r2
 800212a:	d100      	bne.n	800212e <HAL_RCC_OscConfig+0x31e>
 800212c:	e0b6      	b.n	800229c <HAL_RCC_OscConfig+0x48c>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d000      	beq.n	8002138 <HAL_RCC_OscConfig+0x328>
 8002136:	e0b1      	b.n	800229c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e166      	b.n	800240a <HAL_RCC_OscConfig+0x5fa>
 800213c:	40021000 	.word	0x40021000
 8002140:	fffeffff 	.word	0xfffeffff
 8002144:	fffbffff 	.word	0xfffbffff
 8002148:	ffff80ff 	.word	0xffff80ff
 800214c:	ffffc7ff 	.word	0xffffc7ff
 8002150:	00f42400 	.word	0x00f42400
 8002154:	20000000 	.word	0x20000000
 8002158:	20000004 	.word	0x20000004
 800215c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002160:	4bac      	ldr	r3, [pc, #688]	@ (8002414 <HAL_RCC_OscConfig+0x604>)
 8002162:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002164:	2380      	movs	r3, #128	@ 0x80
 8002166:	055b      	lsls	r3, r3, #21
 8002168:	4013      	ands	r3, r2
 800216a:	d101      	bne.n	8002170 <HAL_RCC_OscConfig+0x360>
 800216c:	2301      	movs	r3, #1
 800216e:	e000      	b.n	8002172 <HAL_RCC_OscConfig+0x362>
 8002170:	2300      	movs	r3, #0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d011      	beq.n	800219a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002176:	4ba7      	ldr	r3, [pc, #668]	@ (8002414 <HAL_RCC_OscConfig+0x604>)
 8002178:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800217a:	4ba6      	ldr	r3, [pc, #664]	@ (8002414 <HAL_RCC_OscConfig+0x604>)
 800217c:	2180      	movs	r1, #128	@ 0x80
 800217e:	0549      	lsls	r1, r1, #21
 8002180:	430a      	orrs	r2, r1
 8002182:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002184:	4ba3      	ldr	r3, [pc, #652]	@ (8002414 <HAL_RCC_OscConfig+0x604>)
 8002186:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002188:	2380      	movs	r3, #128	@ 0x80
 800218a:	055b      	lsls	r3, r3, #21
 800218c:	4013      	ands	r3, r2
 800218e:	60fb      	str	r3, [r7, #12]
 8002190:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002192:	231f      	movs	r3, #31
 8002194:	18fb      	adds	r3, r7, r3
 8002196:	2201      	movs	r2, #1
 8002198:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800219a:	4b9f      	ldr	r3, [pc, #636]	@ (8002418 <HAL_RCC_OscConfig+0x608>)
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	2380      	movs	r3, #128	@ 0x80
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	4013      	ands	r3, r2
 80021a4:	d11a      	bne.n	80021dc <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021a6:	4b9c      	ldr	r3, [pc, #624]	@ (8002418 <HAL_RCC_OscConfig+0x608>)
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	4b9b      	ldr	r3, [pc, #620]	@ (8002418 <HAL_RCC_OscConfig+0x608>)
 80021ac:	2180      	movs	r1, #128	@ 0x80
 80021ae:	0049      	lsls	r1, r1, #1
 80021b0:	430a      	orrs	r2, r1
 80021b2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80021b4:	f7fe fd38 	bl	8000c28 <HAL_GetTick>
 80021b8:	0003      	movs	r3, r0
 80021ba:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021bc:	e008      	b.n	80021d0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021be:	f7fe fd33 	bl	8000c28 <HAL_GetTick>
 80021c2:	0002      	movs	r2, r0
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	d901      	bls.n	80021d0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80021cc:	2303      	movs	r3, #3
 80021ce:	e11c      	b.n	800240a <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021d0:	4b91      	ldr	r3, [pc, #580]	@ (8002418 <HAL_RCC_OscConfig+0x608>)
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	2380      	movs	r3, #128	@ 0x80
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	4013      	ands	r3, r2
 80021da:	d0f0      	beq.n	80021be <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d106      	bne.n	80021f2 <HAL_RCC_OscConfig+0x3e2>
 80021e4:	4b8b      	ldr	r3, [pc, #556]	@ (8002414 <HAL_RCC_OscConfig+0x604>)
 80021e6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80021e8:	4b8a      	ldr	r3, [pc, #552]	@ (8002414 <HAL_RCC_OscConfig+0x604>)
 80021ea:	2101      	movs	r1, #1
 80021ec:	430a      	orrs	r2, r1
 80021ee:	65da      	str	r2, [r3, #92]	@ 0x5c
 80021f0:	e01c      	b.n	800222c <HAL_RCC_OscConfig+0x41c>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	2b05      	cmp	r3, #5
 80021f8:	d10c      	bne.n	8002214 <HAL_RCC_OscConfig+0x404>
 80021fa:	4b86      	ldr	r3, [pc, #536]	@ (8002414 <HAL_RCC_OscConfig+0x604>)
 80021fc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80021fe:	4b85      	ldr	r3, [pc, #532]	@ (8002414 <HAL_RCC_OscConfig+0x604>)
 8002200:	2104      	movs	r1, #4
 8002202:	430a      	orrs	r2, r1
 8002204:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002206:	4b83      	ldr	r3, [pc, #524]	@ (8002414 <HAL_RCC_OscConfig+0x604>)
 8002208:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800220a:	4b82      	ldr	r3, [pc, #520]	@ (8002414 <HAL_RCC_OscConfig+0x604>)
 800220c:	2101      	movs	r1, #1
 800220e:	430a      	orrs	r2, r1
 8002210:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002212:	e00b      	b.n	800222c <HAL_RCC_OscConfig+0x41c>
 8002214:	4b7f      	ldr	r3, [pc, #508]	@ (8002414 <HAL_RCC_OscConfig+0x604>)
 8002216:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002218:	4b7e      	ldr	r3, [pc, #504]	@ (8002414 <HAL_RCC_OscConfig+0x604>)
 800221a:	2101      	movs	r1, #1
 800221c:	438a      	bics	r2, r1
 800221e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002220:	4b7c      	ldr	r3, [pc, #496]	@ (8002414 <HAL_RCC_OscConfig+0x604>)
 8002222:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002224:	4b7b      	ldr	r3, [pc, #492]	@ (8002414 <HAL_RCC_OscConfig+0x604>)
 8002226:	2104      	movs	r1, #4
 8002228:	438a      	bics	r2, r1
 800222a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d014      	beq.n	800225e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002234:	f7fe fcf8 	bl	8000c28 <HAL_GetTick>
 8002238:	0003      	movs	r3, r0
 800223a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800223c:	e009      	b.n	8002252 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800223e:	f7fe fcf3 	bl	8000c28 <HAL_GetTick>
 8002242:	0002      	movs	r2, r0
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	4a74      	ldr	r2, [pc, #464]	@ (800241c <HAL_RCC_OscConfig+0x60c>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e0db      	b.n	800240a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002252:	4b70      	ldr	r3, [pc, #448]	@ (8002414 <HAL_RCC_OscConfig+0x604>)
 8002254:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002256:	2202      	movs	r2, #2
 8002258:	4013      	ands	r3, r2
 800225a:	d0f0      	beq.n	800223e <HAL_RCC_OscConfig+0x42e>
 800225c:	e013      	b.n	8002286 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800225e:	f7fe fce3 	bl	8000c28 <HAL_GetTick>
 8002262:	0003      	movs	r3, r0
 8002264:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002266:	e009      	b.n	800227c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002268:	f7fe fcde 	bl	8000c28 <HAL_GetTick>
 800226c:	0002      	movs	r2, r0
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	4a6a      	ldr	r2, [pc, #424]	@ (800241c <HAL_RCC_OscConfig+0x60c>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d901      	bls.n	800227c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e0c6      	b.n	800240a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800227c:	4b65      	ldr	r3, [pc, #404]	@ (8002414 <HAL_RCC_OscConfig+0x604>)
 800227e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002280:	2202      	movs	r2, #2
 8002282:	4013      	ands	r3, r2
 8002284:	d1f0      	bne.n	8002268 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002286:	231f      	movs	r3, #31
 8002288:	18fb      	adds	r3, r7, r3
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	2b01      	cmp	r3, #1
 800228e:	d105      	bne.n	800229c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002290:	4b60      	ldr	r3, [pc, #384]	@ (8002414 <HAL_RCC_OscConfig+0x604>)
 8002292:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002294:	4b5f      	ldr	r3, [pc, #380]	@ (8002414 <HAL_RCC_OscConfig+0x604>)
 8002296:	4962      	ldr	r1, [pc, #392]	@ (8002420 <HAL_RCC_OscConfig+0x610>)
 8002298:	400a      	ands	r2, r1
 800229a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	69db      	ldr	r3, [r3, #28]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d100      	bne.n	80022a6 <HAL_RCC_OscConfig+0x496>
 80022a4:	e0b0      	b.n	8002408 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022a6:	4b5b      	ldr	r3, [pc, #364]	@ (8002414 <HAL_RCC_OscConfig+0x604>)
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	2238      	movs	r2, #56	@ 0x38
 80022ac:	4013      	ands	r3, r2
 80022ae:	2b10      	cmp	r3, #16
 80022b0:	d100      	bne.n	80022b4 <HAL_RCC_OscConfig+0x4a4>
 80022b2:	e078      	b.n	80023a6 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	69db      	ldr	r3, [r3, #28]
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d153      	bne.n	8002364 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022bc:	4b55      	ldr	r3, [pc, #340]	@ (8002414 <HAL_RCC_OscConfig+0x604>)
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	4b54      	ldr	r3, [pc, #336]	@ (8002414 <HAL_RCC_OscConfig+0x604>)
 80022c2:	4958      	ldr	r1, [pc, #352]	@ (8002424 <HAL_RCC_OscConfig+0x614>)
 80022c4:	400a      	ands	r2, r1
 80022c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c8:	f7fe fcae 	bl	8000c28 <HAL_GetTick>
 80022cc:	0003      	movs	r3, r0
 80022ce:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022d0:	e008      	b.n	80022e4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022d2:	f7fe fca9 	bl	8000c28 <HAL_GetTick>
 80022d6:	0002      	movs	r2, r0
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d901      	bls.n	80022e4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e092      	b.n	800240a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022e4:	4b4b      	ldr	r3, [pc, #300]	@ (8002414 <HAL_RCC_OscConfig+0x604>)
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	2380      	movs	r3, #128	@ 0x80
 80022ea:	049b      	lsls	r3, r3, #18
 80022ec:	4013      	ands	r3, r2
 80022ee:	d1f0      	bne.n	80022d2 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022f0:	4b48      	ldr	r3, [pc, #288]	@ (8002414 <HAL_RCC_OscConfig+0x604>)
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	4a4c      	ldr	r2, [pc, #304]	@ (8002428 <HAL_RCC_OscConfig+0x618>)
 80022f6:	4013      	ands	r3, r2
 80022f8:	0019      	movs	r1, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a1a      	ldr	r2, [r3, #32]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002302:	431a      	orrs	r2, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002308:	021b      	lsls	r3, r3, #8
 800230a:	431a      	orrs	r2, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002310:	431a      	orrs	r2, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002316:	431a      	orrs	r2, r3
 8002318:	4b3e      	ldr	r3, [pc, #248]	@ (8002414 <HAL_RCC_OscConfig+0x604>)
 800231a:	430a      	orrs	r2, r1
 800231c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800231e:	4b3d      	ldr	r3, [pc, #244]	@ (8002414 <HAL_RCC_OscConfig+0x604>)
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	4b3c      	ldr	r3, [pc, #240]	@ (8002414 <HAL_RCC_OscConfig+0x604>)
 8002324:	2180      	movs	r1, #128	@ 0x80
 8002326:	0449      	lsls	r1, r1, #17
 8002328:	430a      	orrs	r2, r1
 800232a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800232c:	4b39      	ldr	r3, [pc, #228]	@ (8002414 <HAL_RCC_OscConfig+0x604>)
 800232e:	68da      	ldr	r2, [r3, #12]
 8002330:	4b38      	ldr	r3, [pc, #224]	@ (8002414 <HAL_RCC_OscConfig+0x604>)
 8002332:	2180      	movs	r1, #128	@ 0x80
 8002334:	0549      	lsls	r1, r1, #21
 8002336:	430a      	orrs	r2, r1
 8002338:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800233a:	f7fe fc75 	bl	8000c28 <HAL_GetTick>
 800233e:	0003      	movs	r3, r0
 8002340:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002342:	e008      	b.n	8002356 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002344:	f7fe fc70 	bl	8000c28 <HAL_GetTick>
 8002348:	0002      	movs	r2, r0
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	2b02      	cmp	r3, #2
 8002350:	d901      	bls.n	8002356 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e059      	b.n	800240a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002356:	4b2f      	ldr	r3, [pc, #188]	@ (8002414 <HAL_RCC_OscConfig+0x604>)
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	2380      	movs	r3, #128	@ 0x80
 800235c:	049b      	lsls	r3, r3, #18
 800235e:	4013      	ands	r3, r2
 8002360:	d0f0      	beq.n	8002344 <HAL_RCC_OscConfig+0x534>
 8002362:	e051      	b.n	8002408 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002364:	4b2b      	ldr	r3, [pc, #172]	@ (8002414 <HAL_RCC_OscConfig+0x604>)
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	4b2a      	ldr	r3, [pc, #168]	@ (8002414 <HAL_RCC_OscConfig+0x604>)
 800236a:	492e      	ldr	r1, [pc, #184]	@ (8002424 <HAL_RCC_OscConfig+0x614>)
 800236c:	400a      	ands	r2, r1
 800236e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002370:	f7fe fc5a 	bl	8000c28 <HAL_GetTick>
 8002374:	0003      	movs	r3, r0
 8002376:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002378:	e008      	b.n	800238c <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800237a:	f7fe fc55 	bl	8000c28 <HAL_GetTick>
 800237e:	0002      	movs	r2, r0
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	2b02      	cmp	r3, #2
 8002386:	d901      	bls.n	800238c <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	e03e      	b.n	800240a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800238c:	4b21      	ldr	r3, [pc, #132]	@ (8002414 <HAL_RCC_OscConfig+0x604>)
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	2380      	movs	r3, #128	@ 0x80
 8002392:	049b      	lsls	r3, r3, #18
 8002394:	4013      	ands	r3, r2
 8002396:	d1f0      	bne.n	800237a <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8002398:	4b1e      	ldr	r3, [pc, #120]	@ (8002414 <HAL_RCC_OscConfig+0x604>)
 800239a:	68da      	ldr	r2, [r3, #12]
 800239c:	4b1d      	ldr	r3, [pc, #116]	@ (8002414 <HAL_RCC_OscConfig+0x604>)
 800239e:	4923      	ldr	r1, [pc, #140]	@ (800242c <HAL_RCC_OscConfig+0x61c>)
 80023a0:	400a      	ands	r2, r1
 80023a2:	60da      	str	r2, [r3, #12]
 80023a4:	e030      	b.n	8002408 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	69db      	ldr	r3, [r3, #28]
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d101      	bne.n	80023b2 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e02b      	b.n	800240a <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80023b2:	4b18      	ldr	r3, [pc, #96]	@ (8002414 <HAL_RCC_OscConfig+0x604>)
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	2203      	movs	r2, #3
 80023bc:	401a      	ands	r2, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6a1b      	ldr	r3, [r3, #32]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d11e      	bne.n	8002404 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	2270      	movs	r2, #112	@ 0x70
 80023ca:	401a      	ands	r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d117      	bne.n	8002404 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023d4:	697a      	ldr	r2, [r7, #20]
 80023d6:	23fe      	movs	r3, #254	@ 0xfe
 80023d8:	01db      	lsls	r3, r3, #7
 80023da:	401a      	ands	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023e0:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d10e      	bne.n	8002404 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80023e6:	697a      	ldr	r2, [r7, #20]
 80023e8:	23f8      	movs	r3, #248	@ 0xf8
 80023ea:	039b      	lsls	r3, r3, #14
 80023ec:	401a      	ands	r2, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d106      	bne.n	8002404 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	0f5b      	lsrs	r3, r3, #29
 80023fa:	075a      	lsls	r2, r3, #29
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002400:	429a      	cmp	r2, r3
 8002402:	d001      	beq.n	8002408 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e000      	b.n	800240a <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8002408:	2300      	movs	r3, #0
}
 800240a:	0018      	movs	r0, r3
 800240c:	46bd      	mov	sp, r7
 800240e:	b008      	add	sp, #32
 8002410:	bd80      	pop	{r7, pc}
 8002412:	46c0      	nop			@ (mov r8, r8)
 8002414:	40021000 	.word	0x40021000
 8002418:	40007000 	.word	0x40007000
 800241c:	00001388 	.word	0x00001388
 8002420:	efffffff 	.word	0xefffffff
 8002424:	feffffff 	.word	0xfeffffff
 8002428:	1fc1808c 	.word	0x1fc1808c
 800242c:	effefffc 	.word	0xeffefffc

08002430 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d101      	bne.n	8002444 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e0e9      	b.n	8002618 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002444:	4b76      	ldr	r3, [pc, #472]	@ (8002620 <HAL_RCC_ClockConfig+0x1f0>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2207      	movs	r2, #7
 800244a:	4013      	ands	r3, r2
 800244c:	683a      	ldr	r2, [r7, #0]
 800244e:	429a      	cmp	r2, r3
 8002450:	d91e      	bls.n	8002490 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002452:	4b73      	ldr	r3, [pc, #460]	@ (8002620 <HAL_RCC_ClockConfig+0x1f0>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2207      	movs	r2, #7
 8002458:	4393      	bics	r3, r2
 800245a:	0019      	movs	r1, r3
 800245c:	4b70      	ldr	r3, [pc, #448]	@ (8002620 <HAL_RCC_ClockConfig+0x1f0>)
 800245e:	683a      	ldr	r2, [r7, #0]
 8002460:	430a      	orrs	r2, r1
 8002462:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002464:	f7fe fbe0 	bl	8000c28 <HAL_GetTick>
 8002468:	0003      	movs	r3, r0
 800246a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800246c:	e009      	b.n	8002482 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800246e:	f7fe fbdb 	bl	8000c28 <HAL_GetTick>
 8002472:	0002      	movs	r2, r0
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	4a6a      	ldr	r2, [pc, #424]	@ (8002624 <HAL_RCC_ClockConfig+0x1f4>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d901      	bls.n	8002482 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e0ca      	b.n	8002618 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002482:	4b67      	ldr	r3, [pc, #412]	@ (8002620 <HAL_RCC_ClockConfig+0x1f0>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2207      	movs	r2, #7
 8002488:	4013      	ands	r3, r2
 800248a:	683a      	ldr	r2, [r7, #0]
 800248c:	429a      	cmp	r2, r3
 800248e:	d1ee      	bne.n	800246e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2202      	movs	r2, #2
 8002496:	4013      	ands	r3, r2
 8002498:	d015      	beq.n	80024c6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2204      	movs	r2, #4
 80024a0:	4013      	ands	r3, r2
 80024a2:	d006      	beq.n	80024b2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80024a4:	4b60      	ldr	r3, [pc, #384]	@ (8002628 <HAL_RCC_ClockConfig+0x1f8>)
 80024a6:	689a      	ldr	r2, [r3, #8]
 80024a8:	4b5f      	ldr	r3, [pc, #380]	@ (8002628 <HAL_RCC_ClockConfig+0x1f8>)
 80024aa:	21e0      	movs	r1, #224	@ 0xe0
 80024ac:	01c9      	lsls	r1, r1, #7
 80024ae:	430a      	orrs	r2, r1
 80024b0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024b2:	4b5d      	ldr	r3, [pc, #372]	@ (8002628 <HAL_RCC_ClockConfig+0x1f8>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	4a5d      	ldr	r2, [pc, #372]	@ (800262c <HAL_RCC_ClockConfig+0x1fc>)
 80024b8:	4013      	ands	r3, r2
 80024ba:	0019      	movs	r1, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	689a      	ldr	r2, [r3, #8]
 80024c0:	4b59      	ldr	r3, [pc, #356]	@ (8002628 <HAL_RCC_ClockConfig+0x1f8>)
 80024c2:	430a      	orrs	r2, r1
 80024c4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2201      	movs	r2, #1
 80024cc:	4013      	ands	r3, r2
 80024ce:	d057      	beq.n	8002580 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d107      	bne.n	80024e8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024d8:	4b53      	ldr	r3, [pc, #332]	@ (8002628 <HAL_RCC_ClockConfig+0x1f8>)
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	2380      	movs	r3, #128	@ 0x80
 80024de:	029b      	lsls	r3, r3, #10
 80024e0:	4013      	ands	r3, r2
 80024e2:	d12b      	bne.n	800253c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e097      	b.n	8002618 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d107      	bne.n	8002500 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024f0:	4b4d      	ldr	r3, [pc, #308]	@ (8002628 <HAL_RCC_ClockConfig+0x1f8>)
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	2380      	movs	r3, #128	@ 0x80
 80024f6:	049b      	lsls	r3, r3, #18
 80024f8:	4013      	ands	r3, r2
 80024fa:	d11f      	bne.n	800253c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e08b      	b.n	8002618 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d107      	bne.n	8002518 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002508:	4b47      	ldr	r3, [pc, #284]	@ (8002628 <HAL_RCC_ClockConfig+0x1f8>)
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	2380      	movs	r3, #128	@ 0x80
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	4013      	ands	r3, r2
 8002512:	d113      	bne.n	800253c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e07f      	b.n	8002618 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	2b03      	cmp	r3, #3
 800251e:	d106      	bne.n	800252e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002520:	4b41      	ldr	r3, [pc, #260]	@ (8002628 <HAL_RCC_ClockConfig+0x1f8>)
 8002522:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002524:	2202      	movs	r2, #2
 8002526:	4013      	ands	r3, r2
 8002528:	d108      	bne.n	800253c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e074      	b.n	8002618 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800252e:	4b3e      	ldr	r3, [pc, #248]	@ (8002628 <HAL_RCC_ClockConfig+0x1f8>)
 8002530:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002532:	2202      	movs	r2, #2
 8002534:	4013      	ands	r3, r2
 8002536:	d101      	bne.n	800253c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e06d      	b.n	8002618 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800253c:	4b3a      	ldr	r3, [pc, #232]	@ (8002628 <HAL_RCC_ClockConfig+0x1f8>)
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	2207      	movs	r2, #7
 8002542:	4393      	bics	r3, r2
 8002544:	0019      	movs	r1, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685a      	ldr	r2, [r3, #4]
 800254a:	4b37      	ldr	r3, [pc, #220]	@ (8002628 <HAL_RCC_ClockConfig+0x1f8>)
 800254c:	430a      	orrs	r2, r1
 800254e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002550:	f7fe fb6a 	bl	8000c28 <HAL_GetTick>
 8002554:	0003      	movs	r3, r0
 8002556:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002558:	e009      	b.n	800256e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800255a:	f7fe fb65 	bl	8000c28 <HAL_GetTick>
 800255e:	0002      	movs	r2, r0
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	4a2f      	ldr	r2, [pc, #188]	@ (8002624 <HAL_RCC_ClockConfig+0x1f4>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d901      	bls.n	800256e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e054      	b.n	8002618 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800256e:	4b2e      	ldr	r3, [pc, #184]	@ (8002628 <HAL_RCC_ClockConfig+0x1f8>)
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	2238      	movs	r2, #56	@ 0x38
 8002574:	401a      	ands	r2, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	429a      	cmp	r2, r3
 800257e:	d1ec      	bne.n	800255a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002580:	4b27      	ldr	r3, [pc, #156]	@ (8002620 <HAL_RCC_ClockConfig+0x1f0>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2207      	movs	r2, #7
 8002586:	4013      	ands	r3, r2
 8002588:	683a      	ldr	r2, [r7, #0]
 800258a:	429a      	cmp	r2, r3
 800258c:	d21e      	bcs.n	80025cc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800258e:	4b24      	ldr	r3, [pc, #144]	@ (8002620 <HAL_RCC_ClockConfig+0x1f0>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2207      	movs	r2, #7
 8002594:	4393      	bics	r3, r2
 8002596:	0019      	movs	r1, r3
 8002598:	4b21      	ldr	r3, [pc, #132]	@ (8002620 <HAL_RCC_ClockConfig+0x1f0>)
 800259a:	683a      	ldr	r2, [r7, #0]
 800259c:	430a      	orrs	r2, r1
 800259e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80025a0:	f7fe fb42 	bl	8000c28 <HAL_GetTick>
 80025a4:	0003      	movs	r3, r0
 80025a6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80025a8:	e009      	b.n	80025be <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025aa:	f7fe fb3d 	bl	8000c28 <HAL_GetTick>
 80025ae:	0002      	movs	r2, r0
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	4a1b      	ldr	r2, [pc, #108]	@ (8002624 <HAL_RCC_ClockConfig+0x1f4>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d901      	bls.n	80025be <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e02c      	b.n	8002618 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80025be:	4b18      	ldr	r3, [pc, #96]	@ (8002620 <HAL_RCC_ClockConfig+0x1f0>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2207      	movs	r2, #7
 80025c4:	4013      	ands	r3, r2
 80025c6:	683a      	ldr	r2, [r7, #0]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d1ee      	bne.n	80025aa <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2204      	movs	r2, #4
 80025d2:	4013      	ands	r3, r2
 80025d4:	d009      	beq.n	80025ea <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80025d6:	4b14      	ldr	r3, [pc, #80]	@ (8002628 <HAL_RCC_ClockConfig+0x1f8>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	4a15      	ldr	r2, [pc, #84]	@ (8002630 <HAL_RCC_ClockConfig+0x200>)
 80025dc:	4013      	ands	r3, r2
 80025de:	0019      	movs	r1, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	68da      	ldr	r2, [r3, #12]
 80025e4:	4b10      	ldr	r3, [pc, #64]	@ (8002628 <HAL_RCC_ClockConfig+0x1f8>)
 80025e6:	430a      	orrs	r2, r1
 80025e8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80025ea:	f000 f829 	bl	8002640 <HAL_RCC_GetSysClockFreq>
 80025ee:	0001      	movs	r1, r0
 80025f0:	4b0d      	ldr	r3, [pc, #52]	@ (8002628 <HAL_RCC_ClockConfig+0x1f8>)
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	0a1b      	lsrs	r3, r3, #8
 80025f6:	220f      	movs	r2, #15
 80025f8:	401a      	ands	r2, r3
 80025fa:	4b0e      	ldr	r3, [pc, #56]	@ (8002634 <HAL_RCC_ClockConfig+0x204>)
 80025fc:	0092      	lsls	r2, r2, #2
 80025fe:	58d3      	ldr	r3, [r2, r3]
 8002600:	221f      	movs	r2, #31
 8002602:	4013      	ands	r3, r2
 8002604:	000a      	movs	r2, r1
 8002606:	40da      	lsrs	r2, r3
 8002608:	4b0b      	ldr	r3, [pc, #44]	@ (8002638 <HAL_RCC_ClockConfig+0x208>)
 800260a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800260c:	4b0b      	ldr	r3, [pc, #44]	@ (800263c <HAL_RCC_ClockConfig+0x20c>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	0018      	movs	r0, r3
 8002612:	f7fe faad 	bl	8000b70 <HAL_InitTick>
 8002616:	0003      	movs	r3, r0
}
 8002618:	0018      	movs	r0, r3
 800261a:	46bd      	mov	sp, r7
 800261c:	b004      	add	sp, #16
 800261e:	bd80      	pop	{r7, pc}
 8002620:	40022000 	.word	0x40022000
 8002624:	00001388 	.word	0x00001388
 8002628:	40021000 	.word	0x40021000
 800262c:	fffff0ff 	.word	0xfffff0ff
 8002630:	ffff8fff 	.word	0xffff8fff
 8002634:	08003d70 	.word	0x08003d70
 8002638:	20000000 	.word	0x20000000
 800263c:	20000004 	.word	0x20000004

08002640 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b086      	sub	sp, #24
 8002644:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002646:	4b3c      	ldr	r3, [pc, #240]	@ (8002738 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	2238      	movs	r2, #56	@ 0x38
 800264c:	4013      	ands	r3, r2
 800264e:	d10f      	bne.n	8002670 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002650:	4b39      	ldr	r3, [pc, #228]	@ (8002738 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	0adb      	lsrs	r3, r3, #11
 8002656:	2207      	movs	r2, #7
 8002658:	4013      	ands	r3, r2
 800265a:	2201      	movs	r2, #1
 800265c:	409a      	lsls	r2, r3
 800265e:	0013      	movs	r3, r2
 8002660:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002662:	6839      	ldr	r1, [r7, #0]
 8002664:	4835      	ldr	r0, [pc, #212]	@ (800273c <HAL_RCC_GetSysClockFreq+0xfc>)
 8002666:	f7fd fd5d 	bl	8000124 <__udivsi3>
 800266a:	0003      	movs	r3, r0
 800266c:	613b      	str	r3, [r7, #16]
 800266e:	e05d      	b.n	800272c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002670:	4b31      	ldr	r3, [pc, #196]	@ (8002738 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	2238      	movs	r2, #56	@ 0x38
 8002676:	4013      	ands	r3, r2
 8002678:	2b08      	cmp	r3, #8
 800267a:	d102      	bne.n	8002682 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800267c:	4b30      	ldr	r3, [pc, #192]	@ (8002740 <HAL_RCC_GetSysClockFreq+0x100>)
 800267e:	613b      	str	r3, [r7, #16]
 8002680:	e054      	b.n	800272c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002682:	4b2d      	ldr	r3, [pc, #180]	@ (8002738 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	2238      	movs	r2, #56	@ 0x38
 8002688:	4013      	ands	r3, r2
 800268a:	2b10      	cmp	r3, #16
 800268c:	d138      	bne.n	8002700 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800268e:	4b2a      	ldr	r3, [pc, #168]	@ (8002738 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	2203      	movs	r2, #3
 8002694:	4013      	ands	r3, r2
 8002696:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002698:	4b27      	ldr	r3, [pc, #156]	@ (8002738 <HAL_RCC_GetSysClockFreq+0xf8>)
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	091b      	lsrs	r3, r3, #4
 800269e:	2207      	movs	r2, #7
 80026a0:	4013      	ands	r3, r2
 80026a2:	3301      	adds	r3, #1
 80026a4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2b03      	cmp	r3, #3
 80026aa:	d10d      	bne.n	80026c8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80026ac:	68b9      	ldr	r1, [r7, #8]
 80026ae:	4824      	ldr	r0, [pc, #144]	@ (8002740 <HAL_RCC_GetSysClockFreq+0x100>)
 80026b0:	f7fd fd38 	bl	8000124 <__udivsi3>
 80026b4:	0003      	movs	r3, r0
 80026b6:	0019      	movs	r1, r3
 80026b8:	4b1f      	ldr	r3, [pc, #124]	@ (8002738 <HAL_RCC_GetSysClockFreq+0xf8>)
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	0a1b      	lsrs	r3, r3, #8
 80026be:	227f      	movs	r2, #127	@ 0x7f
 80026c0:	4013      	ands	r3, r2
 80026c2:	434b      	muls	r3, r1
 80026c4:	617b      	str	r3, [r7, #20]
        break;
 80026c6:	e00d      	b.n	80026e4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80026c8:	68b9      	ldr	r1, [r7, #8]
 80026ca:	481c      	ldr	r0, [pc, #112]	@ (800273c <HAL_RCC_GetSysClockFreq+0xfc>)
 80026cc:	f7fd fd2a 	bl	8000124 <__udivsi3>
 80026d0:	0003      	movs	r3, r0
 80026d2:	0019      	movs	r1, r3
 80026d4:	4b18      	ldr	r3, [pc, #96]	@ (8002738 <HAL_RCC_GetSysClockFreq+0xf8>)
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	0a1b      	lsrs	r3, r3, #8
 80026da:	227f      	movs	r2, #127	@ 0x7f
 80026dc:	4013      	ands	r3, r2
 80026de:	434b      	muls	r3, r1
 80026e0:	617b      	str	r3, [r7, #20]
        break;
 80026e2:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80026e4:	4b14      	ldr	r3, [pc, #80]	@ (8002738 <HAL_RCC_GetSysClockFreq+0xf8>)
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	0f5b      	lsrs	r3, r3, #29
 80026ea:	2207      	movs	r2, #7
 80026ec:	4013      	ands	r3, r2
 80026ee:	3301      	adds	r3, #1
 80026f0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80026f2:	6879      	ldr	r1, [r7, #4]
 80026f4:	6978      	ldr	r0, [r7, #20]
 80026f6:	f7fd fd15 	bl	8000124 <__udivsi3>
 80026fa:	0003      	movs	r3, r0
 80026fc:	613b      	str	r3, [r7, #16]
 80026fe:	e015      	b.n	800272c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002700:	4b0d      	ldr	r3, [pc, #52]	@ (8002738 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	2238      	movs	r2, #56	@ 0x38
 8002706:	4013      	ands	r3, r2
 8002708:	2b20      	cmp	r3, #32
 800270a:	d103      	bne.n	8002714 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800270c:	2380      	movs	r3, #128	@ 0x80
 800270e:	021b      	lsls	r3, r3, #8
 8002710:	613b      	str	r3, [r7, #16]
 8002712:	e00b      	b.n	800272c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002714:	4b08      	ldr	r3, [pc, #32]	@ (8002738 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	2238      	movs	r2, #56	@ 0x38
 800271a:	4013      	ands	r3, r2
 800271c:	2b18      	cmp	r3, #24
 800271e:	d103      	bne.n	8002728 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002720:	23fa      	movs	r3, #250	@ 0xfa
 8002722:	01db      	lsls	r3, r3, #7
 8002724:	613b      	str	r3, [r7, #16]
 8002726:	e001      	b.n	800272c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002728:	2300      	movs	r3, #0
 800272a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800272c:	693b      	ldr	r3, [r7, #16]
}
 800272e:	0018      	movs	r0, r3
 8002730:	46bd      	mov	sp, r7
 8002732:	b006      	add	sp, #24
 8002734:	bd80      	pop	{r7, pc}
 8002736:	46c0      	nop			@ (mov r8, r8)
 8002738:	40021000 	.word	0x40021000
 800273c:	00f42400 	.word	0x00f42400
 8002740:	007a1200 	.word	0x007a1200

08002744 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002748:	4b02      	ldr	r3, [pc, #8]	@ (8002754 <HAL_RCC_GetHCLKFreq+0x10>)
 800274a:	681b      	ldr	r3, [r3, #0]
}
 800274c:	0018      	movs	r0, r3
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	46c0      	nop			@ (mov r8, r8)
 8002754:	20000000 	.word	0x20000000

08002758 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002758:	b5b0      	push	{r4, r5, r7, lr}
 800275a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800275c:	f7ff fff2 	bl	8002744 <HAL_RCC_GetHCLKFreq>
 8002760:	0004      	movs	r4, r0
 8002762:	f7ff fb49 	bl	8001df8 <LL_RCC_GetAPB1Prescaler>
 8002766:	0003      	movs	r3, r0
 8002768:	0b1a      	lsrs	r2, r3, #12
 800276a:	4b05      	ldr	r3, [pc, #20]	@ (8002780 <HAL_RCC_GetPCLK1Freq+0x28>)
 800276c:	0092      	lsls	r2, r2, #2
 800276e:	58d3      	ldr	r3, [r2, r3]
 8002770:	221f      	movs	r2, #31
 8002772:	4013      	ands	r3, r2
 8002774:	40dc      	lsrs	r4, r3
 8002776:	0023      	movs	r3, r4
}
 8002778:	0018      	movs	r0, r3
 800277a:	46bd      	mov	sp, r7
 800277c:	bdb0      	pop	{r4, r5, r7, pc}
 800277e:	46c0      	nop			@ (mov r8, r8)
 8002780:	08003db0 	.word	0x08003db0

08002784 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800278c:	2313      	movs	r3, #19
 800278e:	18fb      	adds	r3, r7, r3
 8002790:	2200      	movs	r2, #0
 8002792:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002794:	2312      	movs	r3, #18
 8002796:	18fb      	adds	r3, r7, r3
 8002798:	2200      	movs	r2, #0
 800279a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	2380      	movs	r3, #128	@ 0x80
 80027a2:	029b      	lsls	r3, r3, #10
 80027a4:	4013      	ands	r3, r2
 80027a6:	d100      	bne.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x26>
 80027a8:	e0a3      	b.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027aa:	2011      	movs	r0, #17
 80027ac:	183b      	adds	r3, r7, r0
 80027ae:	2200      	movs	r2, #0
 80027b0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027b2:	4b7f      	ldr	r3, [pc, #508]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80027b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80027b6:	2380      	movs	r3, #128	@ 0x80
 80027b8:	055b      	lsls	r3, r3, #21
 80027ba:	4013      	ands	r3, r2
 80027bc:	d110      	bne.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027be:	4b7c      	ldr	r3, [pc, #496]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80027c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80027c2:	4b7b      	ldr	r3, [pc, #492]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80027c4:	2180      	movs	r1, #128	@ 0x80
 80027c6:	0549      	lsls	r1, r1, #21
 80027c8:	430a      	orrs	r2, r1
 80027ca:	63da      	str	r2, [r3, #60]	@ 0x3c
 80027cc:	4b78      	ldr	r3, [pc, #480]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80027ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80027d0:	2380      	movs	r3, #128	@ 0x80
 80027d2:	055b      	lsls	r3, r3, #21
 80027d4:	4013      	ands	r3, r2
 80027d6:	60bb      	str	r3, [r7, #8]
 80027d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027da:	183b      	adds	r3, r7, r0
 80027dc:	2201      	movs	r2, #1
 80027de:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027e0:	4b74      	ldr	r3, [pc, #464]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	4b73      	ldr	r3, [pc, #460]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80027e6:	2180      	movs	r1, #128	@ 0x80
 80027e8:	0049      	lsls	r1, r1, #1
 80027ea:	430a      	orrs	r2, r1
 80027ec:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027ee:	f7fe fa1b 	bl	8000c28 <HAL_GetTick>
 80027f2:	0003      	movs	r3, r0
 80027f4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027f6:	e00b      	b.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027f8:	f7fe fa16 	bl	8000c28 <HAL_GetTick>
 80027fc:	0002      	movs	r2, r0
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	2b02      	cmp	r3, #2
 8002804:	d904      	bls.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002806:	2313      	movs	r3, #19
 8002808:	18fb      	adds	r3, r7, r3
 800280a:	2203      	movs	r2, #3
 800280c:	701a      	strb	r2, [r3, #0]
        break;
 800280e:	e005      	b.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002810:	4b68      	ldr	r3, [pc, #416]	@ (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	2380      	movs	r3, #128	@ 0x80
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	4013      	ands	r3, r2
 800281a:	d0ed      	beq.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800281c:	2313      	movs	r3, #19
 800281e:	18fb      	adds	r3, r7, r3
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d154      	bne.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002826:	4b62      	ldr	r3, [pc, #392]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002828:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800282a:	23c0      	movs	r3, #192	@ 0xc0
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	4013      	ands	r3, r2
 8002830:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d019      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	695b      	ldr	r3, [r3, #20]
 800283c:	697a      	ldr	r2, [r7, #20]
 800283e:	429a      	cmp	r2, r3
 8002840:	d014      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002842:	4b5b      	ldr	r3, [pc, #364]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002844:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002846:	4a5c      	ldr	r2, [pc, #368]	@ (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002848:	4013      	ands	r3, r2
 800284a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800284c:	4b58      	ldr	r3, [pc, #352]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800284e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002850:	4b57      	ldr	r3, [pc, #348]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002852:	2180      	movs	r1, #128	@ 0x80
 8002854:	0249      	lsls	r1, r1, #9
 8002856:	430a      	orrs	r2, r1
 8002858:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800285a:	4b55      	ldr	r3, [pc, #340]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800285c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800285e:	4b54      	ldr	r3, [pc, #336]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002860:	4956      	ldr	r1, [pc, #344]	@ (80029bc <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8002862:	400a      	ands	r2, r1
 8002864:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002866:	4b52      	ldr	r3, [pc, #328]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002868:	697a      	ldr	r2, [r7, #20]
 800286a:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	2201      	movs	r2, #1
 8002870:	4013      	ands	r3, r2
 8002872:	d016      	beq.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002874:	f7fe f9d8 	bl	8000c28 <HAL_GetTick>
 8002878:	0003      	movs	r3, r0
 800287a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800287c:	e00c      	b.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800287e:	f7fe f9d3 	bl	8000c28 <HAL_GetTick>
 8002882:	0002      	movs	r2, r0
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	4a4d      	ldr	r2, [pc, #308]	@ (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d904      	bls.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800288e:	2313      	movs	r3, #19
 8002890:	18fb      	adds	r3, r7, r3
 8002892:	2203      	movs	r2, #3
 8002894:	701a      	strb	r2, [r3, #0]
            break;
 8002896:	e004      	b.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002898:	4b45      	ldr	r3, [pc, #276]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800289a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800289c:	2202      	movs	r2, #2
 800289e:	4013      	ands	r3, r2
 80028a0:	d0ed      	beq.n	800287e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80028a2:	2313      	movs	r3, #19
 80028a4:	18fb      	adds	r3, r7, r3
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d10a      	bne.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028ac:	4b40      	ldr	r3, [pc, #256]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80028ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028b0:	4a41      	ldr	r2, [pc, #260]	@ (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80028b2:	4013      	ands	r3, r2
 80028b4:	0019      	movs	r1, r3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	695a      	ldr	r2, [r3, #20]
 80028ba:	4b3d      	ldr	r3, [pc, #244]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80028bc:	430a      	orrs	r2, r1
 80028be:	65da      	str	r2, [r3, #92]	@ 0x5c
 80028c0:	e00c      	b.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80028c2:	2312      	movs	r3, #18
 80028c4:	18fb      	adds	r3, r7, r3
 80028c6:	2213      	movs	r2, #19
 80028c8:	18ba      	adds	r2, r7, r2
 80028ca:	7812      	ldrb	r2, [r2, #0]
 80028cc:	701a      	strb	r2, [r3, #0]
 80028ce:	e005      	b.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028d0:	2312      	movs	r3, #18
 80028d2:	18fb      	adds	r3, r7, r3
 80028d4:	2213      	movs	r2, #19
 80028d6:	18ba      	adds	r2, r7, r2
 80028d8:	7812      	ldrb	r2, [r2, #0]
 80028da:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80028dc:	2311      	movs	r3, #17
 80028de:	18fb      	adds	r3, r7, r3
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d105      	bne.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028e6:	4b32      	ldr	r3, [pc, #200]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80028e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80028ea:	4b31      	ldr	r3, [pc, #196]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80028ec:	4935      	ldr	r1, [pc, #212]	@ (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80028ee:	400a      	ands	r2, r1
 80028f0:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2201      	movs	r2, #1
 80028f8:	4013      	ands	r3, r2
 80028fa:	d009      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028fc:	4b2c      	ldr	r3, [pc, #176]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80028fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002900:	2203      	movs	r2, #3
 8002902:	4393      	bics	r3, r2
 8002904:	0019      	movs	r1, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685a      	ldr	r2, [r3, #4]
 800290a:	4b29      	ldr	r3, [pc, #164]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800290c:	430a      	orrs	r2, r1
 800290e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2220      	movs	r2, #32
 8002916:	4013      	ands	r3, r2
 8002918:	d009      	beq.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800291a:	4b25      	ldr	r3, [pc, #148]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800291c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800291e:	4a2a      	ldr	r2, [pc, #168]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002920:	4013      	ands	r3, r2
 8002922:	0019      	movs	r1, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	689a      	ldr	r2, [r3, #8]
 8002928:	4b21      	ldr	r3, [pc, #132]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800292a:	430a      	orrs	r2, r1
 800292c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	2380      	movs	r3, #128	@ 0x80
 8002934:	01db      	lsls	r3, r3, #7
 8002936:	4013      	ands	r3, r2
 8002938:	d015      	beq.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800293a:	4b1d      	ldr	r3, [pc, #116]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800293c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	0899      	lsrs	r1, r3, #2
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	691a      	ldr	r2, [r3, #16]
 8002946:	4b1a      	ldr	r3, [pc, #104]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002948:	430a      	orrs	r2, r1
 800294a:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	691a      	ldr	r2, [r3, #16]
 8002950:	2380      	movs	r3, #128	@ 0x80
 8002952:	05db      	lsls	r3, r3, #23
 8002954:	429a      	cmp	r2, r3
 8002956:	d106      	bne.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002958:	4b15      	ldr	r3, [pc, #84]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800295a:	68da      	ldr	r2, [r3, #12]
 800295c:	4b14      	ldr	r3, [pc, #80]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800295e:	2180      	movs	r1, #128	@ 0x80
 8002960:	0249      	lsls	r1, r1, #9
 8002962:	430a      	orrs	r2, r1
 8002964:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	2380      	movs	r3, #128	@ 0x80
 800296c:	011b      	lsls	r3, r3, #4
 800296e:	4013      	ands	r3, r2
 8002970:	d016      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002972:	4b0f      	ldr	r3, [pc, #60]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002974:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002976:	4a15      	ldr	r2, [pc, #84]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002978:	4013      	ands	r3, r2
 800297a:	0019      	movs	r1, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	68da      	ldr	r2, [r3, #12]
 8002980:	4b0b      	ldr	r3, [pc, #44]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002982:	430a      	orrs	r2, r1
 8002984:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	68da      	ldr	r2, [r3, #12]
 800298a:	2380      	movs	r3, #128	@ 0x80
 800298c:	01db      	lsls	r3, r3, #7
 800298e:	429a      	cmp	r2, r3
 8002990:	d106      	bne.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002992:	4b07      	ldr	r3, [pc, #28]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002994:	68da      	ldr	r2, [r3, #12]
 8002996:	4b06      	ldr	r3, [pc, #24]	@ (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002998:	2180      	movs	r1, #128	@ 0x80
 800299a:	0249      	lsls	r1, r1, #9
 800299c:	430a      	orrs	r2, r1
 800299e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80029a0:	2312      	movs	r3, #18
 80029a2:	18fb      	adds	r3, r7, r3
 80029a4:	781b      	ldrb	r3, [r3, #0]
}
 80029a6:	0018      	movs	r0, r3
 80029a8:	46bd      	mov	sp, r7
 80029aa:	b006      	add	sp, #24
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	46c0      	nop			@ (mov r8, r8)
 80029b0:	40021000 	.word	0x40021000
 80029b4:	40007000 	.word	0x40007000
 80029b8:	fffffcff 	.word	0xfffffcff
 80029bc:	fffeffff 	.word	0xfffeffff
 80029c0:	00001388 	.word	0x00001388
 80029c4:	efffffff 	.word	0xefffffff
 80029c8:	ffffcfff 	.word	0xffffcfff
 80029cc:	ffff3fff 	.word	0xffff3fff

080029d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d101      	bne.n	80029e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e046      	b.n	8002a70 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2288      	movs	r2, #136	@ 0x88
 80029e6:	589b      	ldr	r3, [r3, r2]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d107      	bne.n	80029fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2284      	movs	r2, #132	@ 0x84
 80029f0:	2100      	movs	r1, #0
 80029f2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	0018      	movs	r0, r3
 80029f8:	f7fd ffd0 	bl	800099c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2288      	movs	r2, #136	@ 0x88
 8002a00:	2124      	movs	r1, #36	@ 0x24
 8002a02:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2101      	movs	r1, #1
 8002a10:	438a      	bics	r2, r1
 8002a12:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d003      	beq.n	8002a24 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	0018      	movs	r0, r3
 8002a20:	f000 fa3a 	bl	8002e98 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	0018      	movs	r0, r3
 8002a28:	f000 f8cc 	bl	8002bc4 <UART_SetConfig>
 8002a2c:	0003      	movs	r3, r0
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d101      	bne.n	8002a36 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e01c      	b.n	8002a70 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	685a      	ldr	r2, [r3, #4]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	490d      	ldr	r1, [pc, #52]	@ (8002a78 <HAL_UART_Init+0xa8>)
 8002a42:	400a      	ands	r2, r1
 8002a44:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	689a      	ldr	r2, [r3, #8]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	212a      	movs	r1, #42	@ 0x2a
 8002a52:	438a      	bics	r2, r1
 8002a54:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2101      	movs	r1, #1
 8002a62:	430a      	orrs	r2, r1
 8002a64:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	0018      	movs	r0, r3
 8002a6a:	f000 fac9 	bl	8003000 <UART_CheckIdleState>
 8002a6e:	0003      	movs	r3, r0
}
 8002a70:	0018      	movs	r0, r3
 8002a72:	46bd      	mov	sp, r7
 8002a74:	b002      	add	sp, #8
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	ffffb7ff 	.word	0xffffb7ff

08002a7c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b08a      	sub	sp, #40	@ 0x28
 8002a80:	af02      	add	r7, sp, #8
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	60b9      	str	r1, [r7, #8]
 8002a86:	603b      	str	r3, [r7, #0]
 8002a88:	1dbb      	adds	r3, r7, #6
 8002a8a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2288      	movs	r2, #136	@ 0x88
 8002a90:	589b      	ldr	r3, [r3, r2]
 8002a92:	2b20      	cmp	r3, #32
 8002a94:	d000      	beq.n	8002a98 <HAL_UART_Transmit+0x1c>
 8002a96:	e090      	b.n	8002bba <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d003      	beq.n	8002aa6 <HAL_UART_Transmit+0x2a>
 8002a9e:	1dbb      	adds	r3, r7, #6
 8002aa0:	881b      	ldrh	r3, [r3, #0]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d101      	bne.n	8002aaa <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e088      	b.n	8002bbc <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	689a      	ldr	r2, [r3, #8]
 8002aae:	2380      	movs	r3, #128	@ 0x80
 8002ab0:	015b      	lsls	r3, r3, #5
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d109      	bne.n	8002aca <HAL_UART_Transmit+0x4e>
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d105      	bne.n	8002aca <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	d001      	beq.n	8002aca <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e078      	b.n	8002bbc <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2290      	movs	r2, #144	@ 0x90
 8002ace:	2100      	movs	r1, #0
 8002ad0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2288      	movs	r2, #136	@ 0x88
 8002ad6:	2121      	movs	r1, #33	@ 0x21
 8002ad8:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ada:	f7fe f8a5 	bl	8000c28 <HAL_GetTick>
 8002ade:	0003      	movs	r3, r0
 8002ae0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	1dba      	adds	r2, r7, #6
 8002ae6:	2154      	movs	r1, #84	@ 0x54
 8002ae8:	8812      	ldrh	r2, [r2, #0]
 8002aea:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	1dba      	adds	r2, r7, #6
 8002af0:	2156      	movs	r1, #86	@ 0x56
 8002af2:	8812      	ldrh	r2, [r2, #0]
 8002af4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	689a      	ldr	r2, [r3, #8]
 8002afa:	2380      	movs	r3, #128	@ 0x80
 8002afc:	015b      	lsls	r3, r3, #5
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d108      	bne.n	8002b14 <HAL_UART_Transmit+0x98>
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d104      	bne.n	8002b14 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	61bb      	str	r3, [r7, #24]
 8002b12:	e003      	b.n	8002b1c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002b1c:	e030      	b.n	8002b80 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b1e:	697a      	ldr	r2, [r7, #20]
 8002b20:	68f8      	ldr	r0, [r7, #12]
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	9300      	str	r3, [sp, #0]
 8002b26:	0013      	movs	r3, r2
 8002b28:	2200      	movs	r2, #0
 8002b2a:	2180      	movs	r1, #128	@ 0x80
 8002b2c:	f000 fb12 	bl	8003154 <UART_WaitOnFlagUntilTimeout>
 8002b30:	1e03      	subs	r3, r0, #0
 8002b32:	d005      	beq.n	8002b40 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2288      	movs	r2, #136	@ 0x88
 8002b38:	2120      	movs	r1, #32
 8002b3a:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e03d      	b.n	8002bbc <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d10b      	bne.n	8002b5e <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	881b      	ldrh	r3, [r3, #0]
 8002b4a:	001a      	movs	r2, r3
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	05d2      	lsls	r2, r2, #23
 8002b52:	0dd2      	lsrs	r2, r2, #23
 8002b54:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	3302      	adds	r3, #2
 8002b5a:	61bb      	str	r3, [r7, #24]
 8002b5c:	e007      	b.n	8002b6e <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	781a      	ldrb	r2, [r3, #0]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2256      	movs	r2, #86	@ 0x56
 8002b72:	5a9b      	ldrh	r3, [r3, r2]
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	3b01      	subs	r3, #1
 8002b78:	b299      	uxth	r1, r3
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2256      	movs	r2, #86	@ 0x56
 8002b7e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2256      	movs	r2, #86	@ 0x56
 8002b84:	5a9b      	ldrh	r3, [r3, r2]
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d1c8      	bne.n	8002b1e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b8c:	697a      	ldr	r2, [r7, #20]
 8002b8e:	68f8      	ldr	r0, [r7, #12]
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	9300      	str	r3, [sp, #0]
 8002b94:	0013      	movs	r3, r2
 8002b96:	2200      	movs	r2, #0
 8002b98:	2140      	movs	r1, #64	@ 0x40
 8002b9a:	f000 fadb 	bl	8003154 <UART_WaitOnFlagUntilTimeout>
 8002b9e:	1e03      	subs	r3, r0, #0
 8002ba0:	d005      	beq.n	8002bae <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2288      	movs	r2, #136	@ 0x88
 8002ba6:	2120      	movs	r1, #32
 8002ba8:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e006      	b.n	8002bbc <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2288      	movs	r2, #136	@ 0x88
 8002bb2:	2120      	movs	r1, #32
 8002bb4:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	e000      	b.n	8002bbc <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8002bba:	2302      	movs	r3, #2
  }
}
 8002bbc:	0018      	movs	r0, r3
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	b008      	add	sp, #32
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b088      	sub	sp, #32
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002bcc:	231a      	movs	r3, #26
 8002bce:	18fb      	adds	r3, r7, r3
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	689a      	ldr	r2, [r3, #8]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	691b      	ldr	r3, [r3, #16]
 8002bdc:	431a      	orrs	r2, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	695b      	ldr	r3, [r3, #20]
 8002be2:	431a      	orrs	r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	69db      	ldr	r3, [r3, #28]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4aa1      	ldr	r2, [pc, #644]	@ (8002e78 <UART_SetConfig+0x2b4>)
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	0019      	movs	r1, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	69fa      	ldr	r2, [r7, #28]
 8002bfe:	430a      	orrs	r2, r1
 8002c00:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	4a9c      	ldr	r2, [pc, #624]	@ (8002e7c <UART_SetConfig+0x2b8>)
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	0019      	movs	r1, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	68da      	ldr	r2, [r3, #12]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	430a      	orrs	r2, r1
 8002c18:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a1b      	ldr	r3, [r3, #32]
 8002c24:	69fa      	ldr	r2, [r7, #28]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	4a93      	ldr	r2, [pc, #588]	@ (8002e80 <UART_SetConfig+0x2bc>)
 8002c32:	4013      	ands	r3, r2
 8002c34:	0019      	movs	r1, r3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	69fa      	ldr	r2, [r7, #28]
 8002c3c:	430a      	orrs	r2, r1
 8002c3e:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c46:	220f      	movs	r2, #15
 8002c48:	4393      	bics	r3, r2
 8002c4a:	0019      	movs	r1, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	430a      	orrs	r2, r1
 8002c56:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a89      	ldr	r2, [pc, #548]	@ (8002e84 <UART_SetConfig+0x2c0>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d127      	bne.n	8002cb2 <UART_SetConfig+0xee>
 8002c62:	4b89      	ldr	r3, [pc, #548]	@ (8002e88 <UART_SetConfig+0x2c4>)
 8002c64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c66:	2203      	movs	r2, #3
 8002c68:	4013      	ands	r3, r2
 8002c6a:	2b03      	cmp	r3, #3
 8002c6c:	d017      	beq.n	8002c9e <UART_SetConfig+0xda>
 8002c6e:	d81b      	bhi.n	8002ca8 <UART_SetConfig+0xe4>
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d00a      	beq.n	8002c8a <UART_SetConfig+0xc6>
 8002c74:	d818      	bhi.n	8002ca8 <UART_SetConfig+0xe4>
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d002      	beq.n	8002c80 <UART_SetConfig+0xbc>
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d00a      	beq.n	8002c94 <UART_SetConfig+0xd0>
 8002c7e:	e013      	b.n	8002ca8 <UART_SetConfig+0xe4>
 8002c80:	231b      	movs	r3, #27
 8002c82:	18fb      	adds	r3, r7, r3
 8002c84:	2200      	movs	r2, #0
 8002c86:	701a      	strb	r2, [r3, #0]
 8002c88:	e021      	b.n	8002cce <UART_SetConfig+0x10a>
 8002c8a:	231b      	movs	r3, #27
 8002c8c:	18fb      	adds	r3, r7, r3
 8002c8e:	2202      	movs	r2, #2
 8002c90:	701a      	strb	r2, [r3, #0]
 8002c92:	e01c      	b.n	8002cce <UART_SetConfig+0x10a>
 8002c94:	231b      	movs	r3, #27
 8002c96:	18fb      	adds	r3, r7, r3
 8002c98:	2204      	movs	r2, #4
 8002c9a:	701a      	strb	r2, [r3, #0]
 8002c9c:	e017      	b.n	8002cce <UART_SetConfig+0x10a>
 8002c9e:	231b      	movs	r3, #27
 8002ca0:	18fb      	adds	r3, r7, r3
 8002ca2:	2208      	movs	r2, #8
 8002ca4:	701a      	strb	r2, [r3, #0]
 8002ca6:	e012      	b.n	8002cce <UART_SetConfig+0x10a>
 8002ca8:	231b      	movs	r3, #27
 8002caa:	18fb      	adds	r3, r7, r3
 8002cac:	2210      	movs	r2, #16
 8002cae:	701a      	strb	r2, [r3, #0]
 8002cb0:	e00d      	b.n	8002cce <UART_SetConfig+0x10a>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a75      	ldr	r2, [pc, #468]	@ (8002e8c <UART_SetConfig+0x2c8>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d104      	bne.n	8002cc6 <UART_SetConfig+0x102>
 8002cbc:	231b      	movs	r3, #27
 8002cbe:	18fb      	adds	r3, r7, r3
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	701a      	strb	r2, [r3, #0]
 8002cc4:	e003      	b.n	8002cce <UART_SetConfig+0x10a>
 8002cc6:	231b      	movs	r3, #27
 8002cc8:	18fb      	adds	r3, r7, r3
 8002cca:	2210      	movs	r2, #16
 8002ccc:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	69da      	ldr	r2, [r3, #28]
 8002cd2:	2380      	movs	r3, #128	@ 0x80
 8002cd4:	021b      	lsls	r3, r3, #8
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d000      	beq.n	8002cdc <UART_SetConfig+0x118>
 8002cda:	e065      	b.n	8002da8 <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 8002cdc:	231b      	movs	r3, #27
 8002cde:	18fb      	adds	r3, r7, r3
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	2b08      	cmp	r3, #8
 8002ce4:	d015      	beq.n	8002d12 <UART_SetConfig+0x14e>
 8002ce6:	dc18      	bgt.n	8002d1a <UART_SetConfig+0x156>
 8002ce8:	2b04      	cmp	r3, #4
 8002cea:	d00d      	beq.n	8002d08 <UART_SetConfig+0x144>
 8002cec:	dc15      	bgt.n	8002d1a <UART_SetConfig+0x156>
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d002      	beq.n	8002cf8 <UART_SetConfig+0x134>
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d005      	beq.n	8002d02 <UART_SetConfig+0x13e>
 8002cf6:	e010      	b.n	8002d1a <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002cf8:	f7ff fd2e 	bl	8002758 <HAL_RCC_GetPCLK1Freq>
 8002cfc:	0003      	movs	r3, r0
 8002cfe:	617b      	str	r3, [r7, #20]
        break;
 8002d00:	e012      	b.n	8002d28 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d02:	4b63      	ldr	r3, [pc, #396]	@ (8002e90 <UART_SetConfig+0x2cc>)
 8002d04:	617b      	str	r3, [r7, #20]
        break;
 8002d06:	e00f      	b.n	8002d28 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d08:	f7ff fc9a 	bl	8002640 <HAL_RCC_GetSysClockFreq>
 8002d0c:	0003      	movs	r3, r0
 8002d0e:	617b      	str	r3, [r7, #20]
        break;
 8002d10:	e00a      	b.n	8002d28 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d12:	2380      	movs	r3, #128	@ 0x80
 8002d14:	021b      	lsls	r3, r3, #8
 8002d16:	617b      	str	r3, [r7, #20]
        break;
 8002d18:	e006      	b.n	8002d28 <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002d1e:	231a      	movs	r3, #26
 8002d20:	18fb      	adds	r3, r7, r3
 8002d22:	2201      	movs	r2, #1
 8002d24:	701a      	strb	r2, [r3, #0]
        break;
 8002d26:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d100      	bne.n	8002d30 <UART_SetConfig+0x16c>
 8002d2e:	e08d      	b.n	8002e4c <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d34:	4b57      	ldr	r3, [pc, #348]	@ (8002e94 <UART_SetConfig+0x2d0>)
 8002d36:	0052      	lsls	r2, r2, #1
 8002d38:	5ad3      	ldrh	r3, [r2, r3]
 8002d3a:	0019      	movs	r1, r3
 8002d3c:	6978      	ldr	r0, [r7, #20]
 8002d3e:	f7fd f9f1 	bl	8000124 <__udivsi3>
 8002d42:	0003      	movs	r3, r0
 8002d44:	005a      	lsls	r2, r3, #1
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	085b      	lsrs	r3, r3, #1
 8002d4c:	18d2      	adds	r2, r2, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	0019      	movs	r1, r3
 8002d54:	0010      	movs	r0, r2
 8002d56:	f7fd f9e5 	bl	8000124 <__udivsi3>
 8002d5a:	0003      	movs	r3, r0
 8002d5c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	2b0f      	cmp	r3, #15
 8002d62:	d91c      	bls.n	8002d9e <UART_SetConfig+0x1da>
 8002d64:	693a      	ldr	r2, [r7, #16]
 8002d66:	2380      	movs	r3, #128	@ 0x80
 8002d68:	025b      	lsls	r3, r3, #9
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d217      	bcs.n	8002d9e <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	b29a      	uxth	r2, r3
 8002d72:	200e      	movs	r0, #14
 8002d74:	183b      	adds	r3, r7, r0
 8002d76:	210f      	movs	r1, #15
 8002d78:	438a      	bics	r2, r1
 8002d7a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	085b      	lsrs	r3, r3, #1
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	2207      	movs	r2, #7
 8002d84:	4013      	ands	r3, r2
 8002d86:	b299      	uxth	r1, r3
 8002d88:	183b      	adds	r3, r7, r0
 8002d8a:	183a      	adds	r2, r7, r0
 8002d8c:	8812      	ldrh	r2, [r2, #0]
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	183a      	adds	r2, r7, r0
 8002d98:	8812      	ldrh	r2, [r2, #0]
 8002d9a:	60da      	str	r2, [r3, #12]
 8002d9c:	e056      	b.n	8002e4c <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8002d9e:	231a      	movs	r3, #26
 8002da0:	18fb      	adds	r3, r7, r3
 8002da2:	2201      	movs	r2, #1
 8002da4:	701a      	strb	r2, [r3, #0]
 8002da6:	e051      	b.n	8002e4c <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002da8:	231b      	movs	r3, #27
 8002daa:	18fb      	adds	r3, r7, r3
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	2b08      	cmp	r3, #8
 8002db0:	d015      	beq.n	8002dde <UART_SetConfig+0x21a>
 8002db2:	dc18      	bgt.n	8002de6 <UART_SetConfig+0x222>
 8002db4:	2b04      	cmp	r3, #4
 8002db6:	d00d      	beq.n	8002dd4 <UART_SetConfig+0x210>
 8002db8:	dc15      	bgt.n	8002de6 <UART_SetConfig+0x222>
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d002      	beq.n	8002dc4 <UART_SetConfig+0x200>
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d005      	beq.n	8002dce <UART_SetConfig+0x20a>
 8002dc2:	e010      	b.n	8002de6 <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002dc4:	f7ff fcc8 	bl	8002758 <HAL_RCC_GetPCLK1Freq>
 8002dc8:	0003      	movs	r3, r0
 8002dca:	617b      	str	r3, [r7, #20]
        break;
 8002dcc:	e012      	b.n	8002df4 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002dce:	4b30      	ldr	r3, [pc, #192]	@ (8002e90 <UART_SetConfig+0x2cc>)
 8002dd0:	617b      	str	r3, [r7, #20]
        break;
 8002dd2:	e00f      	b.n	8002df4 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002dd4:	f7ff fc34 	bl	8002640 <HAL_RCC_GetSysClockFreq>
 8002dd8:	0003      	movs	r3, r0
 8002dda:	617b      	str	r3, [r7, #20]
        break;
 8002ddc:	e00a      	b.n	8002df4 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002dde:	2380      	movs	r3, #128	@ 0x80
 8002de0:	021b      	lsls	r3, r3, #8
 8002de2:	617b      	str	r3, [r7, #20]
        break;
 8002de4:	e006      	b.n	8002df4 <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 8002de6:	2300      	movs	r3, #0
 8002de8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002dea:	231a      	movs	r3, #26
 8002dec:	18fb      	adds	r3, r7, r3
 8002dee:	2201      	movs	r2, #1
 8002df0:	701a      	strb	r2, [r3, #0]
        break;
 8002df2:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d028      	beq.n	8002e4c <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002dfe:	4b25      	ldr	r3, [pc, #148]	@ (8002e94 <UART_SetConfig+0x2d0>)
 8002e00:	0052      	lsls	r2, r2, #1
 8002e02:	5ad3      	ldrh	r3, [r2, r3]
 8002e04:	0019      	movs	r1, r3
 8002e06:	6978      	ldr	r0, [r7, #20]
 8002e08:	f7fd f98c 	bl	8000124 <__udivsi3>
 8002e0c:	0003      	movs	r3, r0
 8002e0e:	001a      	movs	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	085b      	lsrs	r3, r3, #1
 8002e16:	18d2      	adds	r2, r2, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	0019      	movs	r1, r3
 8002e1e:	0010      	movs	r0, r2
 8002e20:	f7fd f980 	bl	8000124 <__udivsi3>
 8002e24:	0003      	movs	r3, r0
 8002e26:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	2b0f      	cmp	r3, #15
 8002e2c:	d90a      	bls.n	8002e44 <UART_SetConfig+0x280>
 8002e2e:	693a      	ldr	r2, [r7, #16]
 8002e30:	2380      	movs	r3, #128	@ 0x80
 8002e32:	025b      	lsls	r3, r3, #9
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d205      	bcs.n	8002e44 <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	b29a      	uxth	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	60da      	str	r2, [r3, #12]
 8002e42:	e003      	b.n	8002e4c <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8002e44:	231a      	movs	r3, #26
 8002e46:	18fb      	adds	r3, r7, r3
 8002e48:	2201      	movs	r2, #1
 8002e4a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	226a      	movs	r2, #106	@ 0x6a
 8002e50:	2101      	movs	r1, #1
 8002e52:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2268      	movs	r2, #104	@ 0x68
 8002e58:	2101      	movs	r1, #1
 8002e5a:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002e68:	231a      	movs	r3, #26
 8002e6a:	18fb      	adds	r3, r7, r3
 8002e6c:	781b      	ldrb	r3, [r3, #0]
}
 8002e6e:	0018      	movs	r0, r3
 8002e70:	46bd      	mov	sp, r7
 8002e72:	b008      	add	sp, #32
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	46c0      	nop			@ (mov r8, r8)
 8002e78:	cfff69f3 	.word	0xcfff69f3
 8002e7c:	ffffcfff 	.word	0xffffcfff
 8002e80:	11fff4ff 	.word	0x11fff4ff
 8002e84:	40013800 	.word	0x40013800
 8002e88:	40021000 	.word	0x40021000
 8002e8c:	40004400 	.word	0x40004400
 8002e90:	00f42400 	.word	0x00f42400
 8002e94:	08003dd0 	.word	0x08003dd0

08002e98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ea4:	2208      	movs	r2, #8
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	d00b      	beq.n	8002ec2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	4a4a      	ldr	r2, [pc, #296]	@ (8002fdc <UART_AdvFeatureConfig+0x144>)
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	0019      	movs	r1, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	4013      	ands	r3, r2
 8002eca:	d00b      	beq.n	8002ee4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	4a43      	ldr	r2, [pc, #268]	@ (8002fe0 <UART_AdvFeatureConfig+0x148>)
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	0019      	movs	r1, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	430a      	orrs	r2, r1
 8002ee2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ee8:	2202      	movs	r2, #2
 8002eea:	4013      	ands	r3, r2
 8002eec:	d00b      	beq.n	8002f06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	4a3b      	ldr	r2, [pc, #236]	@ (8002fe4 <UART_AdvFeatureConfig+0x14c>)
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	0019      	movs	r1, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	430a      	orrs	r2, r1
 8002f04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f0a:	2204      	movs	r2, #4
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	d00b      	beq.n	8002f28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	4a34      	ldr	r2, [pc, #208]	@ (8002fe8 <UART_AdvFeatureConfig+0x150>)
 8002f18:	4013      	ands	r3, r2
 8002f1a:	0019      	movs	r1, r3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	430a      	orrs	r2, r1
 8002f26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f2c:	2210      	movs	r2, #16
 8002f2e:	4013      	ands	r3, r2
 8002f30:	d00b      	beq.n	8002f4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	4a2c      	ldr	r2, [pc, #176]	@ (8002fec <UART_AdvFeatureConfig+0x154>)
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	0019      	movs	r1, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	430a      	orrs	r2, r1
 8002f48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f4e:	2220      	movs	r2, #32
 8002f50:	4013      	ands	r3, r2
 8002f52:	d00b      	beq.n	8002f6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	4a25      	ldr	r2, [pc, #148]	@ (8002ff0 <UART_AdvFeatureConfig+0x158>)
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	0019      	movs	r1, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f70:	2240      	movs	r2, #64	@ 0x40
 8002f72:	4013      	ands	r3, r2
 8002f74:	d01d      	beq.n	8002fb2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	4a1d      	ldr	r2, [pc, #116]	@ (8002ff4 <UART_AdvFeatureConfig+0x15c>)
 8002f7e:	4013      	ands	r3, r2
 8002f80:	0019      	movs	r1, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f92:	2380      	movs	r3, #128	@ 0x80
 8002f94:	035b      	lsls	r3, r3, #13
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d10b      	bne.n	8002fb2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	4a15      	ldr	r2, [pc, #84]	@ (8002ff8 <UART_AdvFeatureConfig+0x160>)
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	0019      	movs	r1, r3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fb6:	2280      	movs	r2, #128	@ 0x80
 8002fb8:	4013      	ands	r3, r2
 8002fba:	d00b      	beq.n	8002fd4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	4a0e      	ldr	r2, [pc, #56]	@ (8002ffc <UART_AdvFeatureConfig+0x164>)
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	0019      	movs	r1, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	430a      	orrs	r2, r1
 8002fd2:	605a      	str	r2, [r3, #4]
  }
}
 8002fd4:	46c0      	nop			@ (mov r8, r8)
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	b002      	add	sp, #8
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	ffff7fff 	.word	0xffff7fff
 8002fe0:	fffdffff 	.word	0xfffdffff
 8002fe4:	fffeffff 	.word	0xfffeffff
 8002fe8:	fffbffff 	.word	0xfffbffff
 8002fec:	ffffefff 	.word	0xffffefff
 8002ff0:	ffffdfff 	.word	0xffffdfff
 8002ff4:	ffefffff 	.word	0xffefffff
 8002ff8:	ff9fffff 	.word	0xff9fffff
 8002ffc:	fff7ffff 	.word	0xfff7ffff

08003000 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b092      	sub	sp, #72	@ 0x48
 8003004:	af02      	add	r7, sp, #8
 8003006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2290      	movs	r2, #144	@ 0x90
 800300c:	2100      	movs	r1, #0
 800300e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003010:	f7fd fe0a 	bl	8000c28 <HAL_GetTick>
 8003014:	0003      	movs	r3, r0
 8003016:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2208      	movs	r2, #8
 8003020:	4013      	ands	r3, r2
 8003022:	2b08      	cmp	r3, #8
 8003024:	d12d      	bne.n	8003082 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003026:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003028:	2280      	movs	r2, #128	@ 0x80
 800302a:	0391      	lsls	r1, r2, #14
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	4a47      	ldr	r2, [pc, #284]	@ (800314c <UART_CheckIdleState+0x14c>)
 8003030:	9200      	str	r2, [sp, #0]
 8003032:	2200      	movs	r2, #0
 8003034:	f000 f88e 	bl	8003154 <UART_WaitOnFlagUntilTimeout>
 8003038:	1e03      	subs	r3, r0, #0
 800303a:	d022      	beq.n	8003082 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800303c:	f3ef 8310 	mrs	r3, PRIMASK
 8003040:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003044:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003046:	2301      	movs	r3, #1
 8003048:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800304a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800304c:	f383 8810 	msr	PRIMASK, r3
}
 8003050:	46c0      	nop			@ (mov r8, r8)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2180      	movs	r1, #128	@ 0x80
 800305e:	438a      	bics	r2, r1
 8003060:	601a      	str	r2, [r3, #0]
 8003062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003064:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003066:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003068:	f383 8810 	msr	PRIMASK, r3
}
 800306c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2288      	movs	r2, #136	@ 0x88
 8003072:	2120      	movs	r1, #32
 8003074:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2284      	movs	r2, #132	@ 0x84
 800307a:	2100      	movs	r1, #0
 800307c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e060      	b.n	8003144 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2204      	movs	r2, #4
 800308a:	4013      	ands	r3, r2
 800308c:	2b04      	cmp	r3, #4
 800308e:	d146      	bne.n	800311e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003090:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003092:	2280      	movs	r2, #128	@ 0x80
 8003094:	03d1      	lsls	r1, r2, #15
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	4a2c      	ldr	r2, [pc, #176]	@ (800314c <UART_CheckIdleState+0x14c>)
 800309a:	9200      	str	r2, [sp, #0]
 800309c:	2200      	movs	r2, #0
 800309e:	f000 f859 	bl	8003154 <UART_WaitOnFlagUntilTimeout>
 80030a2:	1e03      	subs	r3, r0, #0
 80030a4:	d03b      	beq.n	800311e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030a6:	f3ef 8310 	mrs	r3, PRIMASK
 80030aa:	60fb      	str	r3, [r7, #12]
  return(result);
 80030ac:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80030ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80030b0:	2301      	movs	r3, #1
 80030b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	f383 8810 	msr	PRIMASK, r3
}
 80030ba:	46c0      	nop			@ (mov r8, r8)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4922      	ldr	r1, [pc, #136]	@ (8003150 <UART_CheckIdleState+0x150>)
 80030c8:	400a      	ands	r2, r1
 80030ca:	601a      	str	r2, [r3, #0]
 80030cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030ce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	f383 8810 	msr	PRIMASK, r3
}
 80030d6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030d8:	f3ef 8310 	mrs	r3, PRIMASK
 80030dc:	61bb      	str	r3, [r7, #24]
  return(result);
 80030de:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80030e2:	2301      	movs	r3, #1
 80030e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	f383 8810 	msr	PRIMASK, r3
}
 80030ec:	46c0      	nop			@ (mov r8, r8)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	689a      	ldr	r2, [r3, #8]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2101      	movs	r1, #1
 80030fa:	438a      	bics	r2, r1
 80030fc:	609a      	str	r2, [r3, #8]
 80030fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003100:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003102:	6a3b      	ldr	r3, [r7, #32]
 8003104:	f383 8810 	msr	PRIMASK, r3
}
 8003108:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	228c      	movs	r2, #140	@ 0x8c
 800310e:	2120      	movs	r1, #32
 8003110:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2284      	movs	r2, #132	@ 0x84
 8003116:	2100      	movs	r1, #0
 8003118:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e012      	b.n	8003144 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2288      	movs	r2, #136	@ 0x88
 8003122:	2120      	movs	r1, #32
 8003124:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	228c      	movs	r2, #140	@ 0x8c
 800312a:	2120      	movs	r1, #32
 800312c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2284      	movs	r2, #132	@ 0x84
 800313e:	2100      	movs	r1, #0
 8003140:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003142:	2300      	movs	r3, #0
}
 8003144:	0018      	movs	r0, r3
 8003146:	46bd      	mov	sp, r7
 8003148:	b010      	add	sp, #64	@ 0x40
 800314a:	bd80      	pop	{r7, pc}
 800314c:	01ffffff 	.word	0x01ffffff
 8003150:	fffffedf 	.word	0xfffffedf

08003154 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	60b9      	str	r1, [r7, #8]
 800315e:	603b      	str	r3, [r7, #0]
 8003160:	1dfb      	adds	r3, r7, #7
 8003162:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003164:	e051      	b.n	800320a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	3301      	adds	r3, #1
 800316a:	d04e      	beq.n	800320a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800316c:	f7fd fd5c 	bl	8000c28 <HAL_GetTick>
 8003170:	0002      	movs	r2, r0
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	69ba      	ldr	r2, [r7, #24]
 8003178:	429a      	cmp	r2, r3
 800317a:	d302      	bcc.n	8003182 <UART_WaitOnFlagUntilTimeout+0x2e>
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d101      	bne.n	8003186 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e051      	b.n	800322a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2204      	movs	r2, #4
 800318e:	4013      	ands	r3, r2
 8003190:	d03b      	beq.n	800320a <UART_WaitOnFlagUntilTimeout+0xb6>
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	2b80      	cmp	r3, #128	@ 0x80
 8003196:	d038      	beq.n	800320a <UART_WaitOnFlagUntilTimeout+0xb6>
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	2b40      	cmp	r3, #64	@ 0x40
 800319c:	d035      	beq.n	800320a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	69db      	ldr	r3, [r3, #28]
 80031a4:	2208      	movs	r2, #8
 80031a6:	4013      	ands	r3, r2
 80031a8:	2b08      	cmp	r3, #8
 80031aa:	d111      	bne.n	80031d0 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2208      	movs	r2, #8
 80031b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	0018      	movs	r0, r3
 80031b8:	f000 f83c 	bl	8003234 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2290      	movs	r2, #144	@ 0x90
 80031c0:	2108      	movs	r1, #8
 80031c2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2284      	movs	r2, #132	@ 0x84
 80031c8:	2100      	movs	r1, #0
 80031ca:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e02c      	b.n	800322a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	69da      	ldr	r2, [r3, #28]
 80031d6:	2380      	movs	r3, #128	@ 0x80
 80031d8:	011b      	lsls	r3, r3, #4
 80031da:	401a      	ands	r2, r3
 80031dc:	2380      	movs	r3, #128	@ 0x80
 80031de:	011b      	lsls	r3, r3, #4
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d112      	bne.n	800320a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2280      	movs	r2, #128	@ 0x80
 80031ea:	0112      	lsls	r2, r2, #4
 80031ec:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	0018      	movs	r0, r3
 80031f2:	f000 f81f 	bl	8003234 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2290      	movs	r2, #144	@ 0x90
 80031fa:	2120      	movs	r1, #32
 80031fc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2284      	movs	r2, #132	@ 0x84
 8003202:	2100      	movs	r1, #0
 8003204:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e00f      	b.n	800322a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	69db      	ldr	r3, [r3, #28]
 8003210:	68ba      	ldr	r2, [r7, #8]
 8003212:	4013      	ands	r3, r2
 8003214:	68ba      	ldr	r2, [r7, #8]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	425a      	negs	r2, r3
 800321a:	4153      	adcs	r3, r2
 800321c:	b2db      	uxtb	r3, r3
 800321e:	001a      	movs	r2, r3
 8003220:	1dfb      	adds	r3, r7, #7
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	429a      	cmp	r2, r3
 8003226:	d09e      	beq.n	8003166 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003228:	2300      	movs	r3, #0
}
 800322a:	0018      	movs	r0, r3
 800322c:	46bd      	mov	sp, r7
 800322e:	b004      	add	sp, #16
 8003230:	bd80      	pop	{r7, pc}
	...

08003234 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b08e      	sub	sp, #56	@ 0x38
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800323c:	f3ef 8310 	mrs	r3, PRIMASK
 8003240:	617b      	str	r3, [r7, #20]
  return(result);
 8003242:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003244:	637b      	str	r3, [r7, #52]	@ 0x34
 8003246:	2301      	movs	r3, #1
 8003248:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	f383 8810 	msr	PRIMASK, r3
}
 8003250:	46c0      	nop			@ (mov r8, r8)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4926      	ldr	r1, [pc, #152]	@ (80032f8 <UART_EndRxTransfer+0xc4>)
 800325e:	400a      	ands	r2, r1
 8003260:	601a      	str	r2, [r3, #0]
 8003262:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003264:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	f383 8810 	msr	PRIMASK, r3
}
 800326c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800326e:	f3ef 8310 	mrs	r3, PRIMASK
 8003272:	623b      	str	r3, [r7, #32]
  return(result);
 8003274:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003276:	633b      	str	r3, [r7, #48]	@ 0x30
 8003278:	2301      	movs	r3, #1
 800327a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800327c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800327e:	f383 8810 	msr	PRIMASK, r3
}
 8003282:	46c0      	nop			@ (mov r8, r8)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	689a      	ldr	r2, [r3, #8]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	491b      	ldr	r1, [pc, #108]	@ (80032fc <UART_EndRxTransfer+0xc8>)
 8003290:	400a      	ands	r2, r1
 8003292:	609a      	str	r2, [r3, #8]
 8003294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003296:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800329a:	f383 8810 	msr	PRIMASK, r3
}
 800329e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d118      	bne.n	80032da <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032a8:	f3ef 8310 	mrs	r3, PRIMASK
 80032ac:	60bb      	str	r3, [r7, #8]
  return(result);
 80032ae:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80032b2:	2301      	movs	r3, #1
 80032b4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	f383 8810 	msr	PRIMASK, r3
}
 80032bc:	46c0      	nop			@ (mov r8, r8)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2110      	movs	r1, #16
 80032ca:	438a      	bics	r2, r1
 80032cc:	601a      	str	r2, [r3, #0]
 80032ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	f383 8810 	msr	PRIMASK, r3
}
 80032d8:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	228c      	movs	r2, #140	@ 0x8c
 80032de:	2120      	movs	r1, #32
 80032e0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80032ee:	46c0      	nop			@ (mov r8, r8)
 80032f0:	46bd      	mov	sp, r7
 80032f2:	b00e      	add	sp, #56	@ 0x38
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	46c0      	nop			@ (mov r8, r8)
 80032f8:	fffffedf 	.word	0xfffffedf
 80032fc:	effffffe 	.word	0xeffffffe

08003300 <siprintf>:
 8003300:	b40e      	push	{r1, r2, r3}
 8003302:	b500      	push	{lr}
 8003304:	490b      	ldr	r1, [pc, #44]	@ (8003334 <siprintf+0x34>)
 8003306:	b09c      	sub	sp, #112	@ 0x70
 8003308:	ab1d      	add	r3, sp, #116	@ 0x74
 800330a:	9002      	str	r0, [sp, #8]
 800330c:	9006      	str	r0, [sp, #24]
 800330e:	9107      	str	r1, [sp, #28]
 8003310:	9104      	str	r1, [sp, #16]
 8003312:	4809      	ldr	r0, [pc, #36]	@ (8003338 <siprintf+0x38>)
 8003314:	4909      	ldr	r1, [pc, #36]	@ (800333c <siprintf+0x3c>)
 8003316:	cb04      	ldmia	r3!, {r2}
 8003318:	9105      	str	r1, [sp, #20]
 800331a:	6800      	ldr	r0, [r0, #0]
 800331c:	a902      	add	r1, sp, #8
 800331e:	9301      	str	r3, [sp, #4]
 8003320:	f000 f99e 	bl	8003660 <_svfiprintf_r>
 8003324:	2200      	movs	r2, #0
 8003326:	9b02      	ldr	r3, [sp, #8]
 8003328:	701a      	strb	r2, [r3, #0]
 800332a:	b01c      	add	sp, #112	@ 0x70
 800332c:	bc08      	pop	{r3}
 800332e:	b003      	add	sp, #12
 8003330:	4718      	bx	r3
 8003332:	46c0      	nop			@ (mov r8, r8)
 8003334:	7fffffff 	.word	0x7fffffff
 8003338:	2000000c 	.word	0x2000000c
 800333c:	ffff0208 	.word	0xffff0208

08003340 <memset>:
 8003340:	0003      	movs	r3, r0
 8003342:	1882      	adds	r2, r0, r2
 8003344:	4293      	cmp	r3, r2
 8003346:	d100      	bne.n	800334a <memset+0xa>
 8003348:	4770      	bx	lr
 800334a:	7019      	strb	r1, [r3, #0]
 800334c:	3301      	adds	r3, #1
 800334e:	e7f9      	b.n	8003344 <memset+0x4>

08003350 <__errno>:
 8003350:	4b01      	ldr	r3, [pc, #4]	@ (8003358 <__errno+0x8>)
 8003352:	6818      	ldr	r0, [r3, #0]
 8003354:	4770      	bx	lr
 8003356:	46c0      	nop			@ (mov r8, r8)
 8003358:	2000000c 	.word	0x2000000c

0800335c <__libc_init_array>:
 800335c:	b570      	push	{r4, r5, r6, lr}
 800335e:	2600      	movs	r6, #0
 8003360:	4c0c      	ldr	r4, [pc, #48]	@ (8003394 <__libc_init_array+0x38>)
 8003362:	4d0d      	ldr	r5, [pc, #52]	@ (8003398 <__libc_init_array+0x3c>)
 8003364:	1b64      	subs	r4, r4, r5
 8003366:	10a4      	asrs	r4, r4, #2
 8003368:	42a6      	cmp	r6, r4
 800336a:	d109      	bne.n	8003380 <__libc_init_array+0x24>
 800336c:	2600      	movs	r6, #0
 800336e:	f000 fc65 	bl	8003c3c <_init>
 8003372:	4c0a      	ldr	r4, [pc, #40]	@ (800339c <__libc_init_array+0x40>)
 8003374:	4d0a      	ldr	r5, [pc, #40]	@ (80033a0 <__libc_init_array+0x44>)
 8003376:	1b64      	subs	r4, r4, r5
 8003378:	10a4      	asrs	r4, r4, #2
 800337a:	42a6      	cmp	r6, r4
 800337c:	d105      	bne.n	800338a <__libc_init_array+0x2e>
 800337e:	bd70      	pop	{r4, r5, r6, pc}
 8003380:	00b3      	lsls	r3, r6, #2
 8003382:	58eb      	ldr	r3, [r5, r3]
 8003384:	4798      	blx	r3
 8003386:	3601      	adds	r6, #1
 8003388:	e7ee      	b.n	8003368 <__libc_init_array+0xc>
 800338a:	00b3      	lsls	r3, r6, #2
 800338c:	58eb      	ldr	r3, [r5, r3]
 800338e:	4798      	blx	r3
 8003390:	3601      	adds	r6, #1
 8003392:	e7f2      	b.n	800337a <__libc_init_array+0x1e>
 8003394:	08003e1c 	.word	0x08003e1c
 8003398:	08003e1c 	.word	0x08003e1c
 800339c:	08003e20 	.word	0x08003e20
 80033a0:	08003e1c 	.word	0x08003e1c

080033a4 <__retarget_lock_acquire_recursive>:
 80033a4:	4770      	bx	lr

080033a6 <__retarget_lock_release_recursive>:
 80033a6:	4770      	bx	lr

080033a8 <_free_r>:
 80033a8:	b570      	push	{r4, r5, r6, lr}
 80033aa:	0005      	movs	r5, r0
 80033ac:	1e0c      	subs	r4, r1, #0
 80033ae:	d010      	beq.n	80033d2 <_free_r+0x2a>
 80033b0:	3c04      	subs	r4, #4
 80033b2:	6823      	ldr	r3, [r4, #0]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	da00      	bge.n	80033ba <_free_r+0x12>
 80033b8:	18e4      	adds	r4, r4, r3
 80033ba:	0028      	movs	r0, r5
 80033bc:	f000 f8e0 	bl	8003580 <__malloc_lock>
 80033c0:	4a1d      	ldr	r2, [pc, #116]	@ (8003438 <_free_r+0x90>)
 80033c2:	6813      	ldr	r3, [r2, #0]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d105      	bne.n	80033d4 <_free_r+0x2c>
 80033c8:	6063      	str	r3, [r4, #4]
 80033ca:	6014      	str	r4, [r2, #0]
 80033cc:	0028      	movs	r0, r5
 80033ce:	f000 f8df 	bl	8003590 <__malloc_unlock>
 80033d2:	bd70      	pop	{r4, r5, r6, pc}
 80033d4:	42a3      	cmp	r3, r4
 80033d6:	d908      	bls.n	80033ea <_free_r+0x42>
 80033d8:	6820      	ldr	r0, [r4, #0]
 80033da:	1821      	adds	r1, r4, r0
 80033dc:	428b      	cmp	r3, r1
 80033de:	d1f3      	bne.n	80033c8 <_free_r+0x20>
 80033e0:	6819      	ldr	r1, [r3, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	1809      	adds	r1, r1, r0
 80033e6:	6021      	str	r1, [r4, #0]
 80033e8:	e7ee      	b.n	80033c8 <_free_r+0x20>
 80033ea:	001a      	movs	r2, r3
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d001      	beq.n	80033f6 <_free_r+0x4e>
 80033f2:	42a3      	cmp	r3, r4
 80033f4:	d9f9      	bls.n	80033ea <_free_r+0x42>
 80033f6:	6811      	ldr	r1, [r2, #0]
 80033f8:	1850      	adds	r0, r2, r1
 80033fa:	42a0      	cmp	r0, r4
 80033fc:	d10b      	bne.n	8003416 <_free_r+0x6e>
 80033fe:	6820      	ldr	r0, [r4, #0]
 8003400:	1809      	adds	r1, r1, r0
 8003402:	1850      	adds	r0, r2, r1
 8003404:	6011      	str	r1, [r2, #0]
 8003406:	4283      	cmp	r3, r0
 8003408:	d1e0      	bne.n	80033cc <_free_r+0x24>
 800340a:	6818      	ldr	r0, [r3, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	1841      	adds	r1, r0, r1
 8003410:	6011      	str	r1, [r2, #0]
 8003412:	6053      	str	r3, [r2, #4]
 8003414:	e7da      	b.n	80033cc <_free_r+0x24>
 8003416:	42a0      	cmp	r0, r4
 8003418:	d902      	bls.n	8003420 <_free_r+0x78>
 800341a:	230c      	movs	r3, #12
 800341c:	602b      	str	r3, [r5, #0]
 800341e:	e7d5      	b.n	80033cc <_free_r+0x24>
 8003420:	6820      	ldr	r0, [r4, #0]
 8003422:	1821      	adds	r1, r4, r0
 8003424:	428b      	cmp	r3, r1
 8003426:	d103      	bne.n	8003430 <_free_r+0x88>
 8003428:	6819      	ldr	r1, [r3, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	1809      	adds	r1, r1, r0
 800342e:	6021      	str	r1, [r4, #0]
 8003430:	6063      	str	r3, [r4, #4]
 8003432:	6054      	str	r4, [r2, #4]
 8003434:	e7ca      	b.n	80033cc <_free_r+0x24>
 8003436:	46c0      	nop			@ (mov r8, r8)
 8003438:	200002ac 	.word	0x200002ac

0800343c <sbrk_aligned>:
 800343c:	b570      	push	{r4, r5, r6, lr}
 800343e:	4e0f      	ldr	r6, [pc, #60]	@ (800347c <sbrk_aligned+0x40>)
 8003440:	000d      	movs	r5, r1
 8003442:	6831      	ldr	r1, [r6, #0]
 8003444:	0004      	movs	r4, r0
 8003446:	2900      	cmp	r1, #0
 8003448:	d102      	bne.n	8003450 <sbrk_aligned+0x14>
 800344a:	f000 fb99 	bl	8003b80 <_sbrk_r>
 800344e:	6030      	str	r0, [r6, #0]
 8003450:	0029      	movs	r1, r5
 8003452:	0020      	movs	r0, r4
 8003454:	f000 fb94 	bl	8003b80 <_sbrk_r>
 8003458:	1c43      	adds	r3, r0, #1
 800345a:	d103      	bne.n	8003464 <sbrk_aligned+0x28>
 800345c:	2501      	movs	r5, #1
 800345e:	426d      	negs	r5, r5
 8003460:	0028      	movs	r0, r5
 8003462:	bd70      	pop	{r4, r5, r6, pc}
 8003464:	2303      	movs	r3, #3
 8003466:	1cc5      	adds	r5, r0, #3
 8003468:	439d      	bics	r5, r3
 800346a:	42a8      	cmp	r0, r5
 800346c:	d0f8      	beq.n	8003460 <sbrk_aligned+0x24>
 800346e:	1a29      	subs	r1, r5, r0
 8003470:	0020      	movs	r0, r4
 8003472:	f000 fb85 	bl	8003b80 <_sbrk_r>
 8003476:	3001      	adds	r0, #1
 8003478:	d1f2      	bne.n	8003460 <sbrk_aligned+0x24>
 800347a:	e7ef      	b.n	800345c <sbrk_aligned+0x20>
 800347c:	200002a8 	.word	0x200002a8

08003480 <_malloc_r>:
 8003480:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003482:	2203      	movs	r2, #3
 8003484:	1ccb      	adds	r3, r1, #3
 8003486:	4393      	bics	r3, r2
 8003488:	3308      	adds	r3, #8
 800348a:	0005      	movs	r5, r0
 800348c:	001f      	movs	r7, r3
 800348e:	2b0c      	cmp	r3, #12
 8003490:	d234      	bcs.n	80034fc <_malloc_r+0x7c>
 8003492:	270c      	movs	r7, #12
 8003494:	42b9      	cmp	r1, r7
 8003496:	d833      	bhi.n	8003500 <_malloc_r+0x80>
 8003498:	0028      	movs	r0, r5
 800349a:	f000 f871 	bl	8003580 <__malloc_lock>
 800349e:	4e37      	ldr	r6, [pc, #220]	@ (800357c <_malloc_r+0xfc>)
 80034a0:	6833      	ldr	r3, [r6, #0]
 80034a2:	001c      	movs	r4, r3
 80034a4:	2c00      	cmp	r4, #0
 80034a6:	d12f      	bne.n	8003508 <_malloc_r+0x88>
 80034a8:	0039      	movs	r1, r7
 80034aa:	0028      	movs	r0, r5
 80034ac:	f7ff ffc6 	bl	800343c <sbrk_aligned>
 80034b0:	0004      	movs	r4, r0
 80034b2:	1c43      	adds	r3, r0, #1
 80034b4:	d15f      	bne.n	8003576 <_malloc_r+0xf6>
 80034b6:	6834      	ldr	r4, [r6, #0]
 80034b8:	9400      	str	r4, [sp, #0]
 80034ba:	9b00      	ldr	r3, [sp, #0]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d14a      	bne.n	8003556 <_malloc_r+0xd6>
 80034c0:	2c00      	cmp	r4, #0
 80034c2:	d052      	beq.n	800356a <_malloc_r+0xea>
 80034c4:	6823      	ldr	r3, [r4, #0]
 80034c6:	0028      	movs	r0, r5
 80034c8:	18e3      	adds	r3, r4, r3
 80034ca:	9900      	ldr	r1, [sp, #0]
 80034cc:	9301      	str	r3, [sp, #4]
 80034ce:	f000 fb57 	bl	8003b80 <_sbrk_r>
 80034d2:	9b01      	ldr	r3, [sp, #4]
 80034d4:	4283      	cmp	r3, r0
 80034d6:	d148      	bne.n	800356a <_malloc_r+0xea>
 80034d8:	6823      	ldr	r3, [r4, #0]
 80034da:	0028      	movs	r0, r5
 80034dc:	1aff      	subs	r7, r7, r3
 80034de:	0039      	movs	r1, r7
 80034e0:	f7ff ffac 	bl	800343c <sbrk_aligned>
 80034e4:	3001      	adds	r0, #1
 80034e6:	d040      	beq.n	800356a <_malloc_r+0xea>
 80034e8:	6823      	ldr	r3, [r4, #0]
 80034ea:	19db      	adds	r3, r3, r7
 80034ec:	6023      	str	r3, [r4, #0]
 80034ee:	6833      	ldr	r3, [r6, #0]
 80034f0:	685a      	ldr	r2, [r3, #4]
 80034f2:	2a00      	cmp	r2, #0
 80034f4:	d133      	bne.n	800355e <_malloc_r+0xde>
 80034f6:	9b00      	ldr	r3, [sp, #0]
 80034f8:	6033      	str	r3, [r6, #0]
 80034fa:	e019      	b.n	8003530 <_malloc_r+0xb0>
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	dac9      	bge.n	8003494 <_malloc_r+0x14>
 8003500:	230c      	movs	r3, #12
 8003502:	602b      	str	r3, [r5, #0]
 8003504:	2000      	movs	r0, #0
 8003506:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003508:	6821      	ldr	r1, [r4, #0]
 800350a:	1bc9      	subs	r1, r1, r7
 800350c:	d420      	bmi.n	8003550 <_malloc_r+0xd0>
 800350e:	290b      	cmp	r1, #11
 8003510:	d90a      	bls.n	8003528 <_malloc_r+0xa8>
 8003512:	19e2      	adds	r2, r4, r7
 8003514:	6027      	str	r7, [r4, #0]
 8003516:	42a3      	cmp	r3, r4
 8003518:	d104      	bne.n	8003524 <_malloc_r+0xa4>
 800351a:	6032      	str	r2, [r6, #0]
 800351c:	6863      	ldr	r3, [r4, #4]
 800351e:	6011      	str	r1, [r2, #0]
 8003520:	6053      	str	r3, [r2, #4]
 8003522:	e005      	b.n	8003530 <_malloc_r+0xb0>
 8003524:	605a      	str	r2, [r3, #4]
 8003526:	e7f9      	b.n	800351c <_malloc_r+0x9c>
 8003528:	6862      	ldr	r2, [r4, #4]
 800352a:	42a3      	cmp	r3, r4
 800352c:	d10e      	bne.n	800354c <_malloc_r+0xcc>
 800352e:	6032      	str	r2, [r6, #0]
 8003530:	0028      	movs	r0, r5
 8003532:	f000 f82d 	bl	8003590 <__malloc_unlock>
 8003536:	0020      	movs	r0, r4
 8003538:	2207      	movs	r2, #7
 800353a:	300b      	adds	r0, #11
 800353c:	1d23      	adds	r3, r4, #4
 800353e:	4390      	bics	r0, r2
 8003540:	1ac2      	subs	r2, r0, r3
 8003542:	4298      	cmp	r0, r3
 8003544:	d0df      	beq.n	8003506 <_malloc_r+0x86>
 8003546:	1a1b      	subs	r3, r3, r0
 8003548:	50a3      	str	r3, [r4, r2]
 800354a:	e7dc      	b.n	8003506 <_malloc_r+0x86>
 800354c:	605a      	str	r2, [r3, #4]
 800354e:	e7ef      	b.n	8003530 <_malloc_r+0xb0>
 8003550:	0023      	movs	r3, r4
 8003552:	6864      	ldr	r4, [r4, #4]
 8003554:	e7a6      	b.n	80034a4 <_malloc_r+0x24>
 8003556:	9c00      	ldr	r4, [sp, #0]
 8003558:	6863      	ldr	r3, [r4, #4]
 800355a:	9300      	str	r3, [sp, #0]
 800355c:	e7ad      	b.n	80034ba <_malloc_r+0x3a>
 800355e:	001a      	movs	r2, r3
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	42a3      	cmp	r3, r4
 8003564:	d1fb      	bne.n	800355e <_malloc_r+0xde>
 8003566:	2300      	movs	r3, #0
 8003568:	e7da      	b.n	8003520 <_malloc_r+0xa0>
 800356a:	230c      	movs	r3, #12
 800356c:	0028      	movs	r0, r5
 800356e:	602b      	str	r3, [r5, #0]
 8003570:	f000 f80e 	bl	8003590 <__malloc_unlock>
 8003574:	e7c6      	b.n	8003504 <_malloc_r+0x84>
 8003576:	6007      	str	r7, [r0, #0]
 8003578:	e7da      	b.n	8003530 <_malloc_r+0xb0>
 800357a:	46c0      	nop			@ (mov r8, r8)
 800357c:	200002ac 	.word	0x200002ac

08003580 <__malloc_lock>:
 8003580:	b510      	push	{r4, lr}
 8003582:	4802      	ldr	r0, [pc, #8]	@ (800358c <__malloc_lock+0xc>)
 8003584:	f7ff ff0e 	bl	80033a4 <__retarget_lock_acquire_recursive>
 8003588:	bd10      	pop	{r4, pc}
 800358a:	46c0      	nop			@ (mov r8, r8)
 800358c:	200002a4 	.word	0x200002a4

08003590 <__malloc_unlock>:
 8003590:	b510      	push	{r4, lr}
 8003592:	4802      	ldr	r0, [pc, #8]	@ (800359c <__malloc_unlock+0xc>)
 8003594:	f7ff ff07 	bl	80033a6 <__retarget_lock_release_recursive>
 8003598:	bd10      	pop	{r4, pc}
 800359a:	46c0      	nop			@ (mov r8, r8)
 800359c:	200002a4 	.word	0x200002a4

080035a0 <__ssputs_r>:
 80035a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035a2:	688e      	ldr	r6, [r1, #8]
 80035a4:	b085      	sub	sp, #20
 80035a6:	001f      	movs	r7, r3
 80035a8:	000c      	movs	r4, r1
 80035aa:	680b      	ldr	r3, [r1, #0]
 80035ac:	9002      	str	r0, [sp, #8]
 80035ae:	9203      	str	r2, [sp, #12]
 80035b0:	42be      	cmp	r6, r7
 80035b2:	d830      	bhi.n	8003616 <__ssputs_r+0x76>
 80035b4:	210c      	movs	r1, #12
 80035b6:	5e62      	ldrsh	r2, [r4, r1]
 80035b8:	2190      	movs	r1, #144	@ 0x90
 80035ba:	00c9      	lsls	r1, r1, #3
 80035bc:	420a      	tst	r2, r1
 80035be:	d028      	beq.n	8003612 <__ssputs_r+0x72>
 80035c0:	2003      	movs	r0, #3
 80035c2:	6921      	ldr	r1, [r4, #16]
 80035c4:	1a5b      	subs	r3, r3, r1
 80035c6:	9301      	str	r3, [sp, #4]
 80035c8:	6963      	ldr	r3, [r4, #20]
 80035ca:	4343      	muls	r3, r0
 80035cc:	9801      	ldr	r0, [sp, #4]
 80035ce:	0fdd      	lsrs	r5, r3, #31
 80035d0:	18ed      	adds	r5, r5, r3
 80035d2:	1c7b      	adds	r3, r7, #1
 80035d4:	181b      	adds	r3, r3, r0
 80035d6:	106d      	asrs	r5, r5, #1
 80035d8:	42ab      	cmp	r3, r5
 80035da:	d900      	bls.n	80035de <__ssputs_r+0x3e>
 80035dc:	001d      	movs	r5, r3
 80035de:	0552      	lsls	r2, r2, #21
 80035e0:	d528      	bpl.n	8003634 <__ssputs_r+0x94>
 80035e2:	0029      	movs	r1, r5
 80035e4:	9802      	ldr	r0, [sp, #8]
 80035e6:	f7ff ff4b 	bl	8003480 <_malloc_r>
 80035ea:	1e06      	subs	r6, r0, #0
 80035ec:	d02c      	beq.n	8003648 <__ssputs_r+0xa8>
 80035ee:	9a01      	ldr	r2, [sp, #4]
 80035f0:	6921      	ldr	r1, [r4, #16]
 80035f2:	f000 fae2 	bl	8003bba <memcpy>
 80035f6:	89a2      	ldrh	r2, [r4, #12]
 80035f8:	4b18      	ldr	r3, [pc, #96]	@ (800365c <__ssputs_r+0xbc>)
 80035fa:	401a      	ands	r2, r3
 80035fc:	2380      	movs	r3, #128	@ 0x80
 80035fe:	4313      	orrs	r3, r2
 8003600:	81a3      	strh	r3, [r4, #12]
 8003602:	9b01      	ldr	r3, [sp, #4]
 8003604:	6126      	str	r6, [r4, #16]
 8003606:	18f6      	adds	r6, r6, r3
 8003608:	6026      	str	r6, [r4, #0]
 800360a:	003e      	movs	r6, r7
 800360c:	6165      	str	r5, [r4, #20]
 800360e:	1aed      	subs	r5, r5, r3
 8003610:	60a5      	str	r5, [r4, #8]
 8003612:	42be      	cmp	r6, r7
 8003614:	d900      	bls.n	8003618 <__ssputs_r+0x78>
 8003616:	003e      	movs	r6, r7
 8003618:	0032      	movs	r2, r6
 800361a:	9903      	ldr	r1, [sp, #12]
 800361c:	6820      	ldr	r0, [r4, #0]
 800361e:	f000 fa9b 	bl	8003b58 <memmove>
 8003622:	2000      	movs	r0, #0
 8003624:	68a3      	ldr	r3, [r4, #8]
 8003626:	1b9b      	subs	r3, r3, r6
 8003628:	60a3      	str	r3, [r4, #8]
 800362a:	6823      	ldr	r3, [r4, #0]
 800362c:	199b      	adds	r3, r3, r6
 800362e:	6023      	str	r3, [r4, #0]
 8003630:	b005      	add	sp, #20
 8003632:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003634:	002a      	movs	r2, r5
 8003636:	9802      	ldr	r0, [sp, #8]
 8003638:	f000 fac8 	bl	8003bcc <_realloc_r>
 800363c:	1e06      	subs	r6, r0, #0
 800363e:	d1e0      	bne.n	8003602 <__ssputs_r+0x62>
 8003640:	6921      	ldr	r1, [r4, #16]
 8003642:	9802      	ldr	r0, [sp, #8]
 8003644:	f7ff feb0 	bl	80033a8 <_free_r>
 8003648:	230c      	movs	r3, #12
 800364a:	2001      	movs	r0, #1
 800364c:	9a02      	ldr	r2, [sp, #8]
 800364e:	4240      	negs	r0, r0
 8003650:	6013      	str	r3, [r2, #0]
 8003652:	89a2      	ldrh	r2, [r4, #12]
 8003654:	3334      	adds	r3, #52	@ 0x34
 8003656:	4313      	orrs	r3, r2
 8003658:	81a3      	strh	r3, [r4, #12]
 800365a:	e7e9      	b.n	8003630 <__ssputs_r+0x90>
 800365c:	fffffb7f 	.word	0xfffffb7f

08003660 <_svfiprintf_r>:
 8003660:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003662:	b0a1      	sub	sp, #132	@ 0x84
 8003664:	9003      	str	r0, [sp, #12]
 8003666:	001d      	movs	r5, r3
 8003668:	898b      	ldrh	r3, [r1, #12]
 800366a:	000f      	movs	r7, r1
 800366c:	0016      	movs	r6, r2
 800366e:	061b      	lsls	r3, r3, #24
 8003670:	d511      	bpl.n	8003696 <_svfiprintf_r+0x36>
 8003672:	690b      	ldr	r3, [r1, #16]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d10e      	bne.n	8003696 <_svfiprintf_r+0x36>
 8003678:	2140      	movs	r1, #64	@ 0x40
 800367a:	f7ff ff01 	bl	8003480 <_malloc_r>
 800367e:	6038      	str	r0, [r7, #0]
 8003680:	6138      	str	r0, [r7, #16]
 8003682:	2800      	cmp	r0, #0
 8003684:	d105      	bne.n	8003692 <_svfiprintf_r+0x32>
 8003686:	230c      	movs	r3, #12
 8003688:	9a03      	ldr	r2, [sp, #12]
 800368a:	6013      	str	r3, [r2, #0]
 800368c:	2001      	movs	r0, #1
 800368e:	4240      	negs	r0, r0
 8003690:	e0cf      	b.n	8003832 <_svfiprintf_r+0x1d2>
 8003692:	2340      	movs	r3, #64	@ 0x40
 8003694:	617b      	str	r3, [r7, #20]
 8003696:	2300      	movs	r3, #0
 8003698:	ac08      	add	r4, sp, #32
 800369a:	6163      	str	r3, [r4, #20]
 800369c:	3320      	adds	r3, #32
 800369e:	7663      	strb	r3, [r4, #25]
 80036a0:	3310      	adds	r3, #16
 80036a2:	76a3      	strb	r3, [r4, #26]
 80036a4:	9507      	str	r5, [sp, #28]
 80036a6:	0035      	movs	r5, r6
 80036a8:	782b      	ldrb	r3, [r5, #0]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d001      	beq.n	80036b2 <_svfiprintf_r+0x52>
 80036ae:	2b25      	cmp	r3, #37	@ 0x25
 80036b0:	d148      	bne.n	8003744 <_svfiprintf_r+0xe4>
 80036b2:	1bab      	subs	r3, r5, r6
 80036b4:	9305      	str	r3, [sp, #20]
 80036b6:	42b5      	cmp	r5, r6
 80036b8:	d00b      	beq.n	80036d2 <_svfiprintf_r+0x72>
 80036ba:	0032      	movs	r2, r6
 80036bc:	0039      	movs	r1, r7
 80036be:	9803      	ldr	r0, [sp, #12]
 80036c0:	f7ff ff6e 	bl	80035a0 <__ssputs_r>
 80036c4:	3001      	adds	r0, #1
 80036c6:	d100      	bne.n	80036ca <_svfiprintf_r+0x6a>
 80036c8:	e0ae      	b.n	8003828 <_svfiprintf_r+0x1c8>
 80036ca:	6963      	ldr	r3, [r4, #20]
 80036cc:	9a05      	ldr	r2, [sp, #20]
 80036ce:	189b      	adds	r3, r3, r2
 80036d0:	6163      	str	r3, [r4, #20]
 80036d2:	782b      	ldrb	r3, [r5, #0]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d100      	bne.n	80036da <_svfiprintf_r+0x7a>
 80036d8:	e0a6      	b.n	8003828 <_svfiprintf_r+0x1c8>
 80036da:	2201      	movs	r2, #1
 80036dc:	2300      	movs	r3, #0
 80036de:	4252      	negs	r2, r2
 80036e0:	6062      	str	r2, [r4, #4]
 80036e2:	a904      	add	r1, sp, #16
 80036e4:	3254      	adds	r2, #84	@ 0x54
 80036e6:	1852      	adds	r2, r2, r1
 80036e8:	1c6e      	adds	r6, r5, #1
 80036ea:	6023      	str	r3, [r4, #0]
 80036ec:	60e3      	str	r3, [r4, #12]
 80036ee:	60a3      	str	r3, [r4, #8]
 80036f0:	7013      	strb	r3, [r2, #0]
 80036f2:	65a3      	str	r3, [r4, #88]	@ 0x58
 80036f4:	4b54      	ldr	r3, [pc, #336]	@ (8003848 <_svfiprintf_r+0x1e8>)
 80036f6:	2205      	movs	r2, #5
 80036f8:	0018      	movs	r0, r3
 80036fa:	7831      	ldrb	r1, [r6, #0]
 80036fc:	9305      	str	r3, [sp, #20]
 80036fe:	f000 fa51 	bl	8003ba4 <memchr>
 8003702:	1c75      	adds	r5, r6, #1
 8003704:	2800      	cmp	r0, #0
 8003706:	d11f      	bne.n	8003748 <_svfiprintf_r+0xe8>
 8003708:	6822      	ldr	r2, [r4, #0]
 800370a:	06d3      	lsls	r3, r2, #27
 800370c:	d504      	bpl.n	8003718 <_svfiprintf_r+0xb8>
 800370e:	2353      	movs	r3, #83	@ 0x53
 8003710:	a904      	add	r1, sp, #16
 8003712:	185b      	adds	r3, r3, r1
 8003714:	2120      	movs	r1, #32
 8003716:	7019      	strb	r1, [r3, #0]
 8003718:	0713      	lsls	r3, r2, #28
 800371a:	d504      	bpl.n	8003726 <_svfiprintf_r+0xc6>
 800371c:	2353      	movs	r3, #83	@ 0x53
 800371e:	a904      	add	r1, sp, #16
 8003720:	185b      	adds	r3, r3, r1
 8003722:	212b      	movs	r1, #43	@ 0x2b
 8003724:	7019      	strb	r1, [r3, #0]
 8003726:	7833      	ldrb	r3, [r6, #0]
 8003728:	2b2a      	cmp	r3, #42	@ 0x2a
 800372a:	d016      	beq.n	800375a <_svfiprintf_r+0xfa>
 800372c:	0035      	movs	r5, r6
 800372e:	2100      	movs	r1, #0
 8003730:	200a      	movs	r0, #10
 8003732:	68e3      	ldr	r3, [r4, #12]
 8003734:	782a      	ldrb	r2, [r5, #0]
 8003736:	1c6e      	adds	r6, r5, #1
 8003738:	3a30      	subs	r2, #48	@ 0x30
 800373a:	2a09      	cmp	r2, #9
 800373c:	d950      	bls.n	80037e0 <_svfiprintf_r+0x180>
 800373e:	2900      	cmp	r1, #0
 8003740:	d111      	bne.n	8003766 <_svfiprintf_r+0x106>
 8003742:	e017      	b.n	8003774 <_svfiprintf_r+0x114>
 8003744:	3501      	adds	r5, #1
 8003746:	e7af      	b.n	80036a8 <_svfiprintf_r+0x48>
 8003748:	9b05      	ldr	r3, [sp, #20]
 800374a:	6822      	ldr	r2, [r4, #0]
 800374c:	1ac0      	subs	r0, r0, r3
 800374e:	2301      	movs	r3, #1
 8003750:	4083      	lsls	r3, r0
 8003752:	4313      	orrs	r3, r2
 8003754:	002e      	movs	r6, r5
 8003756:	6023      	str	r3, [r4, #0]
 8003758:	e7cc      	b.n	80036f4 <_svfiprintf_r+0x94>
 800375a:	9b07      	ldr	r3, [sp, #28]
 800375c:	1d19      	adds	r1, r3, #4
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	9107      	str	r1, [sp, #28]
 8003762:	2b00      	cmp	r3, #0
 8003764:	db01      	blt.n	800376a <_svfiprintf_r+0x10a>
 8003766:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003768:	e004      	b.n	8003774 <_svfiprintf_r+0x114>
 800376a:	425b      	negs	r3, r3
 800376c:	60e3      	str	r3, [r4, #12]
 800376e:	2302      	movs	r3, #2
 8003770:	4313      	orrs	r3, r2
 8003772:	6023      	str	r3, [r4, #0]
 8003774:	782b      	ldrb	r3, [r5, #0]
 8003776:	2b2e      	cmp	r3, #46	@ 0x2e
 8003778:	d10c      	bne.n	8003794 <_svfiprintf_r+0x134>
 800377a:	786b      	ldrb	r3, [r5, #1]
 800377c:	2b2a      	cmp	r3, #42	@ 0x2a
 800377e:	d134      	bne.n	80037ea <_svfiprintf_r+0x18a>
 8003780:	9b07      	ldr	r3, [sp, #28]
 8003782:	3502      	adds	r5, #2
 8003784:	1d1a      	adds	r2, r3, #4
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	9207      	str	r2, [sp, #28]
 800378a:	2b00      	cmp	r3, #0
 800378c:	da01      	bge.n	8003792 <_svfiprintf_r+0x132>
 800378e:	2301      	movs	r3, #1
 8003790:	425b      	negs	r3, r3
 8003792:	9309      	str	r3, [sp, #36]	@ 0x24
 8003794:	4e2d      	ldr	r6, [pc, #180]	@ (800384c <_svfiprintf_r+0x1ec>)
 8003796:	2203      	movs	r2, #3
 8003798:	0030      	movs	r0, r6
 800379a:	7829      	ldrb	r1, [r5, #0]
 800379c:	f000 fa02 	bl	8003ba4 <memchr>
 80037a0:	2800      	cmp	r0, #0
 80037a2:	d006      	beq.n	80037b2 <_svfiprintf_r+0x152>
 80037a4:	2340      	movs	r3, #64	@ 0x40
 80037a6:	1b80      	subs	r0, r0, r6
 80037a8:	4083      	lsls	r3, r0
 80037aa:	6822      	ldr	r2, [r4, #0]
 80037ac:	3501      	adds	r5, #1
 80037ae:	4313      	orrs	r3, r2
 80037b0:	6023      	str	r3, [r4, #0]
 80037b2:	7829      	ldrb	r1, [r5, #0]
 80037b4:	2206      	movs	r2, #6
 80037b6:	4826      	ldr	r0, [pc, #152]	@ (8003850 <_svfiprintf_r+0x1f0>)
 80037b8:	1c6e      	adds	r6, r5, #1
 80037ba:	7621      	strb	r1, [r4, #24]
 80037bc:	f000 f9f2 	bl	8003ba4 <memchr>
 80037c0:	2800      	cmp	r0, #0
 80037c2:	d038      	beq.n	8003836 <_svfiprintf_r+0x1d6>
 80037c4:	4b23      	ldr	r3, [pc, #140]	@ (8003854 <_svfiprintf_r+0x1f4>)
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d122      	bne.n	8003810 <_svfiprintf_r+0x1b0>
 80037ca:	2207      	movs	r2, #7
 80037cc:	9b07      	ldr	r3, [sp, #28]
 80037ce:	3307      	adds	r3, #7
 80037d0:	4393      	bics	r3, r2
 80037d2:	3308      	adds	r3, #8
 80037d4:	9307      	str	r3, [sp, #28]
 80037d6:	6963      	ldr	r3, [r4, #20]
 80037d8:	9a04      	ldr	r2, [sp, #16]
 80037da:	189b      	adds	r3, r3, r2
 80037dc:	6163      	str	r3, [r4, #20]
 80037de:	e762      	b.n	80036a6 <_svfiprintf_r+0x46>
 80037e0:	4343      	muls	r3, r0
 80037e2:	0035      	movs	r5, r6
 80037e4:	2101      	movs	r1, #1
 80037e6:	189b      	adds	r3, r3, r2
 80037e8:	e7a4      	b.n	8003734 <_svfiprintf_r+0xd4>
 80037ea:	2300      	movs	r3, #0
 80037ec:	200a      	movs	r0, #10
 80037ee:	0019      	movs	r1, r3
 80037f0:	3501      	adds	r5, #1
 80037f2:	6063      	str	r3, [r4, #4]
 80037f4:	782a      	ldrb	r2, [r5, #0]
 80037f6:	1c6e      	adds	r6, r5, #1
 80037f8:	3a30      	subs	r2, #48	@ 0x30
 80037fa:	2a09      	cmp	r2, #9
 80037fc:	d903      	bls.n	8003806 <_svfiprintf_r+0x1a6>
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d0c8      	beq.n	8003794 <_svfiprintf_r+0x134>
 8003802:	9109      	str	r1, [sp, #36]	@ 0x24
 8003804:	e7c6      	b.n	8003794 <_svfiprintf_r+0x134>
 8003806:	4341      	muls	r1, r0
 8003808:	0035      	movs	r5, r6
 800380a:	2301      	movs	r3, #1
 800380c:	1889      	adds	r1, r1, r2
 800380e:	e7f1      	b.n	80037f4 <_svfiprintf_r+0x194>
 8003810:	aa07      	add	r2, sp, #28
 8003812:	9200      	str	r2, [sp, #0]
 8003814:	0021      	movs	r1, r4
 8003816:	003a      	movs	r2, r7
 8003818:	4b0f      	ldr	r3, [pc, #60]	@ (8003858 <_svfiprintf_r+0x1f8>)
 800381a:	9803      	ldr	r0, [sp, #12]
 800381c:	e000      	b.n	8003820 <_svfiprintf_r+0x1c0>
 800381e:	bf00      	nop
 8003820:	9004      	str	r0, [sp, #16]
 8003822:	9b04      	ldr	r3, [sp, #16]
 8003824:	3301      	adds	r3, #1
 8003826:	d1d6      	bne.n	80037d6 <_svfiprintf_r+0x176>
 8003828:	89bb      	ldrh	r3, [r7, #12]
 800382a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800382c:	065b      	lsls	r3, r3, #25
 800382e:	d500      	bpl.n	8003832 <_svfiprintf_r+0x1d2>
 8003830:	e72c      	b.n	800368c <_svfiprintf_r+0x2c>
 8003832:	b021      	add	sp, #132	@ 0x84
 8003834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003836:	aa07      	add	r2, sp, #28
 8003838:	9200      	str	r2, [sp, #0]
 800383a:	0021      	movs	r1, r4
 800383c:	003a      	movs	r2, r7
 800383e:	4b06      	ldr	r3, [pc, #24]	@ (8003858 <_svfiprintf_r+0x1f8>)
 8003840:	9803      	ldr	r0, [sp, #12]
 8003842:	f000 f87b 	bl	800393c <_printf_i>
 8003846:	e7eb      	b.n	8003820 <_svfiprintf_r+0x1c0>
 8003848:	08003de8 	.word	0x08003de8
 800384c:	08003dee 	.word	0x08003dee
 8003850:	08003df2 	.word	0x08003df2
 8003854:	00000000 	.word	0x00000000
 8003858:	080035a1 	.word	0x080035a1

0800385c <_printf_common>:
 800385c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800385e:	0016      	movs	r6, r2
 8003860:	9301      	str	r3, [sp, #4]
 8003862:	688a      	ldr	r2, [r1, #8]
 8003864:	690b      	ldr	r3, [r1, #16]
 8003866:	000c      	movs	r4, r1
 8003868:	9000      	str	r0, [sp, #0]
 800386a:	4293      	cmp	r3, r2
 800386c:	da00      	bge.n	8003870 <_printf_common+0x14>
 800386e:	0013      	movs	r3, r2
 8003870:	0022      	movs	r2, r4
 8003872:	6033      	str	r3, [r6, #0]
 8003874:	3243      	adds	r2, #67	@ 0x43
 8003876:	7812      	ldrb	r2, [r2, #0]
 8003878:	2a00      	cmp	r2, #0
 800387a:	d001      	beq.n	8003880 <_printf_common+0x24>
 800387c:	3301      	adds	r3, #1
 800387e:	6033      	str	r3, [r6, #0]
 8003880:	6823      	ldr	r3, [r4, #0]
 8003882:	069b      	lsls	r3, r3, #26
 8003884:	d502      	bpl.n	800388c <_printf_common+0x30>
 8003886:	6833      	ldr	r3, [r6, #0]
 8003888:	3302      	adds	r3, #2
 800388a:	6033      	str	r3, [r6, #0]
 800388c:	6822      	ldr	r2, [r4, #0]
 800388e:	2306      	movs	r3, #6
 8003890:	0015      	movs	r5, r2
 8003892:	401d      	ands	r5, r3
 8003894:	421a      	tst	r2, r3
 8003896:	d027      	beq.n	80038e8 <_printf_common+0x8c>
 8003898:	0023      	movs	r3, r4
 800389a:	3343      	adds	r3, #67	@ 0x43
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	1e5a      	subs	r2, r3, #1
 80038a0:	4193      	sbcs	r3, r2
 80038a2:	6822      	ldr	r2, [r4, #0]
 80038a4:	0692      	lsls	r2, r2, #26
 80038a6:	d430      	bmi.n	800390a <_printf_common+0xae>
 80038a8:	0022      	movs	r2, r4
 80038aa:	9901      	ldr	r1, [sp, #4]
 80038ac:	9800      	ldr	r0, [sp, #0]
 80038ae:	9d08      	ldr	r5, [sp, #32]
 80038b0:	3243      	adds	r2, #67	@ 0x43
 80038b2:	47a8      	blx	r5
 80038b4:	3001      	adds	r0, #1
 80038b6:	d025      	beq.n	8003904 <_printf_common+0xa8>
 80038b8:	2206      	movs	r2, #6
 80038ba:	6823      	ldr	r3, [r4, #0]
 80038bc:	2500      	movs	r5, #0
 80038be:	4013      	ands	r3, r2
 80038c0:	2b04      	cmp	r3, #4
 80038c2:	d105      	bne.n	80038d0 <_printf_common+0x74>
 80038c4:	6833      	ldr	r3, [r6, #0]
 80038c6:	68e5      	ldr	r5, [r4, #12]
 80038c8:	1aed      	subs	r5, r5, r3
 80038ca:	43eb      	mvns	r3, r5
 80038cc:	17db      	asrs	r3, r3, #31
 80038ce:	401d      	ands	r5, r3
 80038d0:	68a3      	ldr	r3, [r4, #8]
 80038d2:	6922      	ldr	r2, [r4, #16]
 80038d4:	4293      	cmp	r3, r2
 80038d6:	dd01      	ble.n	80038dc <_printf_common+0x80>
 80038d8:	1a9b      	subs	r3, r3, r2
 80038da:	18ed      	adds	r5, r5, r3
 80038dc:	2600      	movs	r6, #0
 80038de:	42b5      	cmp	r5, r6
 80038e0:	d120      	bne.n	8003924 <_printf_common+0xc8>
 80038e2:	2000      	movs	r0, #0
 80038e4:	e010      	b.n	8003908 <_printf_common+0xac>
 80038e6:	3501      	adds	r5, #1
 80038e8:	68e3      	ldr	r3, [r4, #12]
 80038ea:	6832      	ldr	r2, [r6, #0]
 80038ec:	1a9b      	subs	r3, r3, r2
 80038ee:	42ab      	cmp	r3, r5
 80038f0:	ddd2      	ble.n	8003898 <_printf_common+0x3c>
 80038f2:	0022      	movs	r2, r4
 80038f4:	2301      	movs	r3, #1
 80038f6:	9901      	ldr	r1, [sp, #4]
 80038f8:	9800      	ldr	r0, [sp, #0]
 80038fa:	9f08      	ldr	r7, [sp, #32]
 80038fc:	3219      	adds	r2, #25
 80038fe:	47b8      	blx	r7
 8003900:	3001      	adds	r0, #1
 8003902:	d1f0      	bne.n	80038e6 <_printf_common+0x8a>
 8003904:	2001      	movs	r0, #1
 8003906:	4240      	negs	r0, r0
 8003908:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800390a:	2030      	movs	r0, #48	@ 0x30
 800390c:	18e1      	adds	r1, r4, r3
 800390e:	3143      	adds	r1, #67	@ 0x43
 8003910:	7008      	strb	r0, [r1, #0]
 8003912:	0021      	movs	r1, r4
 8003914:	1c5a      	adds	r2, r3, #1
 8003916:	3145      	adds	r1, #69	@ 0x45
 8003918:	7809      	ldrb	r1, [r1, #0]
 800391a:	18a2      	adds	r2, r4, r2
 800391c:	3243      	adds	r2, #67	@ 0x43
 800391e:	3302      	adds	r3, #2
 8003920:	7011      	strb	r1, [r2, #0]
 8003922:	e7c1      	b.n	80038a8 <_printf_common+0x4c>
 8003924:	0022      	movs	r2, r4
 8003926:	2301      	movs	r3, #1
 8003928:	9901      	ldr	r1, [sp, #4]
 800392a:	9800      	ldr	r0, [sp, #0]
 800392c:	9f08      	ldr	r7, [sp, #32]
 800392e:	321a      	adds	r2, #26
 8003930:	47b8      	blx	r7
 8003932:	3001      	adds	r0, #1
 8003934:	d0e6      	beq.n	8003904 <_printf_common+0xa8>
 8003936:	3601      	adds	r6, #1
 8003938:	e7d1      	b.n	80038de <_printf_common+0x82>
	...

0800393c <_printf_i>:
 800393c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800393e:	b08b      	sub	sp, #44	@ 0x2c
 8003940:	9206      	str	r2, [sp, #24]
 8003942:	000a      	movs	r2, r1
 8003944:	3243      	adds	r2, #67	@ 0x43
 8003946:	9307      	str	r3, [sp, #28]
 8003948:	9005      	str	r0, [sp, #20]
 800394a:	9203      	str	r2, [sp, #12]
 800394c:	7e0a      	ldrb	r2, [r1, #24]
 800394e:	000c      	movs	r4, r1
 8003950:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8003952:	2a78      	cmp	r2, #120	@ 0x78
 8003954:	d809      	bhi.n	800396a <_printf_i+0x2e>
 8003956:	2a62      	cmp	r2, #98	@ 0x62
 8003958:	d80b      	bhi.n	8003972 <_printf_i+0x36>
 800395a:	2a00      	cmp	r2, #0
 800395c:	d100      	bne.n	8003960 <_printf_i+0x24>
 800395e:	e0bc      	b.n	8003ada <_printf_i+0x19e>
 8003960:	497b      	ldr	r1, [pc, #492]	@ (8003b50 <_printf_i+0x214>)
 8003962:	9104      	str	r1, [sp, #16]
 8003964:	2a58      	cmp	r2, #88	@ 0x58
 8003966:	d100      	bne.n	800396a <_printf_i+0x2e>
 8003968:	e090      	b.n	8003a8c <_printf_i+0x150>
 800396a:	0025      	movs	r5, r4
 800396c:	3542      	adds	r5, #66	@ 0x42
 800396e:	702a      	strb	r2, [r5, #0]
 8003970:	e022      	b.n	80039b8 <_printf_i+0x7c>
 8003972:	0010      	movs	r0, r2
 8003974:	3863      	subs	r0, #99	@ 0x63
 8003976:	2815      	cmp	r0, #21
 8003978:	d8f7      	bhi.n	800396a <_printf_i+0x2e>
 800397a:	f7fc fbc9 	bl	8000110 <__gnu_thumb1_case_shi>
 800397e:	0016      	.short	0x0016
 8003980:	fff6001f 	.word	0xfff6001f
 8003984:	fff6fff6 	.word	0xfff6fff6
 8003988:	001ffff6 	.word	0x001ffff6
 800398c:	fff6fff6 	.word	0xfff6fff6
 8003990:	fff6fff6 	.word	0xfff6fff6
 8003994:	003600a1 	.word	0x003600a1
 8003998:	fff60080 	.word	0xfff60080
 800399c:	00b2fff6 	.word	0x00b2fff6
 80039a0:	0036fff6 	.word	0x0036fff6
 80039a4:	fff6fff6 	.word	0xfff6fff6
 80039a8:	0084      	.short	0x0084
 80039aa:	0025      	movs	r5, r4
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	3542      	adds	r5, #66	@ 0x42
 80039b0:	1d11      	adds	r1, r2, #4
 80039b2:	6019      	str	r1, [r3, #0]
 80039b4:	6813      	ldr	r3, [r2, #0]
 80039b6:	702b      	strb	r3, [r5, #0]
 80039b8:	2301      	movs	r3, #1
 80039ba:	e0a0      	b.n	8003afe <_printf_i+0x1c2>
 80039bc:	6818      	ldr	r0, [r3, #0]
 80039be:	6809      	ldr	r1, [r1, #0]
 80039c0:	1d02      	adds	r2, r0, #4
 80039c2:	060d      	lsls	r5, r1, #24
 80039c4:	d50b      	bpl.n	80039de <_printf_i+0xa2>
 80039c6:	6806      	ldr	r6, [r0, #0]
 80039c8:	601a      	str	r2, [r3, #0]
 80039ca:	2e00      	cmp	r6, #0
 80039cc:	da03      	bge.n	80039d6 <_printf_i+0x9a>
 80039ce:	232d      	movs	r3, #45	@ 0x2d
 80039d0:	9a03      	ldr	r2, [sp, #12]
 80039d2:	4276      	negs	r6, r6
 80039d4:	7013      	strb	r3, [r2, #0]
 80039d6:	4b5e      	ldr	r3, [pc, #376]	@ (8003b50 <_printf_i+0x214>)
 80039d8:	270a      	movs	r7, #10
 80039da:	9304      	str	r3, [sp, #16]
 80039dc:	e018      	b.n	8003a10 <_printf_i+0xd4>
 80039de:	6806      	ldr	r6, [r0, #0]
 80039e0:	601a      	str	r2, [r3, #0]
 80039e2:	0649      	lsls	r1, r1, #25
 80039e4:	d5f1      	bpl.n	80039ca <_printf_i+0x8e>
 80039e6:	b236      	sxth	r6, r6
 80039e8:	e7ef      	b.n	80039ca <_printf_i+0x8e>
 80039ea:	6808      	ldr	r0, [r1, #0]
 80039ec:	6819      	ldr	r1, [r3, #0]
 80039ee:	c940      	ldmia	r1!, {r6}
 80039f0:	0605      	lsls	r5, r0, #24
 80039f2:	d402      	bmi.n	80039fa <_printf_i+0xbe>
 80039f4:	0640      	lsls	r0, r0, #25
 80039f6:	d500      	bpl.n	80039fa <_printf_i+0xbe>
 80039f8:	b2b6      	uxth	r6, r6
 80039fa:	6019      	str	r1, [r3, #0]
 80039fc:	4b54      	ldr	r3, [pc, #336]	@ (8003b50 <_printf_i+0x214>)
 80039fe:	270a      	movs	r7, #10
 8003a00:	9304      	str	r3, [sp, #16]
 8003a02:	2a6f      	cmp	r2, #111	@ 0x6f
 8003a04:	d100      	bne.n	8003a08 <_printf_i+0xcc>
 8003a06:	3f02      	subs	r7, #2
 8003a08:	0023      	movs	r3, r4
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	3343      	adds	r3, #67	@ 0x43
 8003a0e:	701a      	strb	r2, [r3, #0]
 8003a10:	6863      	ldr	r3, [r4, #4]
 8003a12:	60a3      	str	r3, [r4, #8]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	db03      	blt.n	8003a20 <_printf_i+0xe4>
 8003a18:	2104      	movs	r1, #4
 8003a1a:	6822      	ldr	r2, [r4, #0]
 8003a1c:	438a      	bics	r2, r1
 8003a1e:	6022      	str	r2, [r4, #0]
 8003a20:	2e00      	cmp	r6, #0
 8003a22:	d102      	bne.n	8003a2a <_printf_i+0xee>
 8003a24:	9d03      	ldr	r5, [sp, #12]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00c      	beq.n	8003a44 <_printf_i+0x108>
 8003a2a:	9d03      	ldr	r5, [sp, #12]
 8003a2c:	0030      	movs	r0, r6
 8003a2e:	0039      	movs	r1, r7
 8003a30:	f7fc fbfe 	bl	8000230 <__aeabi_uidivmod>
 8003a34:	9b04      	ldr	r3, [sp, #16]
 8003a36:	3d01      	subs	r5, #1
 8003a38:	5c5b      	ldrb	r3, [r3, r1]
 8003a3a:	702b      	strb	r3, [r5, #0]
 8003a3c:	0033      	movs	r3, r6
 8003a3e:	0006      	movs	r6, r0
 8003a40:	429f      	cmp	r7, r3
 8003a42:	d9f3      	bls.n	8003a2c <_printf_i+0xf0>
 8003a44:	2f08      	cmp	r7, #8
 8003a46:	d109      	bne.n	8003a5c <_printf_i+0x120>
 8003a48:	6823      	ldr	r3, [r4, #0]
 8003a4a:	07db      	lsls	r3, r3, #31
 8003a4c:	d506      	bpl.n	8003a5c <_printf_i+0x120>
 8003a4e:	6862      	ldr	r2, [r4, #4]
 8003a50:	6923      	ldr	r3, [r4, #16]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	dc02      	bgt.n	8003a5c <_printf_i+0x120>
 8003a56:	2330      	movs	r3, #48	@ 0x30
 8003a58:	3d01      	subs	r5, #1
 8003a5a:	702b      	strb	r3, [r5, #0]
 8003a5c:	9b03      	ldr	r3, [sp, #12]
 8003a5e:	1b5b      	subs	r3, r3, r5
 8003a60:	6123      	str	r3, [r4, #16]
 8003a62:	9b07      	ldr	r3, [sp, #28]
 8003a64:	0021      	movs	r1, r4
 8003a66:	9300      	str	r3, [sp, #0]
 8003a68:	9805      	ldr	r0, [sp, #20]
 8003a6a:	9b06      	ldr	r3, [sp, #24]
 8003a6c:	aa09      	add	r2, sp, #36	@ 0x24
 8003a6e:	f7ff fef5 	bl	800385c <_printf_common>
 8003a72:	3001      	adds	r0, #1
 8003a74:	d148      	bne.n	8003b08 <_printf_i+0x1cc>
 8003a76:	2001      	movs	r0, #1
 8003a78:	4240      	negs	r0, r0
 8003a7a:	b00b      	add	sp, #44	@ 0x2c
 8003a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a7e:	2220      	movs	r2, #32
 8003a80:	6809      	ldr	r1, [r1, #0]
 8003a82:	430a      	orrs	r2, r1
 8003a84:	6022      	str	r2, [r4, #0]
 8003a86:	2278      	movs	r2, #120	@ 0x78
 8003a88:	4932      	ldr	r1, [pc, #200]	@ (8003b54 <_printf_i+0x218>)
 8003a8a:	9104      	str	r1, [sp, #16]
 8003a8c:	0021      	movs	r1, r4
 8003a8e:	3145      	adds	r1, #69	@ 0x45
 8003a90:	700a      	strb	r2, [r1, #0]
 8003a92:	6819      	ldr	r1, [r3, #0]
 8003a94:	6822      	ldr	r2, [r4, #0]
 8003a96:	c940      	ldmia	r1!, {r6}
 8003a98:	0610      	lsls	r0, r2, #24
 8003a9a:	d402      	bmi.n	8003aa2 <_printf_i+0x166>
 8003a9c:	0650      	lsls	r0, r2, #25
 8003a9e:	d500      	bpl.n	8003aa2 <_printf_i+0x166>
 8003aa0:	b2b6      	uxth	r6, r6
 8003aa2:	6019      	str	r1, [r3, #0]
 8003aa4:	07d3      	lsls	r3, r2, #31
 8003aa6:	d502      	bpl.n	8003aae <_printf_i+0x172>
 8003aa8:	2320      	movs	r3, #32
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	6023      	str	r3, [r4, #0]
 8003aae:	2e00      	cmp	r6, #0
 8003ab0:	d001      	beq.n	8003ab6 <_printf_i+0x17a>
 8003ab2:	2710      	movs	r7, #16
 8003ab4:	e7a8      	b.n	8003a08 <_printf_i+0xcc>
 8003ab6:	2220      	movs	r2, #32
 8003ab8:	6823      	ldr	r3, [r4, #0]
 8003aba:	4393      	bics	r3, r2
 8003abc:	6023      	str	r3, [r4, #0]
 8003abe:	e7f8      	b.n	8003ab2 <_printf_i+0x176>
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	680d      	ldr	r5, [r1, #0]
 8003ac4:	1d10      	adds	r0, r2, #4
 8003ac6:	6949      	ldr	r1, [r1, #20]
 8003ac8:	6018      	str	r0, [r3, #0]
 8003aca:	6813      	ldr	r3, [r2, #0]
 8003acc:	062e      	lsls	r6, r5, #24
 8003ace:	d501      	bpl.n	8003ad4 <_printf_i+0x198>
 8003ad0:	6019      	str	r1, [r3, #0]
 8003ad2:	e002      	b.n	8003ada <_printf_i+0x19e>
 8003ad4:	066d      	lsls	r5, r5, #25
 8003ad6:	d5fb      	bpl.n	8003ad0 <_printf_i+0x194>
 8003ad8:	8019      	strh	r1, [r3, #0]
 8003ada:	2300      	movs	r3, #0
 8003adc:	9d03      	ldr	r5, [sp, #12]
 8003ade:	6123      	str	r3, [r4, #16]
 8003ae0:	e7bf      	b.n	8003a62 <_printf_i+0x126>
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	1d11      	adds	r1, r2, #4
 8003ae6:	6019      	str	r1, [r3, #0]
 8003ae8:	6815      	ldr	r5, [r2, #0]
 8003aea:	2100      	movs	r1, #0
 8003aec:	0028      	movs	r0, r5
 8003aee:	6862      	ldr	r2, [r4, #4]
 8003af0:	f000 f858 	bl	8003ba4 <memchr>
 8003af4:	2800      	cmp	r0, #0
 8003af6:	d001      	beq.n	8003afc <_printf_i+0x1c0>
 8003af8:	1b40      	subs	r0, r0, r5
 8003afa:	6060      	str	r0, [r4, #4]
 8003afc:	6863      	ldr	r3, [r4, #4]
 8003afe:	6123      	str	r3, [r4, #16]
 8003b00:	2300      	movs	r3, #0
 8003b02:	9a03      	ldr	r2, [sp, #12]
 8003b04:	7013      	strb	r3, [r2, #0]
 8003b06:	e7ac      	b.n	8003a62 <_printf_i+0x126>
 8003b08:	002a      	movs	r2, r5
 8003b0a:	6923      	ldr	r3, [r4, #16]
 8003b0c:	9906      	ldr	r1, [sp, #24]
 8003b0e:	9805      	ldr	r0, [sp, #20]
 8003b10:	9d07      	ldr	r5, [sp, #28]
 8003b12:	47a8      	blx	r5
 8003b14:	3001      	adds	r0, #1
 8003b16:	d0ae      	beq.n	8003a76 <_printf_i+0x13a>
 8003b18:	6823      	ldr	r3, [r4, #0]
 8003b1a:	079b      	lsls	r3, r3, #30
 8003b1c:	d415      	bmi.n	8003b4a <_printf_i+0x20e>
 8003b1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003b20:	68e0      	ldr	r0, [r4, #12]
 8003b22:	4298      	cmp	r0, r3
 8003b24:	daa9      	bge.n	8003a7a <_printf_i+0x13e>
 8003b26:	0018      	movs	r0, r3
 8003b28:	e7a7      	b.n	8003a7a <_printf_i+0x13e>
 8003b2a:	0022      	movs	r2, r4
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	9906      	ldr	r1, [sp, #24]
 8003b30:	9805      	ldr	r0, [sp, #20]
 8003b32:	9e07      	ldr	r6, [sp, #28]
 8003b34:	3219      	adds	r2, #25
 8003b36:	47b0      	blx	r6
 8003b38:	3001      	adds	r0, #1
 8003b3a:	d09c      	beq.n	8003a76 <_printf_i+0x13a>
 8003b3c:	3501      	adds	r5, #1
 8003b3e:	68e3      	ldr	r3, [r4, #12]
 8003b40:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003b42:	1a9b      	subs	r3, r3, r2
 8003b44:	42ab      	cmp	r3, r5
 8003b46:	dcf0      	bgt.n	8003b2a <_printf_i+0x1ee>
 8003b48:	e7e9      	b.n	8003b1e <_printf_i+0x1e2>
 8003b4a:	2500      	movs	r5, #0
 8003b4c:	e7f7      	b.n	8003b3e <_printf_i+0x202>
 8003b4e:	46c0      	nop			@ (mov r8, r8)
 8003b50:	08003df9 	.word	0x08003df9
 8003b54:	08003e0a 	.word	0x08003e0a

08003b58 <memmove>:
 8003b58:	b510      	push	{r4, lr}
 8003b5a:	4288      	cmp	r0, r1
 8003b5c:	d806      	bhi.n	8003b6c <memmove+0x14>
 8003b5e:	2300      	movs	r3, #0
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d008      	beq.n	8003b76 <memmove+0x1e>
 8003b64:	5ccc      	ldrb	r4, [r1, r3]
 8003b66:	54c4      	strb	r4, [r0, r3]
 8003b68:	3301      	adds	r3, #1
 8003b6a:	e7f9      	b.n	8003b60 <memmove+0x8>
 8003b6c:	188b      	adds	r3, r1, r2
 8003b6e:	4298      	cmp	r0, r3
 8003b70:	d2f5      	bcs.n	8003b5e <memmove+0x6>
 8003b72:	3a01      	subs	r2, #1
 8003b74:	d200      	bcs.n	8003b78 <memmove+0x20>
 8003b76:	bd10      	pop	{r4, pc}
 8003b78:	5c8b      	ldrb	r3, [r1, r2]
 8003b7a:	5483      	strb	r3, [r0, r2]
 8003b7c:	e7f9      	b.n	8003b72 <memmove+0x1a>
	...

08003b80 <_sbrk_r>:
 8003b80:	2300      	movs	r3, #0
 8003b82:	b570      	push	{r4, r5, r6, lr}
 8003b84:	4d06      	ldr	r5, [pc, #24]	@ (8003ba0 <_sbrk_r+0x20>)
 8003b86:	0004      	movs	r4, r0
 8003b88:	0008      	movs	r0, r1
 8003b8a:	602b      	str	r3, [r5, #0]
 8003b8c:	f7fc ff6a 	bl	8000a64 <_sbrk>
 8003b90:	1c43      	adds	r3, r0, #1
 8003b92:	d103      	bne.n	8003b9c <_sbrk_r+0x1c>
 8003b94:	682b      	ldr	r3, [r5, #0]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d000      	beq.n	8003b9c <_sbrk_r+0x1c>
 8003b9a:	6023      	str	r3, [r4, #0]
 8003b9c:	bd70      	pop	{r4, r5, r6, pc}
 8003b9e:	46c0      	nop			@ (mov r8, r8)
 8003ba0:	200002a0 	.word	0x200002a0

08003ba4 <memchr>:
 8003ba4:	b2c9      	uxtb	r1, r1
 8003ba6:	1882      	adds	r2, r0, r2
 8003ba8:	4290      	cmp	r0, r2
 8003baa:	d101      	bne.n	8003bb0 <memchr+0xc>
 8003bac:	2000      	movs	r0, #0
 8003bae:	4770      	bx	lr
 8003bb0:	7803      	ldrb	r3, [r0, #0]
 8003bb2:	428b      	cmp	r3, r1
 8003bb4:	d0fb      	beq.n	8003bae <memchr+0xa>
 8003bb6:	3001      	adds	r0, #1
 8003bb8:	e7f6      	b.n	8003ba8 <memchr+0x4>

08003bba <memcpy>:
 8003bba:	2300      	movs	r3, #0
 8003bbc:	b510      	push	{r4, lr}
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d100      	bne.n	8003bc4 <memcpy+0xa>
 8003bc2:	bd10      	pop	{r4, pc}
 8003bc4:	5ccc      	ldrb	r4, [r1, r3]
 8003bc6:	54c4      	strb	r4, [r0, r3]
 8003bc8:	3301      	adds	r3, #1
 8003bca:	e7f8      	b.n	8003bbe <memcpy+0x4>

08003bcc <_realloc_r>:
 8003bcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003bce:	0006      	movs	r6, r0
 8003bd0:	000c      	movs	r4, r1
 8003bd2:	0015      	movs	r5, r2
 8003bd4:	2900      	cmp	r1, #0
 8003bd6:	d105      	bne.n	8003be4 <_realloc_r+0x18>
 8003bd8:	0011      	movs	r1, r2
 8003bda:	f7ff fc51 	bl	8003480 <_malloc_r>
 8003bde:	0004      	movs	r4, r0
 8003be0:	0020      	movs	r0, r4
 8003be2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003be4:	2a00      	cmp	r2, #0
 8003be6:	d103      	bne.n	8003bf0 <_realloc_r+0x24>
 8003be8:	f7ff fbde 	bl	80033a8 <_free_r>
 8003bec:	2400      	movs	r4, #0
 8003bee:	e7f7      	b.n	8003be0 <_realloc_r+0x14>
 8003bf0:	f000 f81b 	bl	8003c2a <_malloc_usable_size_r>
 8003bf4:	0007      	movs	r7, r0
 8003bf6:	4285      	cmp	r5, r0
 8003bf8:	d802      	bhi.n	8003c00 <_realloc_r+0x34>
 8003bfa:	0843      	lsrs	r3, r0, #1
 8003bfc:	42ab      	cmp	r3, r5
 8003bfe:	d3ef      	bcc.n	8003be0 <_realloc_r+0x14>
 8003c00:	0029      	movs	r1, r5
 8003c02:	0030      	movs	r0, r6
 8003c04:	f7ff fc3c 	bl	8003480 <_malloc_r>
 8003c08:	9001      	str	r0, [sp, #4]
 8003c0a:	2800      	cmp	r0, #0
 8003c0c:	d0ee      	beq.n	8003bec <_realloc_r+0x20>
 8003c0e:	002a      	movs	r2, r5
 8003c10:	42bd      	cmp	r5, r7
 8003c12:	d900      	bls.n	8003c16 <_realloc_r+0x4a>
 8003c14:	003a      	movs	r2, r7
 8003c16:	0021      	movs	r1, r4
 8003c18:	9801      	ldr	r0, [sp, #4]
 8003c1a:	f7ff ffce 	bl	8003bba <memcpy>
 8003c1e:	0021      	movs	r1, r4
 8003c20:	0030      	movs	r0, r6
 8003c22:	f7ff fbc1 	bl	80033a8 <_free_r>
 8003c26:	9c01      	ldr	r4, [sp, #4]
 8003c28:	e7da      	b.n	8003be0 <_realloc_r+0x14>

08003c2a <_malloc_usable_size_r>:
 8003c2a:	1f0b      	subs	r3, r1, #4
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	1f18      	subs	r0, r3, #4
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	da01      	bge.n	8003c38 <_malloc_usable_size_r+0xe>
 8003c34:	580b      	ldr	r3, [r1, r0]
 8003c36:	18c0      	adds	r0, r0, r3
 8003c38:	4770      	bx	lr
	...

08003c3c <_init>:
 8003c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c3e:	46c0      	nop			@ (mov r8, r8)
 8003c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c42:	bc08      	pop	{r3}
 8003c44:	469e      	mov	lr, r3
 8003c46:	4770      	bx	lr

08003c48 <_fini>:
 8003c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c4a:	46c0      	nop			@ (mov r8, r8)
 8003c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c4e:	bc08      	pop	{r3}
 8003c50:	469e      	mov	lr, r3
 8003c52:	4770      	bx	lr
